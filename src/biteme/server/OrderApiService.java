package biteme.server;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.Duration;
import java.time.LocalDateTime;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;

import logic.Item;
import logic.Options;
import logic.Order;

/**
 * BiteMe
 *
 * <p>
 * No description provided (generated by Swagger Codegen
 * https://github.com/swagger-api/swagger-codegen)
 *
 */
public class OrderApiService {
	/**
	 * Add a new order
	 *
	 */
	public static void addOrder(Order order, Response response) {
		ResultSet rs;
		int orderID = 0, shipmentID, price;
		Options options = null;
		try {
			PreparedStatement postOrder = EchoServer.con.prepareStatement(
					"INSERT INTO biteme.order (OrderNum, ResturantID, ResturantName, UserName, OrderTime, PhoneNumber, TypeOfOrder, Discount_for_early_order,"
							+ "Check_out_price, isApproved, required_time, approved_time, hasArraived)"
							+ " VALUES (?,?,?,?,?,?,?,?,?,?,?);SELECT last_insert_id();");
			postOrder.setInt(1, order.getOrderID());
			postOrder.setInt(2, order.getRestaurantID());
			postOrder.setString(3, order.getRestaurantName());
			postOrder.setString(4, order.getUserName());
			postOrder.setString(5, order.getTime_taken());
			postOrder.setString(6, order.getPhone());
			postOrder.setString(7, order.getType_of_order());
			postOrder.setInt(8, order.getDiscount_for_early_order());
			postOrder.setDouble(9, order.getCheck_out_price());
			postOrder.setBoolean(10, order.isApproved());
			postOrder.setString(11, order.getRequired_time());
			postOrder.setString(12, order.getApproved_time());
			postOrder.setBoolean(13, order.getHasArrived());
			postOrder.execute();
			rs = postOrder.getResultSet();
		} catch (SQLException e) {
			response.setCode(405);
			response.setDescription("Invalid input");
			return;
		}
		try {
			PreparedStatement postItem = EchoServer.con.prepareStatement(
					"INSERT INTO biteme.item_in_menu_in_order (OrderNum, ItemID, Item_name, OptionalType, OptionalSpecify,"
							+ "Amount)"
							+ " VALUES (?,?,?,?,?,?);Select amount from biteme.item_in_menu_in_order WHRER OrderNum =?"
							+ "AND ItemID = ? AND OptionalType = ? AND OptionalSpecify = ?");
			postItem.setInt(1, rs.getInt(1));
			postItem.setInt(7, rs.getInt(1));
			orderID = rs.getInt(1);
			for (Item temp : order.getItems()) {
				postItem.setInt(2, temp.getItemID());
				postItem.setInt(6, temp.getAmount());
				postItem.setInt(8, temp.getItemID());
				postItem.setString(3, temp.getName());

				for (Options opt : temp.getOptions()) {
					postItem.setString(4, opt.getOption_category());
					postItem.setString(9, opt.getOption_category());
					postItem.setString(5, opt.getSpecify_option());
					postItem.setString(10, opt.getSpecify_option());
					options = opt;
					postItem.execute();
					rs = postItem.getResultSet();
				}
			}
		} catch (SQLException e) {

			// item already exist, +1 to amount
			if (e.getErrorCode() == 1062) {
				try {
					PreparedStatement updateOrder = EchoServer.con.prepareStatement(
							"UPDATE biteme.item_in_menu_in_order " + "SET Amount = ? WHERE OrderNum = ?"
									+ "ItemID = ? OptionalType = ? OptionalSpecify = ?");
					updateOrder.setInt(1, rs.getInt(1) + 1);
					updateOrder.setInt(2, orderID);
					updateOrder.setInt(3, options.getItemID());
					updateOrder.setString(4, options.getOption_category());
					updateOrder.setString(4, options.getSpecify_option());
					updateOrder.execute();
				} catch (SQLException ex) {
					////////////////////////////////////////////////////////////////////////
					System.out.println(ex.toString());
				}
			}
		}
		if (order.getShippment() != null) {
			try {
				PreparedStatement setShipment = EchoServer.con.prepareStatement(
						"INSERT INTO biteme.shipment (workPlace, Address, receiver_name, receiver_phone_number"
								+ ", deliveryType) VALUES (?,?,?,?,?);");

				setShipment.setString(1, order.getShippment().getWork_place());
				setShipment.setString(2, order.getShippment().getAddress());
				setShipment.setString(3, order.getShippment().getReceiver_name());
				setShipment.setString(4, order.getShippment().getPhone());
				setShipment.setString(5, order.getShippment().getDelivery());
				setShipment.execute();

			} catch (SQLException ex) {
				if (ex.getErrorCode() == 1062) {
					try {
						PreparedStatement getShipID = EchoServer.con
								.prepareStatement("SELECT ShipmentID FROM biteme.shipment WHERE "
										+ "workPlace = ? AND Address = ? AND receiver_name = ? AND receiver_phone_number = ? "
										+ "AND deliveryType = ?;");
						getShipID.setString(1, order.getShippment().getWork_place());
						getShipID.setString(2, order.getShippment().getAddress());
						getShipID.setString(3, order.getShippment().getReceiver_name());
						getShipID.setString(4, order.getShippment().getPhone());
						getShipID.setString(5, order.getShippment().getDelivery());
						getShipID.execute();
						rs = getShipID.getResultSet();

						if (rs.next()) {
							shipmentID = rs.getInt(1);
			//TODO what that insert means, more fields are missing
							PreparedStatement setInShipment = EchoServer.con.prepareStatement(
									"INSERT INTO biteme.orders_in_shipment (ShipmentID, orderID, UserName, Price)"
											+ "VALUES (?,?,?,?);");
							setInShipment.setInt(1, rs.getInt(1));
							setInShipment.setInt(2, orderID);
							setInShipment.setString(3, order.getUserName());
							setInShipment.setFloat(4, 25);

							// calculate shipping price
							PreparedStatement getAmountOfOrdersInShipment = EchoServer.con
									.prepareStatement("SELECT orderID, UserID, COUNT(*) FROM biteme.orders_in_shipment"
											+ " WHERE ShipmentID = ? GROUP BY orderID, UserID;");

							getAmountOfOrdersInShipment.setInt(1, shipmentID);
							getAmountOfOrdersInShipment.execute();
							rs = getAmountOfOrdersInShipment.getResultSet();

							if (rs.next()) {
								if (rs.getInt(1) >= 3)
									price = 15;
								else if (rs.getInt(1) == 2)
									price = 20;
								else
									price = 25;

								PreparedStatement updatePriceOrderInShipment = EchoServer.con.prepareStatement(
										"UPDATE biteme.order_in_shipment " + "SET Price = ? WHERE ShipmentID = ?;");
								updatePriceOrderInShipment.setInt(1, price);
								updatePriceOrderInShipment.setInt(2, shipmentID);
								updatePriceOrderInShipment.execute();
							}
						}
					} catch (SQLException e) {
						// TODO: handle exception
					}
				}
			}
		}
	}
	/**
	 * Return all the orders
	 *
	 */
	public static void allOrders(int restaurantID, Response response) {
		PreparedStatement stmt;
		ArrayList<Order> orders = new ArrayList<>();
		Order order = null;
		try {
			stmt = EchoServer.con.prepareStatement("SELECT * FROM biteme.order WHERE RestaurantID = ?");
			stmt.setInt(1, restaurantID);
			ResultSet rs = stmt.executeQuery();
			while (rs.next()) {
				order = new Order(rs.getInt(QueryConsts.ORDER_ORDER_NUM), rs.getInt(QueryConsts.ORDER_RESTAURANT_ID),
						rs.getString(QueryConsts.ORDER_RESTAURANT_NAME), rs.getString(QueryConsts.ORDER_ORDER_TIME),
						rs.getFloat(QueryConsts.ORDER_CHECK_OUT_PRICE), rs.getString(QueryConsts.ORDER_REQUIRED_TIME),
						rs.getString(QueryConsts.ORDER_TYPE_OF_ORDER), rs.getString(QueryConsts.ORDER_USER_NAME),
						rs.getString(QueryConsts.ORDER_PHONE_NUM),
						rs.getInt(QueryConsts.ORDER_DISCOUNT_FOR_EARLY_ORDER), null, null,
						rs.getString(QueryConsts.ORDER_APPROVED_TIME), rs.getBoolean(QueryConsts.ORDER_HAS_ARRIVED),
						rs.getBoolean(QueryConsts.ORDER_IS_APPROVED));

				orders.add(order);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		response.setCode(200);
		response.setDescription("Success in fetching orders");
		response.setBody(orders.toArray());
	}

	/**
	 * Deletes an order
	 *
	 */
	public static void deleteOrder(Integer orderId, Response response) {
		try {
			PreparedStatement postOrder = EchoServer.con
					.prepareStatement("DELETE FROM biteme.order WHERE OrderID = ?;");
			postOrder.setInt(1, orderId);
			postOrder.execute();
		} catch (SQLException e) {
			response.setCode(404);
			response.setDescription("Order not found");
			return;
		}
		response.setCode(200);
		response.setDescription("Success in deleting order: " + orderId.toString());
	}

	/**
	 * Find order by ID
	 *
	 * Returns a single order
	 *
	 */
	public static void getOrderById(Integer orderId, Response response) {
		PreparedStatement stmt;
		Order order = null;
		try {
			stmt = EchoServer.con.prepareStatement("SELECT * FROM biteme.order WHERE OrderNum = ?");
			stmt.setInt(1, orderId);
			ResultSet rs = stmt.executeQuery();
			if (rs.next()) {
				order = new Order(rs.getInt(QueryConsts.ORDER_ORDER_NUM), rs.getInt(QueryConsts.ORDER_RESTAURANT_ID),
						rs.getString(QueryConsts.ORDER_RESTAURANT_NAME), rs.getString(QueryConsts.ORDER_ORDER_TIME),
						rs.getFloat(QueryConsts.ORDER_CHECK_OUT_PRICE), rs.getString(QueryConsts.ORDER_REQUIRED_TIME),
						rs.getString(QueryConsts.ORDER_TYPE_OF_ORDER), rs.getString(QueryConsts.ORDER_USER_NAME),
						rs.getString(QueryConsts.ORDER_PHONE_NUM),
						rs.getInt(QueryConsts.ORDER_DISCOUNT_FOR_EARLY_ORDER), null, null,
						rs.getString(QueryConsts.ORDER_APPROVED_TIME), rs.getBoolean(QueryConsts.ORDER_HAS_ARRIVED),
						rs.getBoolean(QueryConsts.ORDER_IS_APPROVED));
			}
		} catch (SQLException e) {
			response.setCode(404);
			response.setDescription("Order not found");
			response.setBody(null);
			return;
		}
		response.setCode(200);
		response.setDescription("Success in fetching order" + orderId);
		response.setBody(order);
	}

	/**
	 * Get payment approval for monthly budget
	 *
	 */
	public static void getPaymentApproval(Integer UserID, float amount, Response response) {
		PreparedStatement getAccount, getBusinessAccount, updateCurrentSpend;
		ResultSet rs;
		float monthBillingCelling, currentSpent;
		try {
			getAccount = EchoServer.con.prepareStatement("SELECT * FROM biteme.account WHERE UserID = ?");
			getAccount.setInt(1, UserID);
			getAccount.execute();
			rs = getAccount.getResultSet();
			if (rs.next()) {
				getBusinessAccount = EchoServer.con
						.prepareStatement("SELECT * FROM biteme.business_account WHERE UserID = ?");
				getBusinessAccount.setInt(1, UserID);
				getBusinessAccount.execute();
				rs.close();
				rs = getBusinessAccount.getResultSet();
				if (rs.next()) {
					monthBillingCelling = rs.getFloat(2);
					currentSpent = rs.getFloat(5);
					if (monthBillingCelling < currentSpent + amount) {
						throw new SQLException("Account" + UserID + "will exceed monthlry billing celling", "400", 400);
					} else {
						updateCurrentSpend = EchoServer.con.prepareStatement(
								"UPDATE biteme.business_account SET CurrentSpend = ? WHERE UserID = ?;");
						updateCurrentSpend.setFloat(1, currentSpent + amount);
						updateCurrentSpend.setInt(2, UserID);
						updateCurrentSpend.execute();
					}
				}

			} else {
				throw new SQLException("Account" + UserID + "is not found in table", "401", 401);
			}
		} catch (SQLException e) {
			response.setCode(e.getErrorCode());
			response.setDescription(e.getMessage());
			response.setBody(null);
		}
		response.setCode(200);
		response.setDescription("Payment approved");
		response.setBody(null);
	}

	/**
	 * Updates a order in the DB with form data
	 *
	 */
	//TODO Is there anything to update in order as client??
	public static void updateOrder(Order order, Response response) {
		ResultSet rs;
		int orderID = 0, shipmentID, price;
		Options options = null;
		try {
			PreparedStatement updateOrder = EchoServer.con.prepareStatement(
					"UPDATE biteme.order AS orders SET OrderNum = ?, RestaurantID = ?, RestaurantName = ?, PhoneNumber = ?, required_time = ?, approved_time=?, hasArraived=?"
							+ " WHERE OrderNum = ? AND UserName = ?;");
			updateOrder.setInt(1, order.getOrderID());
			updateOrder.setInt(2, order.getRestaurantID());
			updateOrder.setString(3, order.getRestaurantName());
			updateOrder.setString(4, order.getUserName());
			updateOrder.setString(5, order.getTime_taken());
			updateOrder.setString(6, order.getPhone());
			updateOrder.setString(7, order.getType_of_order());
			updateOrder.setInt(8, order.getDiscount_for_early_order());
			updateOrder.setDouble(9, order.getCheck_out_price());
			updateOrder.setBoolean(10, order.isApproved());
			updateOrder.setString(11, order.getRequired_time());
			updateOrder.setString(12, order.getApproved_time());
			updateOrder.setBoolean(13, order.getHasArrived());
			updateOrder.execute();
			rs = updateOrder.getResultSet();
			if (rs.rowUpdated() == false) {
				throw new SQLException("couldn't update the order -> orderID: " + Integer.toString(order.getOrderID()));
			}
		} catch (SQLException e) {
			response.setCode(405);
			response.setDescription("Invalid input");
			return;
		}
		response.setCode(200);
		response.setDescription("Success updating order -> orderID: " + Integer.toString(order.getOrderID()));
	}
	
	/**
	 * Get item for a specific orderID
	 *
	 */
	//TODO Is there anything to update in order as client??
	public static void getItemsByOrderID(int orderID, Response response) {
		ResultSet rs1, rs2;
		ArrayList<Item> items = new ArrayList<>();
		ArrayList<Options> options = new ArrayList<>();
		Item itemTemp;
		Options optionsTemp;
		try {
			PreparedStatement getItems = EchoServer.con.prepareStatement(
					"SELECT items.*, itemsOrder.amount FROM items biteme.items, itemsOrder biteme.item_int_menu_in_order "
					+ "WHERE items.ItemID = itemsOrder.ItemID AND itemsOrder.OrderNum = ?;");
			getItems.setInt(1, orderID);
			getItems.execute();
			rs1 = getItems.getResultSet();
			while (rs1.next()) {
				 itemTemp = new Item(rs1.getString(QueryConsts.ITEM_CATEGORY), rs1.getString(QueryConsts.ITEM_SUB_CATEGORY),
						rs1.getInt(QueryConsts.ITEM_ID),rs1.getInt(QueryConsts.ITEM_RES_ID),rs1.getString(QueryConsts.ITEM_NAME),
						rs1.getFloat(QueryConsts.ITEM_PRICE), rs1.getString(QueryConsts.ITEM_DESCRIPTION),
						rs1.getString(QueryConsts.ITEM_INGREDIENTS), null,
						rs1.getString(QueryConsts.ITEM_IMAGE), rs1.getInt(10));
				items.add(itemTemp);

				PreparedStatement getOptions = EchoServer.con
						.prepareStatement("SELECT * FROM biteme.optional_category WHERE itemID = ?");
				getOptions.setInt(1, itemTemp.getItemID());
				getOptions.execute();
				rs2 = getOptions.getResultSet();
				while (rs2.next()) {
					optionsTemp = new Options(rs2.getString(QueryConsts.OPTIONAL_TYPE),
							rs2.getString(QueryConsts.OPTIONAL_SPECIFY), rs2.getDouble(QueryConsts.OPTIONAL_PRICE),itemTemp.getItemID());

					options.add(optionsTemp);
				}
				itemTemp.setOptions((Options[]) options.toArray());
				options.clear();
				rs2.close();
			}
		} catch (SQLException e) {
			response.setCode(405);
			response.setDescription("Invalid input");
			return;
		}
		response.setCode(200);
		response.setDescription("Success fetchin items for order -> orderID: " + Integer.toString(orderID));
		response.setBody(items.toArray());
	}

	/**
	 * Updates a order as delivered
	 *
	 */
	public static void deliveredOrder(Order order, Response response) {
		PreparedStatement deliveredOrder;
		Duration timeElapsed;
		ResultSet rs;
		try {
			deliveredOrder = EchoServer.con.prepareStatement(
					"UPDATE biteme.order AS orders SET hasArrived = 1"
							+ " WHERE orders.OrderNum = ? AND orders.UserName = ?;");
			deliveredOrder.setInt(1, order.getOrderID());
			deliveredOrder.setString(2, order.getUserName());
			deliveredOrder.setInt(3, order.getOrderID());
			deliveredOrder.setString(4, order.getUserName());
			deliveredOrder.execute();
			rs = deliveredOrder.getResultSet();
			LocalTime t = LocalTime.parse(rs.getString(1));
			LocalTime now = LocalTime.now();
			timeElapsed = Duration.between(LocalTime.parse(order.getRequired_time()), LocalTime.parse(order.getTime_taken()));
			if (timeElapsed.toMinutes() < 120){
				;
				if (Duration.between(now, LocalTime.parse(order.getApproved_time())).toMinutes() > 60){
					updateCredit(order,response);
					return;
				}
			}
			else if (Duration.between(now, LocalTime.parse(order.getApproved_time())).toMinutes() > 20){
					updateCredit(order,response);
					return;
			}
		} catch (SQLException e) {
			response.setCode(405);
			response.setDescription("Couldn't approve order as delivered -> orderID: " + Integer.toString(order.getOrderID()));
			return;
		}
		response.setCode(200);
		response.setDescription("Success in approving order as delivered -> orderID: " + Integer.toString(order.getOrderID()));
	}

	private static void updateCredit(Order order, Response response){
		PreparedStatement insertCredit;
		try {
			insertCredit = EchoServer.con.prepareStatement(
					"INSERT INTO biteme.credit (UserName , AmountInCredit, RestaurantID) VALUES (?,?,?);");
			insertCredit.setString(1, order.getUserName());
			insertCredit.setDouble(2, (order.getCheck_out_price() * 0.5));
			insertCredit.setInt(3, order.getRestaurantID());
			insertCredit.execute();
		} catch (SQLException e) {
			response.setCode(405);
			response.setDescription("Couldn't insert credit to a late delivered order -> orderID: " + Integer.toString(order.getOrderID()));
			return;
		}
		response.setCode(200);
		response.setDescription("Success in inserting credit to a late delivered order -> orderID: " + Integer.toString(order.getOrderID()));
		return;
	}
}
