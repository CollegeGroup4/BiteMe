package Server;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.Duration;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.mail.Authenticator;
import javax.mail.Message;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

import com.google.gson.JsonElement;

import common.Response;
import logic.Account;
import logic.Item;
import logic.Options;
import logic.Order;
import logic.Shippment;

/**
 * BiteMe
 *
 * <p>
 * No description provided (generated by Swagger Codegen
 * https://github.com/swagger-api/swagger-codegen)
 *
 */
public class OrderApiService {
	
	/**
	 * Add a new order
	 *
	 */
	public static void addOrder(Order order, Response response) {
		ResultSet rs, rs1;
		int orderID = 0, shipmentID, price;
		Options options = null;
		boolean flag;

		// add to order table
		try {

			PreparedStatement postOrder = EchoServer.con.prepareStatement(
					"INSERT INTO biteme.order (RestaurantID, RestaurantName, UserName, OrderTime, PhoneNumber, TypeOfOrder, Discount_for_early_order,"
							+ "Check_out_price, isApproved, required_time, hasArrived)"
							+ " VALUES (?,?,?,?,?,?,?,?,?,?,?);",
					Statement.RETURN_GENERATED_KEYS);
			postOrder.setInt(1, order.getRestaurantID());
			postOrder.setString(2, order.getRestaurantName());
			postOrder.setString(3, order.getUserName());
			postOrder.setString(4, order.getTime_taken());
			postOrder.setString(5, order.getPhone());
			postOrder.setString(6, order.getType_of_order());
			postOrder.setInt(7, order.getDiscount_for_early_order());
			postOrder.setDouble(8, order.getCheck_out_price());
			postOrder.setBoolean(9, order.isApproved());
			postOrder.setString(10, order.getRequired_time());
			postOrder.setBoolean(11, order.getHasArrived());
			postOrder.executeUpdate();
			rs = postOrder.getGeneratedKeys();
			rs.next();
			orderID = rs.getInt(1);
			order.setOrderID(orderID);

		} catch (SQLException e) {
			response.setCode(405);
			response.setDescription("Invalid input");
			return;
		}

		try {
			// add to item_in_order_in_menu table
			PreparedStatement postItem = EchoServer.con.prepareStatement(
					"INSERT INTO biteme.item_in_menu_in_order (OrderNum, ItemID, OptionalType, OptionalSpecify,"
							+ "Amount) VALUES (?,?,?,?,?);");

			for (Item temp : order.getItems()) {
				if (temp.getOptions() != null)
					for (Options opt : temp.getOptions()) {
						postItem.setInt(1, orderID);
						postItem.setInt(2, temp.getItemID());
						postItem.setString(3, opt.getOption_category());
						postItem.setString(4, opt.getSpecify_option());
						postItem.setInt(5, temp.getAmount());
						options = opt;
						try {
							postItem.executeUpdate();
						} catch (SQLException e) {
							PreparedStatement getAmount = EchoServer.con.prepareStatement(
									"SELECT amount from biteme.item_in_menu_in_order WHRER OrderNum =? AND ItemID = ? AND OptionalType = ? AND OptionalSpecify = ?;");
							getAmount.setInt(1, orderID);
							getAmount.setInt(2, temp.getItemID());
							getAmount.setString(3, options.getOption_category());
							getAmount.setString(4, options.getSpecify_option());
							rs = getAmount.executeQuery();

							PreparedStatement updateOrder = EchoServer.con.prepareStatement(
									"UPDATE biteme.item_in_menu_in_order SET Amount = ? WHERE OrderNum = ?"
											+ "AND ItemID = ? AND OptionalType = ? AND OptionalSpecify = ?;");

							updateOrder.setInt(1, rs.getInt(1) + temp.getAmount());
							updateOrder.setInt(2, orderID);
							updateOrder.setInt(3, options.getItemID());
							updateOrder.setString(4, options.getOption_category());
							updateOrder.setString(4, options.getSpecify_option());
							updateOrder.executeUpdate();
						}
					}
			}
		} catch (SQLException e) {
			response.setBody(null);
			response.setCode(400);
			response.setDescription("Could not add item's to the order");
			deleteItemsFromOrder(orderID);
			deleteOrder(orderID);
			return;
		}
		// check if the order have shipment
		if (order.getShippment() != null && order.getShippment().getDelivery().equals("Shared delivery")) {
			try {
				PreparedStatement getShipID = EchoServer.con
						.prepareStatement("SELECT ShipmentID FROM biteme.shipment WHERE "
								+ "workPlace = ? AND Address = ? AND receiver_name = ? AND receiver_phone_number = ? "
								+ "AND deliveryType = ?;");
				getShipID.setString(1, order.getShippment().getWork_place());
				getShipID.setString(2, order.getShippment().getAddress());
				getShipID.setString(3, order.getShippment().getReceiver_name());
				getShipID.setString(4, order.getShippment().getPhone());
				getShipID.setString(5, order.getShippment().getDelivery());
				try {
					rs = getShipID.executeQuery();
					// if we found shipments to the same place, we check if we can add
					// shipment to the same location
					flag = false;
					while (rs.next() && !flag) {
						shipmentID = rs.getInt(1);

						// check if the shipment isn't close
						PreparedStatement getOrdersFromShipment = EchoServer.con.prepareStatement(
								"SELECT ois.OrderNum FROM biteme.orders_in_shipment AS ois, biteme.order AS o WHERE ois.ShipmentID = ?"
										+ " AND ois.OrderNum = o.OrderNum AND o.prep_time is null;");

						getOrdersFromShipment.setInt(1, shipmentID);
						rs1 = getOrdersFromShipment.executeQuery();
						if (rs1.next()) {
							flag = true;
							addOrderInShipment(shipmentID, order.getOrderID(), order.getUserName());
							PreparedStatement getCount = EchoServer.con.prepareStatement(
									"SELECT COUNT(*) FROM biteme.orders_in_shipment WHERE ShipmentID = ?");
							getCount.setInt(1, shipmentID);
							rs.close();
							rs = getCount.executeQuery();
							rs.next();
							if (rs.getInt(1) >= 3)
								price = 15;
							else if (rs.getInt(1) == 2)
								price = 20;
							else
								price = 25;
							PreparedStatement updatePriceOrderInShipment = EchoServer.con.prepareStatement(
									"UPDATE biteme.orders_in_shipment " + "SET Price = ? WHERE ShipmentID = ?;");
							updatePriceOrderInShipment.setInt(1, price);
							updatePriceOrderInShipment.setInt(2, shipmentID);
							updatePriceOrderInShipment.executeUpdate();
							PreparedStatement getMails = EchoServer.con.prepareStatement(
									"SELECT a.FirstName, a.Email FROM biteme.orders_in_shipment AS ois, biteme.account AS a"
											+ " WHERE ois.ShipmentID = ? AND ois.UserName = a.UserName;");
							getMails.setInt(1, shipmentID);
							rs.close();
							rs = getMails.executeQuery();
							while(rs.next()) {
								try {
//									sendMail(rs.getString(2), "BiteMe Order ID Shipment Update: " + Integer.toString(orderID), ""
//											+ "    		<div style=\"align:center;line-height:24px\">\r\n"
//											+ "                <span style=\"font-size:35px;line-height:40px\"><img src=\"https://i.ibb.co/z7sTJhT/BiteMe.png\" style=\"background-color:orange\"></span><br>\r\n"
//											+ "                <span style=\"font-size:35px;line-height:40px\"><strongShipment Price Update<br><br><br></strong></span><br>\r\n"
//											+ "\r\n"
//											+ "        <div class=\"m_1113311250331273147receipt-body\">\r\n"
//											+ "            <div style=\"text-align:center;line-height:14px\">&nbsp;</div>\r\n"
//											+ "            <div style=\"text-align:center;line-height:24px\">\r\n"
//											+ "                <span style=\"font-size:18px;font-weight:bold\">\r\n"
//											+ "                    Hi "+rs.getString(1)+"!\r\n"
//											+ "                </span>\r\n"
//											+ "                <br>\r\n"
//											+ "                <span style=\"font-size:16px;\">\r\n"
//											+ "                   You shipment price has been update to "+price+" due to increase of orders via Shared Shipment at "+order.getShippment().getWork_place()+"\r\n"
//											+ "                </span>\r\n<br><br>\r\n"
//											+ "            </div>\r\n");
								} catch (Exception e) {
									e.printStackTrace();
								}
							}

						}
					}
					if (!flag) {
						insertShipment(order, orderID);
					}
				} catch (SQLException e) { // if we didn't find shipment to the same place, make new shipment
					insertShipment(order, orderID);
				}

			} catch (SQLException ex) {
				response.setBody(null);
				response.setCode(400);
				response.setDescription("Could not add shipment to the order");
				deleteItemsFromOrder(orderID);
				deleteOrder(orderID);
				return;
			}
		}
		response.setCode(200);
		response.setDescription("A new order has been successfuly added -> orderID: " + Integer.toString(orderID));
		JsonElement body = EchoServer.gson.toJsonTree(new Object());
		body.getAsJsonObject().addProperty("orderID", orderID);
		response.setBody(EchoServer.gson.toJson(body));
//		invoiceSender(order, orderID);
	}

	private static void insertShipment(Order order, int orderID) throws SQLException {
		PreparedStatement setShipment = EchoServer.con.prepareStatement(
				"INSERT INTO biteme.shipment (workPlace, Address, receiver_name, receiver_phone_number"
						+ ", deliveryType) VALUES (?,?,?,?,?);",
				Statement.RETURN_GENERATED_KEYS);

		setShipment.setString(1, order.getShippment().getWork_place());
		setShipment.setString(2, order.getShippment().getAddress());
		setShipment.setString(3, order.getShippment().getReceiver_name());
		setShipment.setString(4, order.getShippment().getPhone());
		setShipment.setString(5, order.getShippment().getDelivery());
		setShipment.executeUpdate();
		ResultSet rs = setShipment.getGeneratedKeys();
		rs.next();
		addOrderInShipment(rs.getInt(1), order.getOrderID(), order.getUserName());
	}

	private static void addOrderInShipment(int Shipmentid, int orderid, String username) {
		PreparedStatement setInShipment;
		try {
			setInShipment = EchoServer.con
					.prepareStatement("INSERT INTO biteme.orders_in_shipment (ShipmentID, orderNum, UserName, Price)"
							+ "VALUES (?,?,?,?);");

			setInShipment.setInt(1, Shipmentid);
			setInShipment.setInt(2, orderid);
			setInShipment.setString(3, username);
			setInShipment.setFloat(4, 25);
			setInShipment.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	private static void deleteOrder(int orderID) {
		try {
			PreparedStatement deleteOrder = EchoServer.con
					.prepareStatement("DELETE FROM biteme.order WHERE OrderNum = ?;");
			deleteOrder.setInt(1, orderID);
			deleteOrder.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	private static void deleteItemsFromOrder(int orderID) {
		try {
			PreparedStatement deleteIIMIO = EchoServer.con
					.prepareStatement("DELETE FROM biteme.item_in_menu_in_order WHERE OrderNum = ?;");
			deleteIIMIO.setInt(1, orderID);
			deleteIIMIO.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	/**
	 * Return all the orders
	 *
	 */
	public static void allOrders(String condition, Response response) {
		PreparedStatement stmt;
		ArrayList<Order> orders = new ArrayList<>();
		try {
			stmt = EchoServer.con.prepareStatement("SELECT OrderNum FROM biteme.order WHERE " + condition + ";");
			ResultSet rs = stmt.executeQuery();
			while (rs.next()) {
				getOrderById(rs.getInt(1), response);
				orders.add(EchoServer.gson.fromJson((String) response.getBody(), Order.class));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		response.setCode(200);
		response.setDescription("Success in fetching orders");
		response.setBody(EchoServer.gson.toJson(orders.toArray()));
	}

	public static void AllOrdersByRestaurantID(int restaurantID, Response response) {
		allOrders("RestaurantID = " + "'" + restaurantID + "'", response);
	}

	public static void AllOrdersByUserName(String UserName, Response response) {
		allOrders("UserName = "  + "'" + UserName+ "'", response);
	}

	/**
	 * Deletes an order
	 *
	 */
	public static void deleteOrder(Integer orderId, Response response) {
		try {
			PreparedStatement postOrder = EchoServer.con
					.prepareStatement("DELETE FROM biteme.order WHERE OrderID = ?;");
			postOrder.setInt(1, orderId);
			postOrder.execute();
		} catch (SQLException e) {
			response.setCode(404);
			response.setDescription("Order not found");
			return;
		}
		response.setCode(200);
		response.setDescription("Success in deleting order: " + orderId.toString());
	}

	/**
	 * Find order by ID
	 *
	 * Returns a single order
	 *
	 */
	public static void getOrderById(Integer orderId, Response response) {
		PreparedStatement stmt;
		Order order = null;
		try {
			stmt = EchoServer.con.prepareStatement("SELECT * FROM biteme.order WHERE OrderNum = ?");
			stmt.setInt(1, orderId);
			ResultSet rs = stmt.executeQuery();
			if (rs.next()) {
				order = new Order(rs.getInt(QueryConsts.ORDER_ORDER_NUM), rs.getInt(QueryConsts.ORDER_RESTAURANT_ID),
						rs.getString(QueryConsts.ORDER_RESTAURANT_NAME), rs.getString(QueryConsts.ORDER_ORDER_TIME),
						rs.getFloat(QueryConsts.ORDER_CHECK_OUT_PRICE), rs.getString(QueryConsts.ORDER_REQUIRED_TIME),
						rs.getString(QueryConsts.ORDER_TYPE_OF_ORDER), rs.getString(QueryConsts.ORDER_USER_NAME),
						rs.getString(QueryConsts.ORDER_PHONE_NUM),
						rs.getInt(QueryConsts.ORDER_DISCOUNT_FOR_EARLY_ORDER), null, null,
						rs.getString(QueryConsts.ORDER_APPROVED_TIME), rs.getBoolean(QueryConsts.ORDER_HAS_ARRIVED),
						rs.getBoolean(QueryConsts.ORDER_IS_APPROVED));
			}
			getItemsByOrderID(orderId, response);
			order.setItems(EchoServer.gson.fromJson((String) response.getBody(), Item[].class));
			getShipmentByOrderID(orderId, response);
			try {
				order.setShippment(EchoServer.gson.fromJson((String) response.getBody(), Shippment.class));
			} catch (NullPointerException e) {
			}
		} catch (SQLException e) {
			response.setCode(404);
			response.setDescription("Order not found");
			response.setBody(null);
			return;
		}
		response.setCode(200);
		response.setDescription("Success in fetching order" + orderId);
		response.setBody(EchoServer.gson.toJson(order));
	}

	/**
	 * Get payment approval for monthly budget
	 *
	 */
	public static void getPaymentApproval(String userName, float amount, String w4c, String businessName,
			Response response) {
		JsonElement body = EchoServer.gson.toJsonTree(new Object());
		PreparedStatement getAccount, getBusinessAccount, updateCurrentSpend;
		ResultSet rs;
		float remainingPayment = 0;
		float monthBillingCelling, currentSpent;
		try {
			getAccount = EchoServer.con
					.prepareStatement("SELECT isApproved FROM biteme.employer WHERE businessName = ?");
			getAccount.setString(1, businessName);
			rs = getAccount.executeQuery();
			if (rs.next()) {
				// check if the business approved
				if (!rs.getBoolean(1))
					throw new SQLException("Buisiness " + businessName + "isn't approved", "401", 401);
				getBusinessAccount = EchoServer.con
						.prepareStatement("SELECT * FROM biteme.business_account WHERE UserName = ?");
				getBusinessAccount.setString(1, userName);
				rs = getBusinessAccount.executeQuery();
				if (rs.next()) {
					monthBillingCelling = rs.getFloat(QueryConsts.BUSINESS_ACCOUNT_MONTHLY_BILLING_CEILING);
					currentSpent = rs.getFloat(QueryConsts.BUSINESS_ACCOUNT_CURRENT_SPENT);
					remainingPayment = amount - (monthBillingCelling - currentSpent);
					updateCurrentSpend = EchoServer.con.prepareStatement(
							"UPDATE biteme.business_account SET CurrentSpend = ? WHERE UserName = ?;");
					if (monthBillingCelling < currentSpent + amount) {
						updateCurrentSpend.setFloat(1, monthBillingCelling);
					} else {
						updateCurrentSpend.setFloat(1, currentSpent + amount);

					}
					updateCurrentSpend.setString(2, userName);
					updateCurrentSpend.executeQuery();
				}
			} else {
				throw new SQLException("Buisiness " + businessName + " doesn't exist", "401", 401);
			}
		} catch (SQLException e) {
			response.setCode(e.getErrorCode());
			response.setDescription(e.getMessage());
		}
		response.setCode(200);
		response.setDescription("Business payment approved -> businessName: " + businessName);
		body.getAsJsonObject().addProperty("remainToPay", remainingPayment);
		response.setBody(EchoServer.gson.toJson(body));
	}

	/**
	 * Updates a order in the DB with form data
	 *
	 */
	// TODO Is there anything to update in order as client??
	public static void getOrderByUserName(String userName, Response response) {
		ResultSet rs;
		int orderID;
		ArrayList<Order> orders = new ArrayList<>();
		try {
			PreparedStatement orderByUserName = EchoServer.con
					.prepareStatement("SELECT OrderNum FROM biteme.order WHERE UserName = ?;");
			orderByUserName.setString(1, userName);
			rs = orderByUserName.executeQuery();
			while (rs.next()) {
				orderID = rs.getInt(1);
				getOrderById(orderID, response);
				orders.add(EchoServer.gson.fromJson((String) response.getBody(), Order.class));
			}
		} catch (SQLException e) {
			response.setCode(405);
			response.setDescription("Invalid input");
			return;
		}
		response.setCode(200);
		response.setDescription("Success fetching all orders -> userName: " + userName);
		response.setBody(EchoServer.gson.toJson(orders.toArray()));
	}

	/**
	 * Updates a order in the DB with form data
	 *
	 */
	// TODO Is there anything to update in order as client??
	public static void updateOrder(Order order, Response response) {
		ResultSet rs;
		int orderID = 0, shipmentID, price;
		Options options = null;
		try {
			PreparedStatement updateOrder = EchoServer.con.prepareStatement(
					"UPDATE biteme.order AS orders SET OrderNum = ?, RestaurantID = ?, RestaurantName = ?, PhoneNumber = ?, required_time = ?, approved_time=?, hasArraived=?"
							+ " WHERE OrderNum = ? AND UserName = ?;");
			updateOrder.setInt(1, order.getOrderID());
			updateOrder.setInt(2, order.getRestaurantID());
			updateOrder.setString(3, order.getRestaurantName());
			updateOrder.setString(4, order.getUserName());
			updateOrder.setString(5, order.getTime_taken());
			updateOrder.setString(6, order.getPhone());
			updateOrder.setString(7, order.getType_of_order());
			updateOrder.setInt(8, order.getDiscount_for_early_order());
			updateOrder.setDouble(9, order.getCheck_out_price());
			updateOrder.setBoolean(10, order.isApproved());
			updateOrder.setString(11, order.getRequired_time());
			updateOrder.setString(12, order.getApproved_time());
			updateOrder.setBoolean(13, order.getHasArrived());
			updateOrder.execute();
			rs = updateOrder.getResultSet();
			if (rs.rowUpdated() == false) {
				throw new SQLException("couldn't update the order -> orderID: " + Integer.toString(order.getOrderID()));
			}
		} catch (SQLException e) {
			response.setCode(405);
			response.setDescription("Invalid input");
			return;
		}
		response.setCode(200);
		response.setDescription("Success updating order -> orderID: " + Integer.toString(order.getOrderID()));
	}

	/**
	 * Get shipment for a specific orderID
	 *
	 */
	// TODO Is there anything to update in order as client??
	public static void getShipmentByOrderID(int orderID, Response response) {
		ResultSet rs;
		Shippment shi = null;
		try {
			PreparedStatement getItems = EchoServer.con
					.prepareStatement("SELECT * FROM biteme.shipment WHERE OrderNum = ?;");
			getItems.setInt(1, orderID);
			rs = getItems.executeQuery();
			if (rs.next()) {
				shi = new Shippment(rs.getInt(QueryConsts.SHIPMENT_ID), rs.getString(QueryConsts.SHIPMENT_WORK_PLACE),
						rs.getString(QueryConsts.SHIPMENT_ADDRESS), rs.getString(QueryConsts.SHIPMENT_RECIEVER_NAME),
						rs.getString(QueryConsts.SHIPMENT_RECIEVER_DELIVERY_TYPE),
						rs.getString(QueryConsts.SHIPMENT_RECIEVER_PHONE_NUMBER));
			}
		} catch (SQLException e) {
			response.setCode(404);
			response.setDescription("Couldn't fetch a shipment information -> orderID: " + Integer.toString(orderID));
			return;
		}
		response.setCode(200);
		response.setDescription("Success in fetching a shipment information -> orderID: " + Integer.toString(orderID));
		response.setBody(EchoServer.gson.toJson(shi));
	}

	/**
	 * Get item for a specific orderID
	 *
	 */
	// TODO Is there anything to update in order as client??
	public static void getItemsByOrderID(int orderID, Response response) {
		ResultSet rs1, rs2;
		ArrayList<Item> items = new ArrayList<>();
		ArrayList<Options> options = new ArrayList<>();
		Item itemTemp;
		Options optionsTemp;
		try {
			PreparedStatement getItems = EchoServer.con.prepareStatement(
					"SELECT item.ItemID,item.Category,item.SubCategory,item.Name,item.Price,item.Ingredients,item.RestaurantID,"
							+ "item.Image,item.Description, iimio.Amount FROM biteme.item AS item INNER JOIN "
							+ "biteme.item_in_menu_in_order AS iimio ON item.ItemID = iimio.ItemID AND iimio.OrderNum = ?;");

			getItems.setInt(1, orderID);
			rs1 = getItems.executeQuery();
			while (rs1.next()) {
				itemTemp = new Item(rs1.getString(QueryConsts.ITEM_CATEGORY),
						rs1.getString(QueryConsts.ITEM_SUB_CATEGORY), rs1.getInt(QueryConsts.ITEM_ID),
						rs1.getInt(QueryConsts.ITEM_RES_ID), rs1.getString(QueryConsts.ITEM_NAME),
						rs1.getFloat(QueryConsts.ITEM_PRICE), rs1.getString(QueryConsts.ITEM_DESCRIPTION),
						rs1.getString(QueryConsts.ITEM_INGREDIENTS), null, rs1.getString(QueryConsts.ITEM_IMAGE),
						rs1.getInt(10));
				items.add(itemTemp);
				PreparedStatement getOptions = EchoServer.con.prepareStatement(
						"SELECT iimio.OptionalType,iimio.OptionalSpecify, oc.price FROM biteme.item_in_menu_in_order AS iimio INNER JOIN "
								+ "biteme.optional_category AS oc ON oc.ItemID = iimio.ItemID AND iimio.OptionalType = oc.OptionalType AND iimio.OptionalSpecify = oc.Specify AND iimio.OrderNum = ?"
								+ " AND iimio.ItemID = ?;");
				getOptions.setInt(1, orderID);
				getOptions.setInt(2, itemTemp.getItemID());
				rs2 = getOptions.executeQuery();
				while (rs2.next()) {
					optionsTemp = new Options(rs2.getString(1), rs2.getString(2), rs2.getDouble(3),
							itemTemp.getItemID(), false);
					options.add(optionsTemp);
				}
				itemTemp.setOptions(options.toArray(new Options[0]));
				options.clear();
				rs2.close();
			}
		} catch (SQLException e) {
			response.setCode(405);
			response.setDescription("Invalid input");
			return;
		}
		response.setCode(200);
		response.setDescription("Success fetchin items for order -> orderID: " + Integer.toString(orderID));
		response.setBody(EchoServer.gson.toJson(items.toArray()));
	}

	/**
	 * Updates a order as delivered
	 *
	 */
	public static void deliveredOrder(Order order, Response response) {
		PreparedStatement deliveredOrder;
		Duration timeElapsed;
		ResultSet rs;
		long timeBetweenTakenToReq, timeBetweenNowAndApproved;
		try {
			deliveredOrder = EchoServer.con.prepareStatement(
					"UPDATE biteme.order SET hasArrived = 1" + " WHERE OrderNum = ? AND UserName = ?;");
			deliveredOrder.setInt(1, order.getOrderID());
			deliveredOrder.setString(2, order.getUserName());
			// deliveredOrder.setInt(3, order.getOrderID());
			// deliveredOrder.setString(4, order.getUserName());
			deliveredOrder.executeUpdate();

			DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
			LocalDateTime now = LocalDateTime.now();

			PreparedStatement insertToDelivery = EchoServer.con.prepareStatement(
					"INSERT INTO biteme.delivery (OrderNum, RestaurantID, Date, isLate) VALUES(?,?,?,?);");
			insertToDelivery.setInt(1, order.getOrderID());
			insertToDelivery.setInt(2, order.getRestaurantID());
			insertToDelivery.setString(3, now.format(formatter));

			timeBetweenTakenToReq = LocalDateTime.parse(order.getTime_taken(), formatter)
					.until(LocalDateTime.parse(order.getRequired_time(), formatter), ChronoUnit.MINUTES);
			timeBetweenNowAndApproved = LocalDateTime.parse(order.getApproved_time(), formatter)
					.until(LocalDateTime.parse(now.format(formatter), formatter), ChronoUnit.MINUTES);

			if (timeBetweenTakenToReq < 120) {

				if (timeBetweenNowAndApproved > 60) {
					insertCredit(order, response);
					insertToDelivery.setBoolean(4, true);
					insertToDelivery.executeUpdate();
					return;
				}

			} else if (timeBetweenNowAndApproved > 20) {
				insertCredit(order, response);
				insertToDelivery.setBoolean(4, true);
				insertToDelivery.executeUpdate();
				return;
			}

			insertToDelivery.setBoolean(4, false);
			insertToDelivery.execute();
		} catch (SQLException e) {
			response.setCode(405);
			response.setDescription(
					"Couldn't approve order as delivered -> orderID: " + Integer.toString(order.getOrderID()));
			return;
		}
		response.setCode(200);
		response.setDescription(
				"Success in approving order as delivered -> orderID: " + Integer.toString(order.getOrderID()));
	}

	private static void insertCredit(Order order, Response response) {
		PreparedStatement insertCredit;
		try {
			insertCredit = EchoServer.con.prepareStatement(
					"INSERT INTO biteme.credit (UserName , AmountInCredit, RestaurantID) VALUES (?,?,?);");
			insertCredit.setString(1, order.getUserName());
			insertCredit.setDouble(2, (order.getCheck_out_price() * 0.5));
			insertCredit.setInt(3, order.getRestaurantID());
			insertCredit.executeUpdate();

		} catch (SQLException e) {
			response.setCode(405);
			response.setDescription("Couldn't insert credit to a late delivered order -> orderID: "
					+ Integer.toString(order.getOrderID()));
			return;
		}
		response.setCode(200);
		response.setDescription("Success in inserting credit to a late delivered order -> orderID: "
				+ Integer.toString(order.getOrderID()));
		return;
	}

	public static void updateCredit(Float AmountInCredit, int restaurantID, String UserName, Response response) {
		PreparedStatement updateCredit;
		try {
			if (AmountInCredit <= 0.1) {
				updateCredit = EchoServer.con
						.prepareStatement("DELETE FROM biteme.credit WHERE UserName = ? AND RestaurantID = ?;");
				updateCredit.setString(1, UserName);
				updateCredit.setInt(2, restaurantID);
				updateCredit.executeUpdate();
			} else {
				updateCredit = EchoServer.con.prepareStatement(
						"UPDATE biteme.credit SET AmountInCredit = ? WHERE UserName = ? AND RestaurantID = ?;");
				updateCredit.setDouble(1, AmountInCredit);
				updateCredit.setString(2, UserName);
				updateCredit.setInt(3, restaurantID);
				updateCredit.executeUpdate();
			}
		} catch (SQLException e) {
			response.setCode(400);
			response.setDescription("Couldn't update credit for: " + UserName);
			return;
		}
		response.setCode(200);
		response.setDescription("Success in updating credit for: " + UserName);
		return;
	}

	private static void invoiceSender(Order order, int orderID) {
		PreparedStatement getAccount;
		ResultSet rs;
		StringBuilder invoice = new StringBuilder();
		Account account = null;
		try {
			getAccount = EchoServer.con.prepareStatement("SELECT * FROM biteme.account WHERE UserName = ?;");
			getAccount.setString(1, order.getUserName());
			rs = getAccount.executeQuery();
			if (rs.next()) {
				account = new Account(rs.getInt(QueryConsts.ACCOUNT_USER_ID),
						rs.getString(QueryConsts.ACCOUNT_USER_NAME), rs.getString(QueryConsts.ACCOUNT_PASSWORD),
						rs.getString(QueryConsts.ACCOUNT_FIRST_NAME), rs.getString(QueryConsts.ACCOUNT_LAST_NAME),
						rs.getString(QueryConsts.ACCOUNT_EMAIL), rs.getString(QueryConsts.ACCOUNT_ROLE),
						rs.getString(QueryConsts.ACCOUNT_PHONE), rs.getString(QueryConsts.ACCOUNT_STATUS),
						rs.getBoolean(QueryConsts.ACCOUNT_IS_BUSINESS),
						rs.getInt(QueryConsts.ACCOUNT_BRANCH_MANAGER_ID), rs.getString(QueryConsts.ACCOUNT_AREA),
						rs.getInt(QueryConsts.ACCOUNT_DEBT));
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}

		String test = fixParser(account.getFirstName(), account.getLastName(),account.getEmail(),account.getRole(),
				account.getPhone(),order.getTime_taken(),Integer.toString(orderID),Double.toString(order.getCheck_out_price()),null);
		for (Item item : order.getItems()) {
			addItem(item.getName());
			addItem(item.getCategory());
			addItem(order.getRestaurantName());
			addItem(item.getOptions()[0].getOption_category() + ": "+item.getOptions()[0].getSpecify_option());
			addItem(Integer.toString(item.getAmount()));
			String options = "";
			for (int i = 1; i < item.getOptions().length; i++) {
				addOption(item.getOptions()[i].getOption_category() + ": "+item.getOptions()[i].getSpecify_option());
			}
		}
		
		try {
			sendMail(account.getEmail(), "BiteMe Order ID: " + Integer.toString(orderID), test);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	private static void addItem(String itemColVal) {
		QueryConsts.itemCol = itemColVal;
		QueryConsts.items += QueryConsts.item;
	}
	
	private static void addOption(String optionColVal) {
		QueryConsts.option = optionColVal;
		QueryConsts.items += QueryConsts.option;
	}

	public static void sendMail(String recepient, String subject, String message) throws Exception {
		Properties properties = new Properties();
		properties.put("mail.smtp.auth", "true");
		properties.put("mail.smtp.starttls.enable", "true");
		properties.put("mail.smtp.host", "smtp.gmail.com");
		properties.put("mail.smtp.port", "587");

		final String myAccountEmail = System.getenv("MyEmail");
		final String password = System.getenv("MyPassEmail");

		Session session = Session.getInstance(properties, new Authenticator() {
			@Override
			protected PasswordAuthentication getPasswordAuthentication() {
				return new PasswordAuthentication(myAccountEmail, password);
			}
		});
		Message msg = prepareMessage(session, myAccountEmail, recepient, subject, message);
		javax.mail.Transport.send(msg);
		System.out.println("Invoice was Sent successfully to " + recepient);
	}

	private static Message prepareMessage(Session session, String myEmail, String recepient, String subject,
			String message) {
		try {
			Message msg = new MimeMessage(session);
			msg.setFrom(new InternetAddress("BITEME_SERVER"));
			msg.setRecipient(Message.RecipientType.TO, new InternetAddress(recepient));
			msg.setSubject(subject);
			msg.setText(message);
            msg.setContent(message,"text/html");
			return msg;
		} catch (Exception e) {
			Logger.getLogger(OrderApiService.class.getName()).log(Level.SEVERE, null, e);
		}
		return null;
	}
	
	private static String fixParser(String firstName, String lastName,String email,String role,
			String  phone,String orderDate,String orderID,String checkOutPrice,String items) {
		String INVOICE_HEADER= "<div>\r\n"
				+ "<div class=\"m_1113311250331273147receipt-ctn-wrapper\">\r\n"
				+ "    <div style=\"text-align:center;line-height:24px\">\r\n"
				+ "    		<div style=\"align:center;line-height:24px\">\r\n"
				+ "                <span style=\"font-size:35px;line-height:40px\"><img src=\"https://i.ibb.co/z7sTJhT/BiteMe.png\" style=\"background-color:orange\"></span><br>\r\n"
				+ "                <span style=\"font-size:35px;line-height:40px\"><strong>Thank You.<br><br><br></strong></span><br>\r\n"
				+ "\r\n"
				+ "        <div class=\"m_1113311250331273147receipt-body\">\r\n"
				+ "            <div style=\"text-align:center;line-height:14px\">&nbsp;</div>\r\n"
				+ "            <div style=\"text-align:center;line-height:24px\">\r\n"
				+ "                <span style=\"font-size:18px;font-weight:bold\">\r\n"
				+ "                    Hi "+firstName+"!\r\n"
				+ "                </span>\r\n"
				+ "                <br>\r\n"
				+ "                Thanks for your purchase from <strong>BiteMe</strong><br><br>\r\n"
				+ "                <span style=\"font-size:35px;line-height:40px\"><strong>INVOICE ID: <br>"+orderID+"</strong></span><br>\r\n"
				+ "\r\n"
				+ "                <span style=\"font-size:14px;color:#b2b2b2;line-height:40px\">( Please keep a copy of this receipt for your records. )</span><br><br><br>\r\n"
				+ "            </div>\r\n"
				+ "            <div style=\"font-family:arial,helvetica,sans-serif;font-size:14px;color:#b2b2b2;text-align:left\">\r\n"
				+ "                <strong>YOUR ORDER INFORMATION:</strong>\r\n"
				+ "            </div>\r\n"
				+ "            <table class=\"m_1113311250331273147order-info\">\r\n"
				+ "                <tbody><tr>\r\n"
				+ "                    <th style=\"height:1px;min-width:12px\"></th>\r\n"
				+ "                    <th style=\"height:1px;min-width:12px\"></th>\r\n"
				+ "                </tr>\r\n"
				+ "                <tr>\r\n"
				+ "                    <td class=\"m_1113311250331273147wrapword\" style=\"vertical-align:top;min-width:120px\"><strong>First Name:</strong></td>\r\n"
				+ "                    <td class=\"m_1113311250331273147wrapword\" style=\"vertical-align:top;min-width:120px\"><strong>Last Name:</strong></td>\r\n"
				+ "                    <td class=\"m_1113311250331273147wrapword\" style=\"vertical-align:top\"><strong>Bill To:</strong></td>\r\n"
				+ "                </tr>\r\n"
				+ "                <tr>\r\n"
				+ "                    <td class=\"m_1113311250331273147wrapword m_1113311250331273147order-info-value\">"+firstName+"</td>\r\n"
				+ "                    <td class=\"m_1113311250331273147wrapword m_1113311250331273147order-info-value\">"+lastName+"</td>\r\n"
				+ "                    <td class=\"m_1113311250331273147wrapword m_1113311250331273147order-info-value m_1113311250331273147email\"><a href=\"mailto:fghghf98@gmail.com\" target=\"_blank\">"+email+"</a></td>\r\n"
				+ "                </tr>\r\n"
				+ "                <tr>\r\n"
				+ "                    <td class=\"m_1113311250331273147wrapword\" style=\"vertical-align:top;min-width:120px\"><strong>Role:</strong></td>\r\n"
				+ "                    <td class=\"m_1113311250331273147wrapword\" style=\"vertical-align:top;min-width:120px\"><strong>Phone:</strong></td>\r\n"
				+ "                    <td class=\"m_1113311250331273147wrapword\" style=\"vertical-align:top\"><strong>Order Date:</strong></td>\r\n"
				+ "                </tr>\r\n"
				+ "                <tr>\r\n"
				+ "                    <td class=\"m_1113311250331273147wrapword m_1113311250331273147order-info-value\">"+role+"</td>\r\n"
				+ "                    <td class=\"m_1113311250331273147wrapword m_1113311250331273147order-info-value\">"+phone+"</td>\r\n"
				+ "                    <td class=\"m_1113311250331273147wrapword m_1113311250331273147order-info-value\">"+orderDate+"</td>\r\n"
				+ "                </tr>\r\n"
				+ "            </tbody></table>\r\n"
				+ "\r\n"
				+ "\r\n"
				+ "            <div style=\"font-family:arial,helvetica,sans-serif;font-size:14px;color:#b2b2b2;text-align:left;margin-top:10px\">\r\n"
				+ "                <strong>HERE'S WHAT YOU ORDERED:</strong>\r\n"
				+ "            </div>\r\n"
				+ "            <table class=\"m_1113311250331273147order-item\">\r\n"
				+ "                    <th style=\"height:1px;min-width:12px\"></th>\r\n"
				+ "                    <th style=\"height:1px;min-width:12px\"></th>\r\n"
				+ "                <tbody><tr>\r\n"
				+ "                    <td class=\"m_1113311250331273147wrapword\" style=\"vertical-align:top;min-width:120px\"><strong>Item Name:</strong></td>\r\n"
				+ "                    <td class=\"m_1113311250331273147wrapword\" style=\"vertical-align:top;min-width:120px\"><strong>Item Category:</strong></td>\r\n"
				+ "                    <td class=\"m_1113311250331273147wrapword\" style=\"vertical-align:top;min-width:120px\"><strong>Restaurant Name:</strong></td>\r\n"
				+ "                    <td class=\"m_1113311250331273147wrapword\" style=\"vertical-align:top;min-width:120px\"><strong>Quantity:</strong></td>\r\n"
				+ "                    <td class=\"m_1113311250331273147wrapword\" style=\"vertical-align:top;min-width:120px\"><strong>Options</strong></td>\r\n"
				+ "					<tr>\r\n"
				+ "						"+items+""
				+ "                </tr>\r\n"
				+ "            </tbody></table>\r\n"
				+ "            <table class=\"m_1113311250331273147payment-info\">\r\n"
				+ "                <tbody><tr>\r\n"
				+ "                    <th></th>\r\n"
				+ "                    <th style=\"width:1%\"></th>\r\n"
				+ "                </tr>\r\n"
				+ "                <tr>\r\n"
				+ "                    <td style=\"font-family:Ariel,Helvetica,sans-serif;font-weight:bold;text-transform:uppercase;font-size:14px;color:#b2b2b2;text-align:left;line-height:26px\">TOTAL: <span style=\"color:#313131\" class=\"m_1113311250331273147email\"> [USD]: $ "+checkOutPrice+"</span></td>\r\n"
				+ "                <tr>\r\n"
				+ "                    <td style=\"font-family:Ariel,Helvetica,sans-serif;font-size:14px;color:#313131;text-align:center;line-height:26px\" colspan=\"2\">\r\n"
				+ "\r\n"
				+ "\r\n"
				+ "                    </td>\r\n"
				+ "                </tr>\r\n"
				+ "            </tbody></table>\r\n"
				+ "\r\n"
				+ "            <div style=\"font-family:arial,helvetica,sans-serif;font-size:14px;color:#b2b2b2;text-align:left\">\r\n"
				+ " <tr>\r\n"
				+ "                    <th style=\"height:1px;width:50%\"></th>\r\n"
				+ "                    <th style=\"height:1px;width:50%\"></th>\r\n"
				+ "                </tr>\r\n"
				+ "                <strong>PAYMENT DETAILS:</strong>\r\n"
				+ "            </div>\r\n"
				+ "            <table class=\"m_1113311250331273147order-info\">\r\n"
				+ "                <tbody><tr>\r\n"
				+ "                    <th style=\"height:2px;width:60%\"></th>\r\n"
				+ "                    <th style=\"height:2px;width:60%\"></th>\r\n"
				+ "                </tr>\r\n"
				+ "                <tr>\r\n"
				+ "                </tr>\r\n"
				+ "            </tbody></table>\r\n"
				+ "                <tbody><tr>\r\n"
				+ "                    <th></th>\r\n"
				+ "                </tr>\r\n"
				+ "                <tr>\r\n";
		return INVOICE_HEADER;
	}
}
