package Server;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import logic.*;
/**
 * BiteMe
 *
 * <p>No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 */
public class OrderApiService{
    /**
     * Add a new order
     *
     */
    public static void addOrder(Order body, Response response) {
        // TODO: Implement...
        

    }
    
    /**
     * Return all the orders
     *
     */
    public static void allOrders(String restaurantID, Response response) {
        PreparedStatement stmt;
        ArrayList<Order> orders = new ArrayList<>();
        Order order;
        try{
            stmt = EchoServer.con.prepareStatement("SELECT * FROM biteme.order WHERE RestaurantID = ?");
            stmt.setString(1, restaurantID);
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                order = new Order(rs.getInt(finals.ORDER_NUM), rs.getString(finals.RESTAURANT_ID), rs.getString(finals.ORDER_TIME),
                        rs.getTime(finals.CHECK_OUT_PRICE), rs.getString(finals.REQUIRED_TIME), rs.getString(finals.TYPE_OF_ORDER),
                        rs.getString(finals.ACCOUNT_ID), rs.getString(rs.getString(finals.rs.getString(finals.ACCOUNT_ID)))
                orders.add(order);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        response.setCode(200);
        response.setDescription("Success in fetching orders");
        response.setBody(orders.toArray());
    }
    
    /**
     * Deletes an order
     *
     */
    public static void deleteOrder(Integer orderId, Response response) {
        // TODO: Implement...
        
        
    }
    
    /**
     * Find order by ID
     *
     * Returns a single order
     *
     */
    public static Order getOrderById(Integer orderId, Response response) {
        // TODO: Implement...
        
        return null;
    }
    
    /**
     * Get payment approval for monthly budget
     *
     */
    public static void getPaymentApproval(Integer accountID, Response response) {
        // TODO: Implement...
        
        
    }
    
    /**
     * Get resturants for the specific
     *
     */
    public static List<Resturant> getResturants(String area, Response response) {
        // TODO: Implement...
        
        return null;
    }
    
    /**
     * Updates a order in the DB with form data
     *
     */
    public static void updateOrderWithForm(Order body, Response response) {
        // TODO: Implement...
        
        
    }
    
    /**
     * Updates a order in the DB with form data
     *
     */
    public static void updateOrderWithForm(Long orderId, String address, String delivery, Response response) {
        // TODO: Implement...
        
        
    }
    
}

