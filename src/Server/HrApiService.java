package Server;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import com.google.gson.JsonElement;

import logic.Account;
import logic.BusinessAccount;
import logic.Employer;

/**
 * BiteMe
 *
 * <p>
 * No description provided (generated by Swagger Codegen
 * https://github.com/swagger-api/swagger-codegen)
 *
 */
public class HrApiService {
	
	/**
	 * Approve business account
	 *
	 */
	public static void approveBusinessAccount(String userName, Response response) {
		PreparedStatement approveBusinessAccount;		
		try {
			approveBusinessAccount = EchoServer.con.prepareStatement(
					"UPDATE biteme.business_account SET isApproved = 1 WHERE UserName = ?");
			approveBusinessAccount.setString(1, userName);
			approveBusinessAccount.executeUpdate();
		} catch (SQLException e) {
			response.setCode(400);
			response.setDescription("Couldn't approve a new business account -> UserName: " + userName);
		}
		response.setCode(200);
		response.setDescription("Success in approving a new business account -> UserName: " + userName);
	}

	/**
	 * Get all business acccounts that has isApproved &#x3D; &#x27;false&#x27;
	 *
	 */
	public static void getAllUnapprovedBusinessAccount(int branchManagerID, Response response) {
		PreparedStatement getAllBusinessAccount;	
		ResultSet rs;
		Account temp;
		JsonElement j;
		ArrayList<BusinessAccount> accs = new ArrayList<>();
		try {
			getAllBusinessAccount = EchoServer.con.prepareStatement(
					"SELECT UserName biteme.account AS account WHERE EXISTS"
					+ "(SELECT * FROM business_account AS business WHERE business.UserName = account.UserName AND account.BranchManagerID = ? AND business.isApproved = 0;");
			getAllBusinessAccount.setInt(1, branchManagerID);
			rs = getAllBusinessAccount.executeQuery();
			while(rs.next()) {
				AccountApiService.getAccountByUserName(rs.getString(1), response);
				temp = EchoServer.gson.fromJson((String)response.getBody(), Account.class);
				AccountApiService.getAccount(temp, response);
				j = EchoServer.gson.fromJson((String)response.getBody(), JsonElement.class);
				accs.add(EchoServer.gson.fromJson(j.getAsJsonObject().get("businessAccount"), BusinessAccount.class));
			}
		} catch (SQLException e) {
			response.setCode(400);
			response.setDescription("Couldn't fetch all business accounts -> BranchManagerID: " + branchManagerID);
		}
		response.setCode(200);
		response.setDescription("Success in fetching all business accounts -> BranchManagerID: " + branchManagerID);
		response.setBody(EchoServer.gson.toJson(accs.toArray()));
	}

	/**
	 * Register new Buisness
	 *
	 */
	public static void registerEmployer(Employer body, Response response) {
		PreparedStatement postEmployer;		
		try {
			postEmployer = EchoServer.con.prepareStatement(
					"INSERT INTO biteme.employer (businessName, isApproved, HrName, HrUserName, BranchManagerID) "
							+ "VALUES(?,?,?,?,?)");
			postEmployer.setString(1, body.getBusinessName());
			postEmployer.setBoolean(2, body.isApproved());
			postEmployer.setString(3, body.getHrName());
			postEmployer.setString(4, body.getHrUserName());
			postEmployer.setInt(5, body.getBranchManagerID());
			postEmployer.executeUpdate();
		} catch (SQLException e) {
			response.setCode(400);
			response.setDescription("Couldn't add a new employer -> BusinessName: " + body.getBusinessName());
		}

		response.setDescription("Success in adding a new employer -> BusinessName: " + body.getBusinessName());
	}
}
