package Server;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import logic.*;

/**
 * BiteMe
 *
 * <p>No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 */
public class BranchManagerApiService{
    /**
     * Get all the reports for the branch
     *
     * This can only be done by the logged in branch manager.
     *
     */
    public static void getBranchOrders(int branchManagerID, Response response) {
        PreparedStatement stmt;
        ResultSet rs;
        Map<String, String> ordersByRestaurantID = new HashMap<>();
        int restaurantID;
        Order order = null;
        try {
            stmt = EchoServer.con.prepareStatement("SELECT * FROM restaurants biteme.restaurant WHERE " +
                    "restaurants.BranchManagerID = ?");
            stmt.setInt(1,branchManagerID);
            stmt.execute();
            rs = stmt.getResultSet();
            while(rs.next()){
                restaurantID = rs.getInt(1);
                OrderApiService.allOrders(restaurantID, response);
                ordersByRestaurantID.put(Integer.toString(restaurantID), (String) response.getBody());
            }
        }catch (SQLException e){
            response.setCode(400);
            response.setDescription("Fail in fetching all branch orders -> branch manager id: " + Integer.toString(branchManagerID));
        }
        response.setCode(200);
        response.setDescription("Success in fetching all branch orders -> branch manager id: " + Integer.toString(branchManagerID));
        response.setBody(EchoServer.gson.toJson(ordersByRestaurantID));
    }

    /**
     * Get all the restaurants for the branch
     *
     * This can only be done by the logged in branch manager.
     *
     */
    public static void getBranchRestaurants(int branchManagerID, Response response) {
        PreparedStatement stmt;
        ResultSet rs;
        ArrayList<Restaurant> restaurants = new ArrayList<>();
        try {
            stmt = EchoServer.con.prepareStatement("SELECT * FROM restaurants biteme.restaurant WHERE " +
                    "restaurants.BranchManagerID = ?");
            stmt.setInt(1,branchManagerID);
            stmt.execute();
            rs = stmt.getResultSet();
            while(rs.next()){
                restaurants.add(new Restaurant(rs.getInt(QueryConsts.RESTAURANT_ID),
                        rs.getBoolean(QueryConsts.RESTAURANT_IS_APPROVED),
                        rs.getInt(QueryConsts.RESTAURANT_BRANCH_MANAGER_ID), rs.getString(QueryConsts.RESTAURANT_NAME),
                        rs.getString(QueryConsts.RESTAURANT_AREA),rs.getString(QueryConsts.RESTAURANT_TYPE),
                        rs.getString(QueryConsts.RESTAURANT_USER_NAME), rs.getString(QueryConsts.RESTAURANT_PHOTO),
                        rs.getString(QueryConsts.RESTAURANT_ADDRESS), rs.getString(QueryConsts.RESTAURANT_DESCRIPTION)));
            }
        }catch (SQLException e){
            response.setCode(400);
            response.setDescription("Fail in fetching all branch restaurants -> branch manager id: " + Integer.toString(branchManagerID));
        }
        response.setCode(200);
        response.setDescription("Success in fetching all branch restaurants -> branch manager id: " + Integer.toString(branchManagerID));
        response.setBody(restaurants.toArray());
    }
    
    /**
     * Get the reports for the branch
     *
     * This can only be done by the logged in branch manager.
     *
     */
    public static void getBranchReports(List<String> reportType) {
        // TODO: Implement...
        
        
    }
    
    /**
     * Register a resturant - mind that the supplier shcema isn&#x27;t finish
     *
     * This can only be done by the logged in branch manager.
     *
     */
    public static void registerSupplier(int id, String userName, String role, Restaurant restaurant, Response response) {
        PreparedStatement stmt;
        ResultSet rs;
        ArrayList<Restaurant> restaurants = new ArrayList<>();
        try{
            stmt = EchoServer.con.prepareStatement("SELECT restaurants.RestaurantName FROM " +
                    "restaurants biteme.restaurant WHERE restaurants.UserName = ? and restaurants.RestaurantName = ?;");
            stmt.setString(1, userName);
            stmt.setString(2, restaurant.getName());
            stmt.execute();
            rs = stmt.getResultSet();
            if(rs.getFetchSize() == 0){
                throw new SQLException("Restaurant" + restaurant.getName() + " is already exist", "400", 400);
            }
        }catch (SQLException e){
            response.setCode(e.getErrorCode());
            response.setBody(e.getMessage());
            return;
        }
        try {
            stmt = EchoServer.con.prepareStatement("UPDATE biteme.account AS accounts SET Role = ? WHERE " +
                    "accounts.UserName = ? and accounts.UserID = ?;");
            stmt.setString(1, role);
            stmt.setString(2, userName);
            stmt.setInt(3, id);
            stmt.execute();
        }catch (SQLException e){}
            try {
                stmt = EchoServer.con.prepareStatement(
                        "INSERT INTO biteme.restaurant (RestaurantName, IsApproved, BranchManagerID, Area, Image, " +
                                "UserName, Type, Address, Description) VALUES (?,?,?,?,?,?,?,?,?);");
                stmt.setString(1, restaurant.getName());
                stmt.setBoolean(2, restaurant.isApproved());
                stmt.setInt(3, restaurant.getBranchManagerID());
                stmt.setString(4, restaurant.getArea());
                stmt.setString(5, restaurant.getPhoto());
                stmt.setString(5, restaurant.getUserName());
                stmt.setString(5, restaurant.getType());
                stmt.setString(5, restaurant.getAddress());
                stmt.setString(5, restaurant.getDescription());
                stmt.execute();
            } catch (SQLException ex){
                response.setCode(400);
                response.setDescription("Fail in registering a new restaurant -> role: " +role +", userName" + userName);
            }
        response.setCode(200);
        response.setDescription("Success in registering a new restaurant -> role: " +role +", userName" + userName);
    } 
    /**
     * Register a resturant - mind that the supplier shcema isn&#x27;t finish
     *
     * This can only be done by the logged in branch manager.
     *
     */
    public static void registerPrivateAccount(PrivateAccount body, Response response) {
        PreparedStatement stmt;
        ResultSet rs;
        try {
            stmt = EchoServer.con.prepareStatement("UPDATE biteme.account AS accounts SET Role = ? WHERE " +
                    "accounts.UserName = ? and accounts.UserID = ?;");
            stmt.setString(1, "client");
            stmt.setString(1, body.getUserName());
            stmt.setInt(2, body.getUserID());
            stmt.execute();
            rs = stmt.getResultSet();
            if(rs.getFetchSize() == 0){
                throw new SQLException("Couldn't update " +body.getUserName() + " as " +body.getRole(), "400", 400);
            }
        }catch (SQLException e){
            response.setCode(e.getErrorCode());
            response.setBody(e.getMessage());
            return;
        }
        try {
            stmt = EchoServer.con.prepareStatement(
                    "INSERT INTO biteme.private_account (UserName, CreditCardNumber, CreditCardCVV, CreditCardEXP)"+
                            " VALUES (?,?,?,?);");
            stmt.setString(1, body.getUserName());
            stmt.setString(2, body.getCreditCardNumber());
            stmt.setString(3, body.getCreditCardCVV());
            stmt.setString(4, body.getCreditCardExpDate());
            stmt.execute();
        } catch (SQLException e){
            if(e.getErrorCode() == 1062){
                response.setCode(400);
                response.setDescription("Fail! Private account already exist -> userName: " + body.getUserName());
            }
        }
        response.setCode(200);
        response.setDescription("Success in registering a new private account -> userName: " + body.getUserName());
    } 
    /**
     * Register a resturant - mind that the supplier shcema isn&#x27;t finish
     *
     * This can only be done by the logged in branch manager.
     *
     */
    public static void registerBusinessAccount(BusinessAccount body, Response response) {
        PreparedStatement stmt;
        ResultSet rs;
        //TODO check for approved business
        try {
            stmt = EchoServer.con.prepareStatement("UPDATE biteme.account AS accounts SET Role = ? WHERE " +
                    "accounts.UserName = ? and accounts.UserID = ?;");
            stmt.setString(1, "client");
            stmt.setString(1, body.getUserName());
            stmt.setInt(2, body.getUserID());
            stmt.execute();
            rs = stmt.getResultSet();
            if(rs.getFetchSize() == 0){
                throw new SQLException("Couldn't update " +body.getUserName() + " as " +body.getRole(), "400", 400);
            }
        }catch (SQLException e){
            response.setCode(e.getErrorCode());
            response.setBody(e.getMessage());
            return;
        }
        try {
            stmt = EchoServer.con.prepareStatement(
                    "INSERT INTO biteme.business_account (UserName, MonthlyBillingCeling, isApproved, BusinessName, CurrentSpent)"+
                            " VALUES (?,?,?,?,?);");
            stmt.setString(1, body.getUserName());
            stmt.setInt(2, body.getMonthlyBillingCeiling());
            stmt.setBoolean(3, body.getIsApproved());
            stmt.setString(4, body.getBusinessName());
            stmt.setFloat(5,0);
            stmt.execute();
        } catch (SQLException e){
            if(e.getErrorCode() == 1062){
                response.setCode(400);
                response.setDescription("Fail! Business account already exist -> userName: " + body.getUserName());
            }
        }
        response.setCode(200);
        response.setDescription("Success in registering a new business account -> userName: " + body.getUserName());
    }
}

