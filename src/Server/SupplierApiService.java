package Server;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import logic.Item;
import logic.Menu;
import logic.Options;
import logic.Order;
import logic.item_in_menu;

/**
 * BiteMe
 *
 * <p>
 * No description provided (generated by Swagger Codegen
 * https://github.com/swagger-api/swagger-codegen)
 *
 */
public class SupplierApiService {
	/**
	 * Getting list of all related items
	 *
	 * This can only be done by the logged in supplier.
	 *
	 */
	public static void allItems(String menuName, Long resturantID, Response response) {
		// TODO: Implement...

	}

	/**
	 * Get all menus
	 *
	 * This can only be done by the logged in supplier.
	 *
	 */
	public static void allMenues(int restaurantID, Response response) {
		ResultSet rs1, rs2, rs3;
		ArrayList<Menu> menus = new ArrayList<>();
		ArrayList<Item> items = new ArrayList<>();
		ArrayList<Options> options = new ArrayList<>();
		Menu mtemp;
		Item itemp;
		Options otemp;

		try {
			PreparedStatement getMenus = EchoServer.con
					.prepareStatement("SELECT * FROM biteme.menu WHERE RestaurantID = ?");
			getMenus.setInt(1, restaurantID);
			getMenus.execute();
			rs1 = getMenus.getResultSet();

			while (rs1.next()) {
				mtemp = new Menu(rs1.getString(2), restaurantID);

				PreparedStatement getItems = EchoServer.con
						.prepareStatement("SELECT I.* FROM biteme.item_in_menu IIM, biteme.item I WHERE "
								+ "IIM.RestaurantID = ? AND IIM.MenuName = ? AND IIM.ItemID = I.ItemID"
								+ "AND IIM.RestaurantID = I.RestaurantID");
				getItems.setInt(1, restaurantID);
				getItems.setString(2, mtemp.getName());
				getItems.execute();
				rs2 = getItems.getResultSet();

				while (rs2.next()) {
					itemp = new Item(rs2.getInt(finals.ITEM_ID), restaurantID, rs2.getString(finals.ITEM_TYPE),
							rs2.getString(finals.ITEM_NAME), rs2.getFloat(finals.ITEM_PRICE),
							rs2.getString(finals.ITEM_DESCRIPTION), rs2.getString(finals.ITEM_INGRIDIENTS), null,
							rs2.getBytes(finals.ITEM_IMAGE));

					// get optional for each item

					PreparedStatement getOptions = EchoServer.con
							.prepareStatement("SELECT * FROM biteme.optional_category WHERE itemID = ?");
					getOptions.setInt(1, itemp.getItemID());
					getOptions.execute();
					rs3 = getOptions.getResultSet();

					while (rs3.next()) {
						otemp = new Options(rs3.getString(finals.OPTIONAL_TYPE), rs3.getString(finals.OPTIONAL_SPECIFY),
								itemp.getItemID());

						options.add(otemp);
					}

					// from ArrayList<T> to T[]

					itemp.setOptions(options.toArray(new Options[0]));

					items.add(itemp);
					
					options.clear();
				}
				mtemp.setItems(items.toArray(new Item[0]));
				
				menus.add(mtemp);
			
			}

		} catch (SQLException e) {
			response.setCode(405);
			response.setDescription("Invalid input");
			return;
		}

//		// if we don't have menus
//
//		if (menus.size() == 0)
//			return;
//
//		// get for each menu the items
//
//		for (Menu menu : menus) {
//			try {
//				PreparedStatement getItems = EchoServer.con
//						.prepareStatement("SELECT I.* FROM biteme.item_in_menu IIM, biteme.item I WHERE "
//								+ "IIM.RestaurantID = ? AND IIM.MenuName = ? AND IIM.ItemID = I.ItemID"
//								+ "AND IIM.RestaurantID = I.RestaurantID");
//				getItems.setInt(1, restaurantID);
//				getItems.setString(2, menu.getName());
//				getItems.execute();
//				rs1 = getItems.getResultSet();
//
//				while (rs1.next()) {
//					itemp = new Item(rs1.getInt(finals.ITEM_ID), restaurantID, rs1.getString(finals.ITEM_TYPE),
//							rs1.getString(finals.ITEM_NAME), rs1.getFloat(finals.ITEM_PRICE),
//							rs1.getString(finals.ITEM_DESCRIPTION), rs1.getString(finals.ITEM_INGRIDIENTS), null,
//							rs1.getBytes(finals.ITEM_IMAGE));
//
//					// get optional for each item
//
//					PreparedStatement getOptions = EchoServer.con
//							.prepareStatement("SELECT * FROM biteme.optional_category WHERE itemID = ?");
//					getOptions.setInt(1, itemp.getItemID());
//					getOptions.execute();
//					rs2 = getOptions.getResultSet();
//
//					while (rs2.next()) {
//						otemp = new Options(rs2.getString(finals.OPTIONAL_TYPE), rs2.getString(finals.OPTIONAL_SPECIFY),
//								itemp.getItemID());
//
//						options.add(otemp);
//					}
//
//					// from ArrayList<T> to T[]
//
//					itemp.setOptions(options.toArray(new Options[0]));
//
//					items.add(itemp);
//				}
//
//			} catch (SQLException e) {
////			response.setCode(405);
////			response.setDescription("Invalid input");
//				return;
//			}
//		}

	}

	/**
	 * Approve order
	 *
	 * This can only be done by the logged in supplier.
	 *
	 */
	public static void approveOrder(Long orderId) {
		// TODO: Implement...

	}

	/**
	 * Create item
	 *
	 * This can only be done by the logged in supplier.
	 *
	 */
	public static void createItem(Item body) {
		// TODO: Implement...

	}

	/**
	 * Create menu
	 *
	 * This can only be done by the logged in supplier.
	 *
	 */
	public static void createMenu(NewMenu body) {
		// TODO: Implement...

	}

	/**
	 * Edit menu
	 *
	 * This can only be done by the logged in supplier.
	 *
	 */
	public static void editMenu(NewMenu body) {
		// TODO: Implement...

	}

	/**
	 * Delete item
	 *
	 * This can only be done by the logged in supplier.
	 *
	 */
	public static void suppliersItemsDelete(String itemName) {
		// TODO: Implement...

	}

}
