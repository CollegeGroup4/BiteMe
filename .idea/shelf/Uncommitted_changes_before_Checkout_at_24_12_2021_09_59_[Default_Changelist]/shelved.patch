Index: bin/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/283-2833820_user-icon-orange-png.png\r\n/Aboutus.jpg\r\n/American_Express_logo.png\r\n/Atza.png\r\n/BBB.png\r\n/CafeCafe.png\r\n/JAPANKA.jpg\r\n/M.png\r\n/Mashua.jpg\r\n/MasterCard_Logo.png\r\n/MeatBar.jpg\r\n/Package delivery.png\r\n/PizzaHut.jpg\r\n/RUBENlogo.jpg\r\n/Server/\r\n/Visa.png\r\n/WhatsApp.svg.png\r\n/admin-login.jpg\r\n/biteMe.png\r\n/branchManager/\r\n/delete.jpg\r\n/delete.png\r\n/facebook-icon-preview-1.png\r\n/greg.jpg\r\n/gui/\r\n/guiNew/\r\n/instagram.png\r\n/logos.jpg\r\n/ruben.png\r\n/בית הפנקייק.png\r\n/חומוסאליהו.e-logo51\r\n/קפה_גרג.png\r\n/client/\r\n/logic/\r\n/common/\r\n/CEO/\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/bin/.gitignore b/bin/.gitignore
--- a/bin/.gitignore	(revision a90e01867d55ea477df846797199977cf4a38620)
+++ b/bin/.gitignore	(date 1640205652677)
@@ -1,36 +1,7 @@
-/283-2833820_user-icon-orange-png.png
-/Aboutus.jpg
-/American_Express_logo.png
-/Atza.png
-/BBB.png
-/CafeCafe.png
-/JAPANKA.jpg
-/M.png
-/Mashua.jpg
-/MasterCard_Logo.png
-/MeatBar.jpg
-/Package delivery.png
-/PizzaHut.jpg
-/RUBENlogo.jpg
 /Server/
-/Visa.png
-/WhatsApp.svg.png
-/admin-login.jpg
-/biteMe.png
 /branchManager/
-/delete.jpg
-/delete.png
-/facebook-icon-preview-1.png
-/greg.jpg
+/client/
+/common/
 /gui/
 /guiNew/
-/instagram.png
-/logos.jpg
-/ruben.png
-/בית הפנקייק.png
-/חומוסאליהו.e-logo51
-/קפה_גרג.png
-/client/
 /logic/
-/common/
-/CEO/
Index: src/Server/AccountApiService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Server;\r\n\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.util.ArrayList;\r\nimport java.util.Random;\r\n\r\nimport com.google.gson.JsonElement;\r\nimport logic.Account;\r\nimport logic.BusinessAccount;\r\nimport logic.PrivateAccount;\r\nimport logic.Restaurant;\r\n\r\n/**\r\n * BiteMe\r\n *\r\n * <p>\r\n * No description provided (generated by Swagger Codegen\r\n * https://github.com/swagger-api/swagger-codegen)\r\n *\r\n */\r\npublic class AccountApiService {\r\n\t/**\r\n\t * Create Private Account\r\n\t *\r\n\t * This can only be done by the logged in Account.\r\n\t *\r\n\t */\r\n\tpublic static void createPrivateAccount(PrivateAccount account, Response response) {\r\n\t\ttry {\r\n\t\t\tPreparedStatement postAccount = EchoServer.con.prepareStatement(\"UPDATE biteme.account SET Role = client AND Status = AND \" +\r\n\t\t\t\t\t\"BranchManagerID = ? AND Area = ? AND W4C ? WHERE UserName = ?;\");\r\n\r\n\t\t\tpostAccount.setInt(1, account.getBranch_manager_ID());\r\n\t\t\tpostAccount.setString(2, account.getArea());\r\n\t\t\tpostAccount.setString(3, getRandomHexString());\r\n\t\t\tpostAccount.setString(4, account.getUserName());\r\n\t\t\tpostAccount.execute();\r\n\r\n\t\t\tpostAccount = EchoServer.con.prepareStatement(\"INSERT INTO biteme.private_account (UserName, CreditCardNumber, CreditCardCVV, CreditCardExp) \" +\r\n\t\t\t\t\t\"VALUES(?,?,?,?)\");\r\n\t\t\tpostAccount.setString(1, account.getUserName());\r\n\t\t\tpostAccount.setString(2, account.getCreditCardNumber());\r\n\t\t\tpostAccount.setString(3, account.getCreditCardCVV());\r\n\t\t\tpostAccount.setString(4, account.getCreditCardExpDate());\r\n\t\t\tpostAccount.execute();\r\n\r\n\t\t} catch (SQLException e) {\r\n\t\t\tresponse.setBody(null);\r\n\t\t\tresponse.setDescription(e.getMessage());\r\n\t\t\tresponse.setCode(400);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tresponse.setCode(200);\r\n\t\tresponse.setDescription(\"Success in registering private account:\" + account.getUserID());\r\n\t\tresponse.setBody(null);\r\n\t}\r\n\r\n\t/**\r\n\t * Create Business Account\r\n\t *\r\n\t * This can only be done by the logged in Account.\r\n\t *\r\n\t */\r\n\tpublic static void createBusinessAccount(BusinessAccount account, Response response) {\r\n\t\ttry {\r\n\r\n\t\t\tPreparedStatement postAccount = EchoServer.con.prepareStatement(\"UPDATE biteme.account SET Role = client AND Status = AND \" +\r\n\t\t\t\t\t\"BranchManagerID = ? AND Area = ? AND W4C ? WHERE UserName = ?;\");\r\n\r\n\t\t\tpostAccount.setInt(1, account.getBranch_manager_ID());\r\n\t\t\tpostAccount.setString(2, account.getArea());\r\n\t\t\tpostAccount.setString(3, getRandomHexString());\r\n\t\t\tpostAccount.setString(4, account.getUserName());\r\n\t\t\tpostAccount.execute();\r\n\r\n\t\t\tpostAccount = EchoServer.con.prepareStatement(\"INSERT INTO biteme.business_account (UserName, MonthlyBillingCeling, isApproved, BusinessName, CurrentSpent) \" +\r\n\t\t\t\t\t\"VALUES(?,?,?,?,?)\");\r\n\r\n\t\t\tpostAccount.setInt(1, account.getUserID());\r\n\t\t\tpostAccount.setFloat(2, account.getMonthlyBillingCeiling());\r\n\t\t\tpostAccount.setBoolean(13, account.getIsApproved());\r\n\t\t\tpostAccount.setString(14, account.getBusinessName());\r\n\t\t\tpostAccount.setFloat(15, account.getCurrentSpent());\r\n\t\t\tpostAccount.execute();\r\n\r\n\t\t} catch (SQLException e) {\r\n\t\t\tresponse.setBody(null);\r\n\t\t\tresponse.setDescription(e.getMessage());\r\n\t\t\tresponse.setCode(400);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tresponse.setCode(200);\r\n\t\tresponse.setDescription(\"Success in registering business account:\" + account.getUserID());\r\n\t\tresponse.setBody(null);\r\n\t}\r\n\r\n\t/**\r\n\t * Generate a random hex string at size of 50\r\n\t *\r\n\t * @return\r\n\t */\r\n\tpublic static String getRandomHexString() {\r\n\t\tint numchars = 50;\r\n\t\tRandom r = new Random();\r\n\t\tStringBuffer sb = new StringBuffer();\r\n\t\twhile (sb.length() < numchars) {\r\n\t\t\tsb.append(Integer.toHexString(r.nextInt()));\r\n\t\t}\r\n\t\treturn sb.toString().substring(0, numchars);\r\n\t}\r\n\r\n\t/**\r\n\t * Delete Account\r\n\t *\r\n\t * This can only be done by the logged in Account.\r\n\t *??????????????????????????????????????????????????????????????????????????????????????????????????????\r\n\t */\r\n\tpublic static void deleteAccount(String userName, Response response) {\r\n\t\tAccount account = null;\r\n\t\ttry {\r\n\t\t\tPreparedStatement deleteAccount = EchoServer.con.prepareStatement(\r\n\t\t\t\t\t\"DELETE FROM accounts biteme.account WHERE accounts.UserName = ?;\");\r\n\t\t\tdeleteAccount.setString(1, userName);\r\n\t\t\t// Its the first userName that he had so the test is in users table on login\r\n\t\t\tdeleteAccount.execute();\r\n\t\t\tdeleteAccount.getResultSet();\r\n\t\t} catch (SQLException e) {\r\n\t\t\tresponse.setCode(400);\r\n\t\t\tresponse.setDescription(\"Fields are missing\");\r\n\t\t\tresponse.setBody(null);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tresponse.setCode(200);\r\n\t\tresponse.setDescription(\"Success in deleting account \" + userName);\r\n\t\tresponse.setBody(null);\r\n\t}\r\n\r\n\t/**\r\n\t * Get all Accounts\r\n\t *\r\n\t */\r\n\tpublic static void getAllAccounts(int branch_manager_id, Response response) {\r\n\t\tResultSet rs;\r\n\t\tAccount account = null;\r\n\t\tArrayList<Account> accounts = new ArrayList<Account>();\r\n\t\ttry {\r\n\t\t\tPreparedStatement getAllAccounts = EchoServer.con\r\n\t\t\t\t\t.prepareStatement(\"SELECT * FROM biteme.account WHERE BranchManagerID = ?;\");\r\n\t\t\tgetAllAccounts.setInt(1, branch_manager_id);\r\n\t\t\tgetAllAccounts.execute();\r\n\t\t\trs = getAllAccounts.getResultSet();\r\n\t\t\twhile (rs.next()) {\r\n\t\t\t\taccount = new Account(rs.getInt(QueryConsts.ACCOUNT_USER_ID),\r\n\t\t\t\t\t\trs.getString(QueryConsts.ACCOUNT_USER_NAME), rs.getString(QueryConsts.ACCOUNT_PASSWORD),\r\n\t\t\t\t\t\trs.getString(QueryConsts.ACCOUNT_FIRST_NAME), rs.getString(QueryConsts.ACCOUNT_LAST_NAME),\r\n\t\t\t\t\t\trs.getString(QueryConsts.ACCOUNT_EMAIL), rs.getString(QueryConsts.ACCOUNT_ROLE),\r\n\t\t\t\t\t\trs.getString(QueryConsts.ACCOUNT_PHONE), rs.getString(QueryConsts.ACCOUNT_STATUS),\r\n\t\t\t\t\t\trs.getBoolean(QueryConsts.ACCOUNT_IS_BUSINESS),\r\n\t\t\t\t\t\trs.getInt(QueryConsts.ACCOUNT_BRANCH_MANAGER_ID), rs.getString(QueryConsts.ACCOUNT_AREA),\r\n\t\t\t\t\t\trs.getInt(QueryConsts.ACCOUNT_DEBT), rs.getString(QueryConsts.ACCOUNT_W4C));\r\n\t\t\t\taccounts.add(account);\r\n\t\t\t}\r\n\r\n\t\t} catch (SQLException e) {\r\n\t\t\tresponse.setCode(400);\r\n\t\t\tresponse.setDescription(e.getMessage());\r\n\t\t\tresponse.setBody(null);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tresponse.setCode(200);\r\n\t\tresponse.setDescription(\"Success in fetching accounts \" + account.getUserID());\r\n\t\tresponse.setBody(accounts.toArray());\r\n\t}\r\n\r\n\t/**\r\n\t * Get Full Account (With private or business fields) by Account\r\n\t *\r\n\t */\r\n\tpublic static void getAccount(Account account, Response response) {\r\n\t\tResultSet rs;\r\n\r\n\t\ttry {\r\n\t\t\tif (account.getRole().equals(\"client\")) {\r\n\t\t\t\tif (account.isBusiness()) {\r\n\t\t\t\t\tPreparedStatement getAccount = EchoServer.con\r\n\t\t\t\t\t\t\t.prepareStatement(\"SELECT * FROM biteme.business_account WHERE UserName = ?;\");\r\n\t\t\t\t\tgetAccount.setString(1, account.getUserName());\r\n\t\t\t\t\tgetAccount.execute();\r\n\t\t\t\t\trs = getAccount.getResultSet();\r\n\t\t\t\t\tif (rs.next()) {\r\n\r\n\t\t\t\t\t\tresponse.setBody(new BusinessAccount(account.getUserID(), account.getUserName(),\r\n\t\t\t\t\t\t\t\taccount.getPassword(), account.getFirstName(), account.getLastName(),\r\n\t\t\t\t\t\t\t\taccount.getEmail(), account.getRole(), account.getPhone(), account.getStatus(),\r\n\t\t\t\t\t\t\t\taccount.isBusiness(), account.getBranch_manager_ID(), account.getArea(),\r\n\t\t\t\t\t\t\t\taccount.getDebt(), account.getW4c_card(), rs.getInt(2), rs.getBoolean(3),\r\n\t\t\t\t\t\t\t\trs.getString(4), rs.getFloat(5)));\r\n\t\t\t\t\t\tresponse.setCode(200);\r\n\t\t\t\t\t\tresponse.setDescription(\"Success fetching business account\");\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthrow new SQLException(\"Account\" + account.getUserID() + \" is not found in business_account\",\r\n\t\t\t\t\t\t\t\t\"400\", 400);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tPreparedStatement getAccount = EchoServer.con\r\n\t\t\t\t\t\t\t.prepareStatement(\"SELECT * FROM biteme.private_account WHERE UserID = ?;\");\r\n\t\t\t\t\tgetAccount.setInt(1, account.getUserID());\r\n\t\t\t\t\tgetAccount.execute();\r\n\t\t\t\t\trs = getAccount.getResultSet();\r\n\t\t\t\t\tif (rs.next()) {\r\n\r\n\t\t\t\t\t\tresponse.setBody(new PrivateAccount(account.getUserID(), account.getUserName(),\r\n\t\t\t\t\t\t\t\taccount.getPassword(), account.getFirstName(), account.getLastName(),\r\n\t\t\t\t\t\t\t\taccount.getEmail(), account.getRole(), account.getPhone(), account.getStatus(),\r\n\t\t\t\t\t\t\t\taccount.isBusiness(), account.getBranch_manager_ID(), account.getArea(),\r\n\t\t\t\t\t\t\t\taccount.getDebt(), account.getW4c_card(), rs.getString(2), rs.getString(3),\r\n\t\t\t\t\t\t\t\trs.getString(4)));\r\n\t\t\t\t\t\tresponse.setCode(200);\r\n\t\t\t\t\t\tresponse.setDescription(\"Success fetching private account\");\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthrow new SQLException(\"Account\" + account.getUserID() + \" is not found in private_account\",\r\n\t\t\t\t\t\t\t\t\"400\", 401);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t} catch (SQLException e) {\r\n\t\t\tresponse.setCode(e.getErrorCode());\r\n\t\t\tresponse.setDescription(e.getMessage());\r\n\t\t\tresponse.setBody(null);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Logs Account into the system\r\n\t *\r\n\t */\r\n\tpublic static void loginAccount(String userName, String password, Response response) {\r\n\t\tResultSet rs;\r\n\t\tJsonElement body = EchoServer.gson.toJsonTree(new Object());\r\n\t\tAccount account = null;\r\n\t\ttry {\r\n\t\t\tPreparedStatement loginAccount = EchoServer.con\r\n\t\t\t\t\t.prepareStatement(\"SELECT * FROM biteme.account WHERE UserName = ? AND Password = ?;\");\r\n\r\n\t\t\tloginAccount.setString(1, userName);\r\n\t\t\tloginAccount.setString(2, password);\r\n\t\t\tloginAccount.execute();\r\n\t\t\trs = loginAccount.getResultSet();\r\n\r\n\t\t\tif(rs.getFetchSize() == 0) {\r\n\t\t\t\tthrow new SQLException(\"Account \" + userName + \" not found\", \"402\", 402);\r\n\t\t\t}\r\n\r\n\t\t\tif(rs.getString(QueryConsts.ACCOUNT_ROLE).equals(\"Not Assigned\")){\r\n\t\t\t\tthrow new SQLException(\"Account didn't activated yet.\", \"400\", 400);\r\n\t\t\t}\r\n\r\n\t\t\tloginAccount = EchoServer.con.prepareStatement(\"UPDATE biteme.account SET isLoggedIn = 1 WHERE UserName = ?;\");\r\n\t\t\tloginAccount.setString(1, userName);\r\n\t\t\tif (rs.getBoolean(QueryConsts.ACCOUNT_IS_LOGGED_IN)) {\r\n\t\t\t\tthrow new SQLException(\"User is already logged in\", \"401\", 401);\r\n\t\t\t}\r\n\r\n\t\t\taccount = new Account(rs.getInt(QueryConsts.ACCOUNT_USER_ID), rs.getString(QueryConsts.ACCOUNT_USER_NAME),\r\n\t\t\t\t\trs.getString(QueryConsts.ACCOUNT_PASSWORD), rs.getString(QueryConsts.ACCOUNT_FIRST_NAME),\r\n\t\t\t\t\trs.getString(QueryConsts.ACCOUNT_LAST_NAME), rs.getString(QueryConsts.ACCOUNT_EMAIL),\r\n\t\t\t\t\trs.getString(QueryConsts.ACCOUNT_ROLE), rs.getString(QueryConsts.ACCOUNT_PHONE),\r\n\t\t\t\t\trs.getString(QueryConsts.ACCOUNT_STATUS), rs.getBoolean(QueryConsts.ACCOUNT_IS_BUSINESS),rs.getInt(QueryConsts.ACCOUNT_BRANCH_MANAGER_ID),\r\n\t\t\t\t\trs.getString(QueryConsts.ACCOUNT_AREA), rs.getInt(QueryConsts.ACCOUNT_DEBT), rs.getString(QueryConsts.ACCOUNT_W4C));\r\n\r\n\t\t\tJsonElement accountField = EchoServer.gson.toJsonTree(account);\r\n\t\t\tbody.getAsJsonObject().add(\"account\", accountField);\r\n\t\t\tif (account.getStatus().equals(\"blocked\")) {\r\n\t\t\t\tthrow new SQLException(\"Account\" + account.getUserID() + \"is blocked\", \"403\", 403);\r\n\t\t\t}\r\n\r\n\r\n\r\n\t\t\tif(account.getRole().equals(\"Supplier\") || account.getRole().equals(\"Moderator\")){\r\n\t\t\t\tRestaurant res;\r\n\t\t\t\tPreparedStatement getRestaurant = EchoServer.con.prepareStatement(\"SELECT * FROM biteme.restaurants WHERE UserName = ?\");\r\n\t\t\t\tgetRestaurant.setString(1, account.getUserName());\r\n\t\t\t\trs = getRestaurant.getResultSet();\r\n\t\t\t\tif(!rs.getBoolean(QueryConsts.RESTAURANT_IS_APPROVED)){\r\n\t\t\t\t\tthrow new SQLException(\"Restaurant didn't approved yet\",\"404\",404);\r\n\t\t\t\t}\r\n\t\t\t\tres = new Restaurant(rs.getInt(QueryConsts.RESTAURANT_ID), rs.getBoolean(QueryConsts.RESTAURANT_IS_APPROVED), rs.getInt(QueryConsts.RESTAURANT_BRANCH_MANAGER_ID), rs.getString(QueryConsts.RESTAURANT_NAME),\r\n\t\t\t\t\t\trs.getString(QueryConsts.RESTAURANT_AREA), rs.getString(QueryConsts.RESTAURANT_TYPE), account.getUserName(), rs.getString(QueryConsts.RESTAURANT_PHOTO), rs.getString(QueryConsts.RESTAURANT_ADDRESS),\r\n\t\t\t\trs.getString(QueryConsts.RESTAURANT_DESCRIPTION));\r\n\t\t\t\tJsonElement restaurantField = EchoServer.gson.toJsonTree(res);\r\n\t\t\t\tbody.getAsJsonObject().add(\"moderator\", restaurantField);\r\n\r\n\t\t\t}\r\n\r\n\t\t} catch (SQLException e) {\r\n\t\t\tresponse.setCode(e.getErrorCode());\r\n\t\t\tresponse.setDescription(e.getMessage());\r\n\t\t\tresponse.setBody(null);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tresponse.setCode(200);\r\n\t\tresponse.setDescription(\"Success in login \" + account.getUserID());\r\n\t\tresponse.setBody(EchoServer.gson.toJson(body));\r\n\t}\r\n\r\n\t/**\r\n\t * Logs out current logged in Account session\r\n\t *\r\n\t */\r\n\tpublic static void logoutAccount(String userName, Response response) {\r\n\r\n\r\n\t\tResultSet rs;\r\n\t\ttry {\r\n\t\t\tPreparedStatement logOutAccount = EchoServer.con\r\n\t\t\t\t\t.prepareStatement(\"UPDATE biteme.account AS account SET isLoggedIn = 0 WHERE account.UserName = ?;\");\r\n\t\t\tlogOutAccount.setString(1, userName);\r\n\t\t\tlogOutAccount.execute();\r\n\t\t\trs = logOutAccount.getResultSet();\r\n\t\t\tif (rs.rowUpdated() == false) {\r\n\t\t\t\tthrow new SQLException(\"couldn't log out\");\r\n\t\t\t}\r\n\t\t} catch (SQLException e) {\r\n\t\t\tresponse.setCode(400);\r\n\t\t\tresponse.setDescription(e.getMessage());\r\n\t\t\tresponse.setBody(null);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tresponse.setCode(200);\r\n\t\tresponse.setDescription(\"Success in logging out\");\r\n\t\tresponse.setBody(null);\r\n\t}\r\n\r\n\t/**\r\n\t * login Account with W4C code\r\n\t *\r\n\t * \r\n\t *\r\n\t */\r\n\tpublic static void loginAccountW4C(String w4cCode, Response response) {\r\n\r\n\t\tResultSet rs;\r\n\t\tJsonElement body = EchoServer.gson.toJsonTree(new Object());\r\n\t\tAccount account = null;\r\n\t\ttry {\r\n\t\t\tPreparedStatement loginAccount = EchoServer.con.prepareStatement(\"SELECT * FROM biteme.account WHERE W4C = ?;\");\r\n\t\tloginAccount.setString(1, w4cCode);\r\n\t\trs = loginAccount.getResultSet();\r\n\t\t\tif(rs.getFetchSize() == 0) {\r\n\t\t\t\tthrow new SQLException(\"Account \" + w4cCode + \" not found\", \"402\", 402);\r\n\t\t\t}\r\n\r\n\t\t\tif(rs.getString(QueryConsts.ACCOUNT_ROLE).equals(\"Not Assigned\")){\r\n\t\t\t\tthrow new SQLException(\"Account didn't activated yet.\", \"400\", 400);\r\n\t\t\t}\r\n\r\n\t\t\tloginAccount = EchoServer.con.prepareStatement(\"UPDATE biteme.account SET isLoggedIn = 1 WHERE W4C = ?;\");\r\n\t\t\tloginAccount.setString(1, w4cCode);\r\n\t\t\tif (rs.getBoolean(QueryConsts.ACCOUNT_IS_LOGGED_IN)) {\r\n\t\t\t\tthrow new SQLException(\"User is already logged in\", \"401\", 401);\r\n\t\t\t}\r\n\r\n\t\t\taccount = new Account(rs.getInt(QueryConsts.ACCOUNT_USER_ID), rs.getString(QueryConsts.ACCOUNT_USER_NAME),\r\n\t\t\t\t\trs.getString(QueryConsts.ACCOUNT_PASSWORD), rs.getString(QueryConsts.ACCOUNT_FIRST_NAME),\r\n\t\t\t\t\trs.getString(QueryConsts.ACCOUNT_LAST_NAME), rs.getString(QueryConsts.ACCOUNT_EMAIL),\r\n\t\t\t\t\trs.getString(QueryConsts.ACCOUNT_ROLE), rs.getString(QueryConsts.ACCOUNT_PHONE),\r\n\t\t\t\t\trs.getString(QueryConsts.ACCOUNT_STATUS), rs.getBoolean(QueryConsts.ACCOUNT_IS_BUSINESS),rs.getInt(QueryConsts.ACCOUNT_BRANCH_MANAGER_ID),\r\n\t\t\t\t\trs.getString(QueryConsts.ACCOUNT_AREA), rs.getInt(QueryConsts.ACCOUNT_DEBT), rs.getString(QueryConsts.ACCOUNT_W4C));\r\n\r\n\t\t\tJsonElement accountField = EchoServer.gson.toJsonTree(account);\r\n\t\t\tbody.getAsJsonObject().add(\"account\", accountField);\r\n\t\t\tif (account.getStatus().equals(\"blocked\")) {\r\n\t\t\t\tthrow new SQLException(\"Account\" + account.getUserID() + \"is blocked\", \"403\", 403);\r\n\t\t\t}\r\n\r\n\r\n\r\n\t\t\tif(account.getRole().equals(\"Supplier\") || account.getRole().equals(\"Moderator\")){\r\n\t\t\t\tRestaurant res;\r\n\t\t\t\tPreparedStatement getRestaurant = EchoServer.con.prepareStatement(\"SELECT * FROM biteme.restaurants WHERE W4C = ?\");\r\n\t\t\t\tgetRestaurant.setString(1, w4cCode);\r\n\t\t\t\trs = getRestaurant.getResultSet();\r\n\t\t\t\tif(!rs.getBoolean(QueryConsts.RESTAURANT_IS_APPROVED)){\r\n\t\t\t\t\tthrow new SQLException(\"Restaurant didn't approved yet\",\"404\",404);\r\n\t\t\t\t}\r\n\t\t\t\tres = new Restaurant(rs.getInt(QueryConsts.RESTAURANT_ID), rs.getBoolean(QueryConsts.RESTAURANT_IS_APPROVED), rs.getInt(QueryConsts.RESTAURANT_BRANCH_MANAGER_ID), rs.getString(QueryConsts.RESTAURANT_NAME),\r\n\t\t\t\t\t\trs.getString(QueryConsts.RESTAURANT_AREA), rs.getString(QueryConsts.RESTAURANT_TYPE), account.getUserName(), rs.getString(QueryConsts.RESTAURANT_PHOTO), rs.getString(QueryConsts.RESTAURANT_ADDRESS),\r\n\t\t\t\t\t\trs.getString(QueryConsts.RESTAURANT_DESCRIPTION));\r\n\t\t\t\tJsonElement restaurantField = EchoServer.gson.toJsonTree(res);\r\n\t\t\t\tbody.getAsJsonObject().add(\"moderator\", restaurantField);\r\n\r\n\t\t\t}\r\n\r\n\t\t} catch (SQLException e) {\r\n\t\t\tresponse.setCode(e.getErrorCode());\r\n\t\t\tresponse.setDescription(e.getMessage());\r\n\t\t\tresponse.setBody(null);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tresponse.setCode(200);\r\n\t\tresponse.setDescription(\"Success in login \" + account.getUserID());\r\n\t\tresponse.setBody(EchoServer.gson.toJson(body));\r\n\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updated Account\r\n\t *\r\n\t * This can only be done by the master / branch manager / CEO\r\n\t *\r\n\t */\r\n\tpublic static void updateAccount(Account account, Response response) {\r\n\t\ttry {\r\n\t\t\tPreparedStatement postAccount = EchoServer.con.prepareStatement(\r\n\t\t\t\t\t\"UPDATE biteme.account AS account SET (UserID = ?, UserName = ?, FirstName = ?, Password = ?, LastName = ?, PhoneNumber = ?, Email = ?,\"\r\n\t\t\t\t\t\t\t+ \" Role = ?, Status = ?, BranchManagerID = ?, Area = ?)\"\r\n\t\t\t\t\t\t\t+ \"WHERE UserName = ?;\");\r\n\t\t\tpostAccount.setInt(1, account.getUserID());\r\n\t\t\t// Its the first userName that he had so the test is in users table on login\r\n\t\t\tpostAccount.setString(2, account.getUserName());\r\n\t\t\tpostAccount.setString(3, account.getFirstName());\r\n\t\t\tpostAccount.setString(4, account.getPassword());\r\n\t\t\tpostAccount.setString(5, account.getLastName());\r\n\t\t\tpostAccount.setString(6, account.getPhone());\r\n\t\t\tpostAccount.setString(7, account.getEmail());\r\n\t\t\tpostAccount.setString(8, account.getRole());\r\n\t\t\tpostAccount.setString(9, account.getStatus());\r\n\t\t\tpostAccount.setInt(10, account.getBranch_manager_ID());\r\n\t\t\tpostAccount.setString(11, account.getArea());\r\n\t\t\tpostAccount.setString(12, account.getUserName());\r\n\t\t\tpostAccount.execute();\r\n\r\n\t\t} catch (SQLException e) {\r\n\t\t\tresponse.setCode(e.getErrorCode());\r\n\t\t\tresponse.setDescription(e.getMessage());\r\n\t\t\tresponse.setBody(null);\r\n\t\t\treturn;\r\n\t\t} finally {\r\n\t\t\tresponse.setCode(200);\r\n\t\t\tresponse.setDescription(\"Success in updating account\" + account.getUserID());\r\n\t\t\tresponse.setBody(null);\r\n\t\t}\r\n\t}\r\n\tpublic static void updatePrivateAccount(PrivateAccount account, Response response) {\r\n\t\tAccount account1 = account;\r\n\t\tupdateAccount(account1, response);\r\n\t\ttry {\r\n\t\t\tPreparedStatement postAccount = EchoServer.con.prepareStatement(\r\n\t\t\t\t\t\"UPDATE biteme.private_account SET (UserName = ?, CreditCardNumber = ?, CreditCardCVV = ?, CreditCardExp = ?)\"\r\n\t\t\t\t\t\t\t+ \"WHERE UserName = ?;\");\r\n\t\t\t// Its the first userName that he had so the test is in users table on login\r\n\t\t\tpostAccount.setString(1, account.getUserName());\r\n\t\t\tpostAccount.setString(2, account.getCreditCardNumber());\r\n\t\t\tpostAccount.setString(3, account.getCreditCardCVV());\r\n\t\t\tpostAccount.setString(4, account.getCreditCardExpDate());\r\n\r\n\t\t\tpostAccount.execute();\r\n\r\n\t\t} catch (SQLException e) {\r\n\t\t\tresponse.setCode(e.getErrorCode());\r\n\t\t\tresponse.setDescription(e.getMessage());\r\n\t\t\tresponse.setBody(null);\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic static void updateBusinessAccount(BusinessAccount account, Response response) {\r\n\t\tAccount account1 = account;\r\n\t\tupdateAccount(account1, response);\r\n\t\ttry {\r\n\t\t\tPreparedStatement postAccount = EchoServer.con.prepareStatement(\r\n\t\t\t\t\t\"UPDATE biteme.business_account SET (UserName = ?, MonthlyBillingCeling = ?, isApproved = ?, BusinessName = ?, CurrentSpent = ?)\"\r\n\t\t\t\t\t\t\t+ \"WHERE UserName = ?;\");\r\n\t\t\tpostAccount.setString(1, account.getUserName());\r\n\t\t\tpostAccount.setFloat(2, account.getMonthlyBillingCeiling());\r\n\t\t\tpostAccount.setBoolean(3, account.getIsApproved());\r\n\t\t\tpostAccount.setString(4, account.getBusinessName());\r\n\t\t\tpostAccount.setFloat(5, account.getCurrentSpent());\r\n\r\n\t\t\tpostAccount.execute();\r\n\r\n\t\t} catch (SQLException e) {\r\n\t\t\tresponse.setCode(e.getErrorCode());\r\n\t\t\tresponse.setDescription(e.getMessage());\r\n\t\t\tresponse.setBody(null);\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Server/AccountApiService.java b/src/Server/AccountApiService.java
--- a/src/Server/AccountApiService.java	(revision a90e01867d55ea477df846797199977cf4a38620)
+++ b/src/Server/AccountApiService.java	(date 1640208346878)
@@ -247,13 +247,11 @@
 		try {
 			PreparedStatement loginAccount = EchoServer.con
 					.prepareStatement("SELECT * FROM biteme.account WHERE UserName = ? AND Password = ?;");
-
 			loginAccount.setString(1, userName);
 			loginAccount.setString(2, password);
-			loginAccount.execute();
-			rs = loginAccount.getResultSet();
+			rs = loginAccount.executeQuery();
 
-			if(rs.getFetchSize() == 0) {
+			if(!rs.next()) {
 				throw new SQLException("Account " + userName + " not found", "402", 402);
 			}
 
Index: .idea/shelf/Uncommitted_changes_before_Update_at_18_12_2021_22_59_[Default_Changelist]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_18_12_2021_22_59_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_18_12_2021_22_59_[Default_Changelist]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_18_12_2021_22_59_[Default_Changelist]/shelved.patch	(revision a90e01867d55ea477df846797199977cf4a38620)
+++ /dev/null	(revision a90e01867d55ea477df846797199977cf4a38620)
@@ -1,21 +0,0 @@
-Index: .idea/sonarlint/issuestore/index.pb
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/sonarlint/issuestore/index.pb b/.idea/sonarlint/issuestore/index.pb
---- a/.idea/sonarlint/issuestore/index.pb	
-+++ b/.idea/sonarlint/issuestore/index.pb	
-@@ -1,0 +1,11 @@
-+
-+9
-+	README.md,8\e\8ec9a00bfd09b3190ac6b22251dbb1aa95a0579d
-+`
-+0src/biteme/server/ServerPortFrameController.java,6\1\61debf1fb285bdbbb647186d51723cda5b11d5c6
-+F
-+src/logic/Options.java,b\6\b664aa4ca6e62f38b60574ed466fdccf2b5ef4fc
-+O
-+src/biteme/server/Response.java,a\8\a852c6f38f161818970956ef98a27f93d3518339
-+C
-+src/logic/Menu.java,0\d\0d1322b6a7967eeadb76d48b73785f312fc5da6e
-\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_18_12_2021_22_59__Default_Changelist_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_18_12_2021_22_59__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_18_12_2021_22_59__Default_Changelist_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_18_12_2021_22_59__Default_Changelist_.xml	(revision a90e01867d55ea477df846797199977cf4a38620)
+++ /dev/null	(revision a90e01867d55ea477df846797199977cf4a38620)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_18_12_2021_22_59_[Default_Changelist]" date="1639861191720" recycled="false" toDelete="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_18_12_2021_22_59_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 18/12/2021 22:59 [Default Changelist]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_18_12_2021_22_59__Default_Changelist_1.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_18_12_2021_22_59__Default_Changelist_1.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_18_12_2021_22_59__Default_Changelist_1.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_18_12_2021_22_59__Default_Changelist_1.xml	(revision a90e01867d55ea477df846797199977cf4a38620)
+++ /dev/null	(revision a90e01867d55ea477df846797199977cf4a38620)
@@ -1,49 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_18_12_2021_22_59_[Default_Changelist]1" date="1639861315681" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_18_12_2021_22_59_[Default_Changelist]1/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 18/12/2021 22:59 [Default Changelist]" />
-  <binary>
-    <option name="BEFORE_PATH" value="bin/client/ClientUI.class" />
-    <option name="AFTER_PATH" value="bin/client/ClientUI.class" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_18_12_2021_22_59_[Default_Changelist]1/ClientUI.class" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" value="bin/logic/Shippment.class" />
-    <option name="AFTER_PATH" value="bin/logic/Shippment.class" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_18_12_2021_22_59_[Default_Changelist]1/Shippment.class" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" value="bin/common/DBController.class" />
-    <option name="AFTER_PATH" value="bin/common/DBController.class" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_18_12_2021_22_59_[Default_Changelist]1/DBController.class" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" value="bin/logic/Restaurant.class" />
-    <option name="AFTER_PATH" value="bin/logic/Restaurant.class" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_18_12_2021_22_59_[Default_Changelist]1/Restaurant.class" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" value="bin/logic/Category.class" />
-    <option name="AFTER_PATH" value="bin/logic/Category.class" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_18_12_2021_22_59_[Default_Changelist]1/Category.class" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" value="bin/logic/Order.class" />
-    <option name="AFTER_PATH" value="bin/logic/Order.class" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_18_12_2021_22_59_[Default_Changelist]1/Order.class" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" value="bin/client/ask.class" />
-    <option name="AFTER_PATH" value="bin/client/ask.class" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_18_12_2021_22_59_[Default_Changelist]1/ask.class" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" value="bin/common/DBControllerTest.class" />
-    <option name="AFTER_PATH" value="bin/common/DBControllerTest.class" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_18_12_2021_22_59_[Default_Changelist]1/DBControllerTest.class" />
-  </binary>
-  <binary>
-    <option name="BEFORE_PATH" value="bin/logic/Menu.class" />
-    <option name="AFTER_PATH" value="bin/logic/Menu.class" />
-    <option name="SHELVED_PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_18_12_2021_22_59_[Default_Changelist]1/Menu.class" />
-  </binary>
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_18_12_2021_22_59_[Default_Changelist]1/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_18_12_2021_22_59_[Default_Changelist]1/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_18_12_2021_22_59_[Default_Changelist]1/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_18_12_2021_22_59_[Default_Changelist]1/shelved.patch	(revision a90e01867d55ea477df846797199977cf4a38620)
+++ /dev/null	(revision a90e01867d55ea477df846797199977cf4a38620)
@@ -1,2061 +0,0 @@
-Index: bin/.gitignore
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>/Server/\r\n/logic/\r\n/client/\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/bin/.gitignore b/bin/.gitignore
---- a/bin/.gitignore	
-+++ b/bin/.gitignore	
-@@ -1,3 +1,3 @@
--/Server/
- /logic/
--/client/
-+/biteme/
-+/common/
-Index: src/biteme/server/RestaurantApiService.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package biteme.server;\r\n\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\n\r\nimport com.google.gson.JsonElement;\r\nimport logic.Category;\r\nimport logic.Item;\r\nimport logic.Menu;\r\nimport logic.Options;\r\nimport logic.Restaurant;\r\n\r\n/**\r\n * BiteMe\r\n *\r\n * <p>\r\n * No description provided (generated by Swagger Codegen\r\n * https://github.com/swagger-api/swagger-codegen)\r\n *\r\n */\r\npublic class RestaurantApiService {\r\n\r\n\t/**\r\n\t * Get approved restaurants for the specific location\r\n\t *\r\n\t */\r\n\t@SuppressWarnings(\"resource\")\r\n\tpublic static void getRestaurants(String area, Response response, String type) {\r\n\t\tPreparedStatement stmt;\r\n\t\tArrayList<Restaurant> restaurants = new ArrayList<>();\r\n\t\tRestaurant restaurant = null;\r\n\t\ttry {\r\n\t\t\tstmt = EchoServer.con.prepareStatement(\r\n\t\t\t\t\t\"SELECT * FROM restaurant biteme.restaurant WHERE restaurant.IsApproved = 1\" + area + type + \";\");\r\n\t\t\tResultSet rs = stmt.executeQuery();\r\n\t\t\twhile (rs.next()) {\r\n\t\t\t\trestaurant = new Restaurant(rs.getInt(QueryConsts.RESTAURANT_ID),\r\n\t\t\t\t\t\trs.getBoolean(QueryConsts.RESTAURANT_IS_APPROVED),\r\n\t\t\t\t\t\trs.getInt(QueryConsts.RESTAURANT_BRANCH_MANAGER_ID), rs.getString(QueryConsts.RESTAURANT_NAME),\r\n\t\t\t\t\t\trs.getString(QueryConsts.RESTAURANT_AREA), rs.getString(QueryConsts.RESTAURANT_TYPE),\r\n\t\t\t\t\t\trs.getString(QueryConsts.RESTAURANT_USER_NAME), rs.getString(QueryConsts.RESTAURANT_PHOTO),\r\n\t\t\t\t\t\trs.getString(QueryConsts.RESTAURANT_ADDRESS), rs.getString(QueryConsts.RESTAURANT_DESCRIPTION));\r\n\t\t\t\trestaurants.add(restaurant);\r\n\t\t\t}\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\tresponse.setCode(200);\r\n\t\tresponse.setDescription(\r\n\t\t\t\t\"Success in fetching restaurants -> Arad:\" + area + \", type: \" + (type.equals(\"\") ? \"All\" : type));\r\n\t\tresponse.setBody(restaurants);\r\n\t}\r\n\r\n\tpublic static void getAllRestaurants(String area, Response response) {\r\n\t\tgetRestaurants(\"and restaurant.Area = \" + area, response, \"\");\r\n\t}\r\n\r\n\t/**\r\n\t * Get restaurants for the specific location\r\n\t *\r\n\t */\r\n\tpublic static void getRestaurantsByType(String area, String type, Response response) {\r\n\t\tgetRestaurants(\"and restaurant.Area = \" + area, response, \"and restaurant.Type = \" + type);\r\n\t}\r\n\r\n\t/**\r\n\t * Get all categories\r\n\t *\r\n\t * This can only be done by the logged in supplier.\r\n\t *\r\n\t */\r\n\tpublic static void getAllCategories(int restaurantID, Response response) {\r\n\t\tPreparedStatement stmt;\r\n\t\tArrayList<Category> categories = new ArrayList<>();\r\n\t\tHashMap<String, ArrayList<String>> cat = new HashMap<>();\r\n\t\tCategory category = null;\r\n\t\ttry {\r\n\t\t\tstmt = EchoServer.con\r\n\t\t\t\t\t.prepareStatement(\"SELECT DISTINCT (items.category, items.subCategory) FROM items biteme.item\"\r\n\t\t\t\t\t\t\t+ \" WHERE items.restaurantNID = ?;\");\r\n\t\t\tstmt.setInt(1, restaurantID);\r\n\t\t\tResultSet rs = stmt.executeQuery();\r\n\t\t\twhile (rs.next()) {\r\n\t\t\t\tif (cat.containsKey(rs.getString(1))) {\r\n\t\t\t\t\tcat.get(rs.getString(1)).add(rs.getString(2));\r\n\t\t\t\t} else {\r\n\t\t\t\t\tArrayList<String> newCategory = new ArrayList<>();\r\n\t\t\t\t\tnewCategory.add(rs.getString(2));\r\n\t\t\t\t\tcat.put(rs.getString(1), newCategory);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor (String category2 : cat.keySet()) {\r\n\t\t\t\tcategory = new Category(category2);\r\n\r\n\t\t\t\tfor (String category3 : cat.get(category2)) {\r\n\t\t\t\t\tcategory.getSubCategory().add(category3);\r\n\t\t\t\t}\r\n\t\t\t\tcategories.add(category);\r\n\t\t\t}\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\tresponse.setCode(200);\r\n\t\tresponse.setDescription(\"Success in fetching categories for restaurantID\" + Integer.toString(restaurantID));\r\n\t\tresponse.setBody(categories.toArray());\r\n\t}\r\n\r\n\t/**\r\n\t * Getting list of all related items\r\n\t *\r\n\t * This can only be done by the logged in supplier.\r\n\t *\r\n\t */\r\n\tpublic static void allItems(int restaurantID, Response response) {\r\n\t\tPreparedStatement stmt;\r\n\t\tArrayList<Item> items = new ArrayList<>();\r\n\t\tArrayList<Options> options = new ArrayList<>();\r\n\t\tItem item = null;\r\n\t\ttry {\r\n\t\t\tstmt = EchoServer.con.prepareStatement(\"SELECT * FROM items biteme.item, itemInMenu biteme.item_in_menu\"\r\n\t\t\t\t\t+ \" WHERE items.RestaurantID = ? and itemInMenu.ItemID = items.ItemID and\"\r\n\t\t\t\t\t+ \"itemInMenu.RestaurantID = ?;\");\r\n\t\t\tstmt.setInt(1, restaurantID);\r\n\t\t\tstmt.setInt(2, restaurantID);\r\n\t\t\tstmt.executeQuery();\r\n\t\t\tResultSet rs = stmt.getResultSet();\r\n\t\t\twhile (rs.next()) {\r\n\t\t\t\titem = new Item(rs.getString(QueryConsts.ITEM_CATEGORY), rs.getString(QueryConsts.ITEM_SUB_CATEGORY),\r\n\t\t\t\t\t\trs.getInt(QueryConsts.ITEM_ID), rs.getInt(QueryConsts.ITEM_RES_ID),\r\n\t\t\t\t\t\trs.getString(QueryConsts.ITEM_NAME), rs.getFloat(QueryConsts.ITEM_PRICE),\r\n\t\t\t\t\t\trs.getString(QueryConsts.ITEM_DESCRIPTION), rs.getString(QueryConsts.ITEM_INGREDIENTS), null,\r\n\t\t\t\t\t\trs.getString(QueryConsts.ITEM_IMAGE), 0);\r\n\t\t\t\tstmt = EchoServer.con\r\n\t\t\t\t\t\t.prepareStatement(\"SELECT * FROM options biteme.optional_category WHERE options.itemID = ?;\");\r\n\t\t\t\tstmt.setInt(1, item.getItemID());\r\n\t\t\t\tstmt.executeQuery();\r\n\t\t\t\tResultSet rs2 = stmt.getResultSet();\r\n\t\t\t\twhile (rs2.next()) {\r\n\t\t\t\t\toptions.add(new Options(rs2.getString(QueryConsts.OPTIONAL_TYPE),\r\n\t\t\t\t\t\t\trs2.getString(QueryConsts.OPTIONAL_SPECIFY), rs2.getInt(QueryConsts.OPTIONAL_ITEM_ID)));\r\n\t\t\t\t}\r\n\t\t\t\titem.setOptions((Options[]) options.toArray());\r\n\t\t\t\toptions.clear();\r\n\t\t\t\titems.add(item);\r\n\t\t\t}\r\n\t\t} catch (SQLException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t\tresponse.setCode(200);\r\n\t\tresponse.setDescription(\"Success in fetching all restaurant itesm\" + Integer.toString(restaurantID));\r\n\t\tresponse.setBody(items.toArray());\r\n\t}\r\n\r\n\t/**\r\n\t * Get all menus\r\n\t *\r\n\t * This can only be done by the logged in supplier.\r\n\t *\r\n\t */\r\n\tpublic static void allMenues(int restaurantID, Response response) {\r\n\t\tResultSet rs1, rs2, rs3;\r\n\t\tArrayList<Menu> menus = new ArrayList<>();\r\n\t\tArrayList<Item> items = new ArrayList<>();\r\n\t\tArrayList<Options> options = new ArrayList<>();\r\n\t\tMenu mtemp;\r\n\t\tItem itemp;\r\n\t\tOptions otemp;\r\n\r\n\t\ttry {\r\n\t\t\tPreparedStatement getMenus = EchoServer.con\r\n\t\t\t\t\t.prepareStatement(\"SELECT * FROM biteme.menu WHERE RestaurantID = ?\");\r\n\t\t\tgetMenus.setInt(1, restaurantID);\r\n\t\t\tgetMenus.execute();\r\n\t\t\trs1 = getMenus.getResultSet();\r\n\r\n\t\t\twhile (rs1.next()) {\r\n\t\t\t\tmtemp = new Menu(rs1.getString(2), restaurantID);\r\n\r\n\t\t\t\tPreparedStatement getItems = EchoServer.con\r\n\t\t\t\t\t\t.prepareStatement(\"SELECT I.* FROM biteme.item_in_menu IIM, biteme.item I WHERE \"\r\n\t\t\t\t\t\t\t\t+ \"IIM.RestaurantID = ? AND IIM.MenuName = ? AND IIM.ItemID = I.ItemID\"\r\n\t\t\t\t\t\t\t\t+ \"AND IIM.RestaurantID = I.RestaurantID\");\r\n\t\t\t\tgetItems.setInt(1, restaurantID);\r\n\t\t\t\tgetItems.setString(2, mtemp.getName());\r\n\t\t\t\tgetItems.execute();\r\n\t\t\t\trs2 = getItems.getResultSet();\r\n\r\n\t\t\t\twhile (rs2.next()) {\r\n\r\n\t\t\t\t\titemp = new Item(rs2.getString(QueryConsts.ITEM_CATEGORY),\r\n\t\t\t\t\t\t\trs2.getString(QueryConsts.ITEM_SUB_CATEGORY), rs2.getInt(QueryConsts.ITEM_ID),\r\n\t\t\t\t\t\t\trs2.getInt(QueryConsts.ITEM_RES_ID), rs2.getString(QueryConsts.ITEM_NAME),\r\n\t\t\t\t\t\t\trs2.getFloat(QueryConsts.ITEM_PRICE), rs2.getString(QueryConsts.ITEM_DESCRIPTION),\r\n\t\t\t\t\t\t\trs2.getString(QueryConsts.ITEM_INGREDIENTS), null, rs2.getString(QueryConsts.ITEM_IMAGE),\r\n\t\t\t\t\t\t\t0);\r\n\r\n\t\t\t\t\t// get optional for each item\r\n\r\n\t\t\t\t\tPreparedStatement getOptions = EchoServer.con\r\n\t\t\t\t\t\t\t.prepareStatement(\"SELECT * FROM biteme.optional_category WHERE itemID = ?\");\r\n\t\t\t\t\tgetOptions.setInt(1, itemp.getItemID());\r\n\t\t\t\t\tgetOptions.execute();\r\n\t\t\t\t\trs3 = getOptions.getResultSet();\r\n\r\n\t\t\t\t\twhile (rs3.next()) {\r\n\t\t\t\t\t\totemp = new Options(rs3.getString(QueryConsts.OPTIONAL_TYPE),\r\n\t\t\t\t\t\t\t\trs3.getString(QueryConsts.OPTIONAL_SPECIFY), itemp.getItemID());\r\n\r\n\t\t\t\t\t\toptions.add(otemp);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// from ArrayList<T> to T[]\r\n\r\n\t\t\t\t\titemp.setOptions(options.toArray(new Options[0]));\r\n\r\n\t\t\t\t\titems.add(itemp);\r\n\r\n\t\t\t\t\toptions.clear();\r\n\t\t\t\t}\r\n\t\t\t\tmtemp.setItems(items.toArray(new Item[0]));\r\n\r\n\t\t\t\tmenus.add(mtemp);\r\n\r\n\t\t\t}\r\n\r\n\t\t} catch (SQLException e) {\r\n\t\t\tresponse.setCode(405);\r\n\t\t\tresponse.setDescription(\"Invalid input\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Approve order\r\n\t *\r\n\t * This can only be done by the logged in supplier.\r\n\t *\r\n\t */\r\n\tpublic static void approveOrder(int orderId, Response response) {\r\n\t\tResultSet rs;\r\n\t\ttry {\r\n\t\t\tPreparedStatement approveOrder = EchoServer.con\r\n\t\t\t\t\t.prepareStatement(\"UPDATE biteme.order AS orders SET isApproved = 1 WHERE order.OrderNum = ?;\");\r\n\t\t\tapproveOrder.setInt(1, orderId);\r\n\t\t\tapproveOrder.execute();\r\n\t\t\trs = approveOrder.getResultSet();\r\n\t\t\tif (rs.rowUpdated() == false) {\r\n\t\t\t\tthrow new SQLException(\"couldn't approve order \" + Integer.toString(orderId));\r\n\t\t\t}\r\n\t\t\tDateTimeFormatter dtf = DateTimeFormatter.ofPattern(\"HH:mm:ss\");\r\n\t\t\tLocalDateTime now = LocalDateTime.now();\r\n\t\t\tPreparedStatement updateApprovalTime = EchoServer.con\r\n\t\t\t\t\t.prepareStatement(\"UPDATE biteme.order AS orders SET approve_time = ? WHERE order.OrderNum = ?;\");\r\n\t\t\tupdateApprovalTime.setString(1, dtf.format(now));\r\n\t\t\tupdateApprovalTime.setInt(2, orderId);\r\n\t\t\tupdateApprovalTime.execute();\r\n\t\t\trs = updateApprovalTime.getResultSet();\r\n\t\t\tif (rs.rowUpdated() == false) {\r\n\t\t\t\tthrow new SQLException(\"couldn't update the time in menu\" + Integer.toString(orderId));\r\n\t\t\t}\r\n\t\t} catch (SQLException e) {\r\n\t\t\tresponse.setCode(400);\r\n\t\t\tresponse.setDescription(e.getMessage());\r\n\t\t\tresponse.setBody(null);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tresponse.setCode(200);\r\n\t\tresponse.setDescription(\"Success in approve order \" + Integer.toString(orderId));\r\n\t\tresponse.setBody(null);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Create item\r\n\t *\r\n\t * This can only be done by the logged in supplier.\r\n\t *\r\n\t */\r\n\tpublic static void createItem(Item item, Response response) {\r\n\t\tResultSet rs = null;\r\n\t\tint itemID;\r\n\t\ttry {\r\n\r\n\t\t\tPreparedStatement postItem = EchoServer.con\r\n\t\t\t\t\t.prepareStatement(\"INSERT INTO items biteme.item (Category, SubCategory, Name, Price, Ingredients,\"\r\n\t\t\t\t\t\t\t+ \"RestaurantID, Image, Description)\"\r\n\t\t\t\t\t\t\t+ \" VALUES (?,?,?,?,?,?,?,?);SELECT last_insert_id();\");\r\n\t\t\tpostItem.setString(1, item.getCategory());\r\n\t\t\tpostItem.setString(2, item.getSubcategory());\r\n\t\t\tpostItem.setString(3, item.getName());\r\n\t\t\tpostItem.setFloat(4, item.getPrice());\r\n\t\t\tpostItem.setString(5, item.getIngrediants());\r\n\t\t\tpostItem.setInt(6, item.getRestaurantID());\r\n\t\t\tpostItem.setString(7, item.getPhoto());\r\n\t\t\tpostItem.setString(8, item.getDescription());\r\n\t\t\tpostItem.execute();\r\n\t\t\trs = postItem.getResultSet();\r\n\t\t\titemID = rs.getInt(1);\r\n\r\n\t\t\tPreparedStatement postOptions = EchoServer.con.prepareStatement(\r\n\t\t\t\t\t\"INSERT INTO biteme.optional_category (OptionalType, Specify, ItemID)\" + \" VALUES (?,?,?);\");\r\n\t\t\tpostOptions.setInt(3, itemID);\r\n\t\t\t\r\n\t\t\tfor (Options temp : item.getOptions()) {\r\n\t\t\t\ttry {\t//just in case\r\n\t\t\t\t\tpostOptions.setString(1, temp.getOption_category());\r\n\t\t\t\t\tpostOptions.setString(2, temp.getSpecify_option());\r\n\t\t\t\t\tpostOptions.execute();\r\n\t\t\t\t} catch (SQLException e) {}\r\n\t\t\t}\r\n\r\n\t\t} catch (SQLException e) {\r\n\t\t\tif (e.getErrorCode() == 1062) {\r\n\t\t\t\tresponse.setCode(405);\r\n\t\t\t\tresponse.setDescription(\"Item already exist in the restaurant\");\r\n\t\t\t}\r\n\t\t\tresponse.setCode(401);\r\n\t\t\tresponse.setDescription(\"Invalid input\");\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tresponse.setCode(200);\r\n\t\tresponse.setDescription(\"Success in creating a new item -> itemID:\" + Integer.toString(itemID));\r\n\t}\r\n\r\n\t/**\r\n\t * Create menu\r\n\t *\r\n\t * This can only be done by the logged in supplier.\r\n\t *\r\n\t */\r\n\t///////////////////////////////////////////////////////////// Create menu should get menu(with list of items in the menu) and item_in_menu[] object\r\n\tpublic static void createMenu(Menu body) {\r\n\t\t// TODO: Implement...\r\n\t\t\r\n\t}\r\n\r\n\t/**\r\n\t * Edit menu\r\n\t *\r\n\t * This can only be done by the logged in supplier/moderator\r\n\t *\r\n\t */\r\n\tpublic static void editMenu(Menu body) {\r\n\t\t// TODO: Implement...\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Delete item\r\n\t *\r\n\t * This can only be done by the logged in supplier.\r\n\t *\r\n\t */\r\n\tpublic static void itemsDelete(int itemID, Response response) {\r\n\t\ttry {\r\n\t\t\tPreparedStatement deleteItem = EchoServer.con\r\n\t\t\t\t\t.prepareStatement(\"DELETE FROM items biteme.item WHERE items.ItemID = ?;\");\r\n\t\t\tdeleteItem.setInt(1, itemID);\r\n\t\t\t// Its the first userName that he had so the test is in users table on login\r\n\t\t\tdeleteItem.execute();\r\n\t\t\tdeleteItem.getResultSet();\r\n\t\t} catch (SQLException e) {\r\n\t\t\tresponse.setCode(400);\r\n\t\t\tresponse.setDescription(\"Fields are missing\");\r\n\t\t\tresponse.setBody(null);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tresponse.setCode(200);\r\n\t\tresponse.setDescription(\"Success in deleting an item -> itemID: \" + itemID);\r\n\t\tresponse.setBody(null);\r\n\t}\r\n\r\n\t/**\r\n\t * Get credit for the user\r\n\t *\r\n\t * This can only be done by the logged in supplier.\r\n\t *\r\n\t */\r\n\tpublic static void getCredit(String userName, int restaurantID, Response response) {\r\n\t\tResultSet rs;\r\n\t\tPreparedStatement getCredit;\r\n\t\tDouble sendCredit;\r\n\t\ttry {\r\n\t\t\tgetCredit = EchoServer.con.prepareStatement(\r\n\t\t\t\t\t\"SELECT  credit.AmountInCredit FROM credit biteme.credit WHERE credit.UserName = ? and \"\r\n\t\t\t\t\t\t\t+ \"credit.RestaurantID = ?;\");\r\n\t\t\tgetCredit.setString(1, userName);\r\n\t\t\tgetCredit.setInt(2, restaurantID);\r\n\t\t\tgetCredit.execute();\r\n\t\t\trs = getCredit.getResultSet();\r\n\t\t\tsendCredit = rs.getDouble(1);\r\n\t\t} catch (SQLException e) {\r\n\t\t\tresponse.setCode(405);\r\n\t\t\tresponse.setDescription(\"Couldn't get credit for the user -> UserName: \" + userName + \", RestaurantID: \"\r\n\t\t\t\t\t+ Integer.toString(restaurantID));\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tresponse.setCode(200);\r\n\t\tresponse.setDescription(\"Success in getting credit for the user -> UserName: \" + userName + \", RestaurantID: \"\r\n\t\t\t\t+ Integer.toString(restaurantID));\r\n\t\tJsonElement setCredit = EchoServer.gson.toJsonTree(new Object());\r\n\t\tsetCredit.getAsJsonObject().addProperty(\"credit\", sendCredit);\r\n\t\tresponse.setBody(EchoServer.gson.toJson(setCredit));\r\n\t\treturn;\r\n\t}\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/src/biteme/server/RestaurantApiService.java b/src/biteme/server/RestaurantApiService.java
---- a/src/biteme/server/RestaurantApiService.java	
-+++ b/src/biteme/server/RestaurantApiService.java	
-@@ -14,6 +14,7 @@
- import logic.Menu;
- import logic.Options;
- import logic.Restaurant;
-+import logic.item_in_menu;
- 
- /**
-  * BiteMe
-@@ -189,18 +190,14 @@
- 				getItems.setString(2, mtemp.getName());
- 				getItems.execute();
- 				rs2 = getItems.getResultSet();
--
- 				while (rs2.next()) {
--
- 					itemp = new Item(rs2.getString(QueryConsts.ITEM_CATEGORY),
- 							rs2.getString(QueryConsts.ITEM_SUB_CATEGORY), rs2.getInt(QueryConsts.ITEM_ID),
- 							rs2.getInt(QueryConsts.ITEM_RES_ID), rs2.getString(QueryConsts.ITEM_NAME),
- 							rs2.getFloat(QueryConsts.ITEM_PRICE), rs2.getString(QueryConsts.ITEM_DESCRIPTION),
- 							rs2.getString(QueryConsts.ITEM_INGREDIENTS), null, rs2.getString(QueryConsts.ITEM_IMAGE),
- 							0);
--
- 					// get optional for each item
--
- 					PreparedStatement getOptions = EchoServer.con
- 							.prepareStatement("SELECT * FROM biteme.optional_category WHERE itemID = ?");
- 					getOptions.setInt(1, itemp.getItemID());
-@@ -222,7 +219,7 @@
- 
- 					options.clear();
- 				}
--				mtemp.setItems(items.toArray(new Item[0]));
-+				mtemp.setItems(items.toArray());
- 
- 				menus.add(mtemp);
- 
-@@ -334,7 +331,7 @@
- 	 *
- 	 */
- 	///////////////////////////////////////////////////////////// Create menu should get menu(with list of items in the menu) and item_in_menu[] object
--	public static void createMenu(Menu body) {
-+	public static void createMenu(String menuName, int restaurantID, item_in_menu[] items) {
- 		// TODO: Implement...
- 		
- 	}
-@@ -345,7 +342,7 @@
- 	 * This can only be done by the logged in supplier/moderator
- 	 *
- 	 */
--	public static void editMenu(Menu body) {
-+	public static void editMenu(String menuName, int restaurantID, item_in_menu[] items) {
- 		// TODO: Implement...
- 
- 	}
-Index: src/client/ask.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package client;\r\n\r\nimport java.util.Random;\r\n\r\nimport com.google.gson.Gson;\r\n\r\npublic class ask {\r\n\tpublic static void main(String[] args) {\r\n//\t\tOrder o = new Order(2, 0, null, null, 0, null, null, 0, null, 0, false, null, null);\r\n//\t\tOrder r = new Order(2, 0, \"steak\", null, 0, null, null, 0, null, 0, false, null, null);\r\n\t\tOrderB b = new OrderB(\"steak\", \"19:50\", 7.5,\"first\");\r\n\t\tOrderC c = new OrderC(5, 7, \"steak\", \"19:50\", 5, null, \"takeAway\", 1, null, 0, false, \"Second\");\r\n\t\tGson gson = new Gson();\r\n//\t\tmenuInRes y = new menuInRes();\r\n//\t\ty[0] = o;\r\n//\t\ty[1] = r;\r\n\t\tRequest req = new Request();\r\n\t\treq.setPath(\"/register\");\r\n\t\treq.setMethod(\"POST\");\r\n\t\t\r\n//\t\tJsonElement v = gson.toJsonTree(c);\r\n//\t\tJsonElement j = gson.toJsonTree(new Object());\r\n//\t\tj.getAsJsonObject().addProperty(\"path\", \"/returants/menus\");\r\n//\t\tj.getAsJsonObject().addProperty(\"method\", \"POST\");\r\n//\t\tj.getAsJsonObject().add(\"body\",v);\r\n//\t\tString p = gson.toJson(a);\r\n//\t\tJsonElement res = gson.toJsonTree(b);\r\n//\t\tJsonElement sup = gson.toJsonTree(c);\r\n//\t\tJsonElement mode = gson.toJsonTree(c);\r\n//\t\tJsonElement a = gson.toJsonTree(new Object());\r\n//\t\ta.getAsJsonObject().add(\"restaurant\", res);\r\n//\t\ta.getAsJsonObject().add(\"supplier\", sup);\r\n//\t\ta.getAsJsonObject().add(\"moderator\", mode);\r\n//\t\treq.setBody(a);\r\n//\t\tSystem.out.println(gson.toJson(req));\r\n\t\t//\t\t\r\n//\t\tResponse k = gson.fromJson(p, Response.class);\r\n//\t\tJsonElement h = gson.toJsonTree(k.getBody());\r\n//\t\tSystem.out.println(\"restu name is \" +gson.fromJson(h.getAsJsonObject().get(\"restaurantName\"), String.class));\r\n//\t\tSystem.out.println(\"Body   \" + k.getBody());\r\n////\t\tJsonObject m = gson.fromJson(p, JsonObject.class);\r\n////\t\tOrder l = gson.fromJson(p, Order.class);\r\n////\t\tOrderB n = gson.fromJson(p, OrderB.class);\r\n////\t\tSystem.out.println(\"Order l   \" + l.toString());\r\n////\t\tSystem.out.println(\"Order n   \" + n.toString());\r\n//\t\tSystem.out.println(p);\r\n//\t\tSystem.out.println(\"The jsonObject as toJson is: \" + gson.toJson(m));\r\n//\t\tOrder[] a = gson.fromJson(j.getAsJsonObject().get(\"body\"),Order[].class);\r\n//\t\tSystem.out.println(\"Order a   \" + Arrays.toString(a));\r\n//\t\t\r\n//\t\tSystem.out.println(j.toString());\r\n//\t\tSystem.out.println(gson.toJson(j));\t\r\n\t\tSystem.out.println(getRandomHexString(20));\r\n\t}\r\n\t\r\n\t public static String getRandomHexString(int numchars){\r\n\t        Random r = new Random();\r\n\t        StringBuffer sb = new StringBuffer();\r\n\t        while(sb.length() < numchars){\r\n\t            sb.append(Integer.toHexString(r.nextInt()));\r\n\t        }\r\n\r\n\t        return sb.toString().substring(0, numchars);\r\n\t    }\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/src/client/ask.java b/src/client/ask.java
---- a/src/client/ask.java	
-+++ b/src/client/ask.java	
-@@ -1,23 +1,45 @@
- package client;
- 
-+import java.util.HashMap;
-+import java.util.Map;
- import java.util.Random;
- 
- import com.google.gson.Gson;
-+import com.google.gson.JsonElement;
- 
- public class ask {
- 	public static void main(String[] args) {
- //		Order o = new Order(2, 0, null, null, 0, null, null, 0, null, 0, false, null, null);
- //		Order r = new Order(2, 0, "steak", null, 0, null, null, 0, null, 0, false, null, null);
--		OrderB b = new OrderB("steak", "19:50", 7.5,"first");
--		OrderC c = new OrderC(5, 7, "steak", "19:50", 5, null, "takeAway", 1, null, 0, false, "Second");
--		Gson gson = new Gson();
--//		menuInRes y = new menuInRes();
--//		y[0] = o;
--//		y[1] = r;
--		Request req = new Request();
--		req.setPath("/register");
--		req.setMethod("POST");
--		
-+		        Map<String,String> map = new HashMap<>();
-+		        //You can convert any Object.
-+		        OrderC c = new OrderC(5, 7, "steak", "19:50", 5,
-+		                null, "takeAway", 1, null, 0,
-+		                false, "Second");
-+		        OrderC a = new OrderC(7, 7, "steak", "19:50", 5,
-+		                null, "delivery", 1, null, 0,
-+		                false, "Second");
-+		        OrderC h = new OrderC(5, 5, "steak", "19:50", 5,
-+		                null, "takeAway", 1, null, 0,
-+		                false, "Second");
-+		        OrderC i = new OrderC(7, 5, "steak", "19:50", 5,
-+		                null, "delivery", 1, null, 0,
-+		                false, "Second");
-+		        Gson gson = new Gson();
-+				OrderC[] y = new OrderC[2];
-+		        y[0] = c;
-+				y[1] = a;
-+		        OrderC[] p = new OrderC[2];
-+		        p[0] = h;
-+		        p[1] = i;
-+		        JsonElement o = gson.toJsonTree(y);
-+		        JsonElement k = gson.toJsonTree(p);
-+		        map.put("5", gson.toJson(o));
-+		        map.put("7", gson.toJson(k));
-+		        System.out.println(gson.toJson(map));
-+		        
-+		        Map<String,String> testi = gson.fromJson(gson.toJson(map), HashMap.class);
-+		        System.out.println(testi);
- //		JsonElement v = gson.toJsonTree(c);
- //		JsonElement j = gson.toJsonTree(new Object());
- //		j.getAsJsonObject().addProperty("path", "/returants/menus");
-Index: src/logic/BusinessAccount.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package logic;\r\n\r\npublic class BusinessAccount extends Account {\r\n\r\n\tprivate float monthlyBillingCeiling;\r\n\tprivate Boolean isApproved;\r\n\tprivate String businessName;\r\n\tprivate float currentSpent;\r\n\t\r\n\tpublic BusinessAccount(int userID, String userName, String password, String firstName, String lastName,\r\n\t\t\tString email, String role, String phone, String status, boolean isBusiness, int branch_manager_ID,\r\n\t\t\tString area, int debt, String w4c_card, float monthlyBillingCeiling, Boolean isApproved, String businessName,\r\n\t\t\tfloat currentSpent) {\r\n\t\tsuper(userID, userName, password, firstName, lastName, email, role, phone, status, isBusiness,\r\n\t\t\t\tbranch_manager_ID, area, debt, w4c_card);\r\n\t\tthis.monthlyBillingCeiling = monthlyBillingCeiling;\r\n\t\tthis.isApproved = isApproved;\r\n\t\tthis.businessName = businessName;\r\n\t\tthis.currentSpent = currentSpent;\r\n\t}\r\n\t\r\n\tpublic float getMonthlyBillingCeiling() {\r\n\t\treturn monthlyBillingCeiling;\r\n\t}\r\n\tpublic void setMonthlyBillingCeiling(int monthlyBillingCeiling) {\r\n\t\tthis.monthlyBillingCeiling = monthlyBillingCeiling;\r\n\t}\r\n\tpublic Boolean getIsApproved() {\r\n\t\treturn isApproved;\r\n\t}\r\n\tpublic void setIsApproved(Boolean isApproved) {\r\n\t\tthis.isApproved = isApproved;\r\n\t}\r\n\tpublic String getBusinessName() {\r\n\t\treturn businessName;\r\n\t}\r\n\tpublic void setBusinessName(String businessName) {\r\n\t\tthis.businessName = businessName;\r\n\t}\r\n\tpublic float getCurrentSpent() {\r\n\t\treturn currentSpent;\r\n\t}\r\n\tpublic void setCurrentSpent(float currentSpent) {\r\n\t\tthis.currentSpent = currentSpent;\r\n\t}\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/src/logic/BusinessAccount.java b/src/logic/BusinessAccount.java
---- a/src/logic/BusinessAccount.java	
-+++ b/src/logic/BusinessAccount.java	
-@@ -2,14 +2,14 @@
- 
- public class BusinessAccount extends Account {
- 
--	private float monthlyBillingCeiling;
-+	private int monthlyBillingCeiling;
- 	private Boolean isApproved;
- 	private String businessName;
- 	private float currentSpent;
- 	
- 	public BusinessAccount(int userID, String userName, String password, String firstName, String lastName,
- 			String email, String role, String phone, String status, boolean isBusiness, int branch_manager_ID,
--			String area, int debt, String w4c_card, float monthlyBillingCeiling, Boolean isApproved, String businessName,
-+			String area, int debt, String w4c_card, int monthlyBillingCeiling, Boolean isApproved, String businessName,
- 			float currentSpent) {
- 		super(userID, userName, password, firstName, lastName, email, role, phone, status, isBusiness,
- 				branch_manager_ID, area, debt, w4c_card);
-@@ -19,7 +19,7 @@
- 		this.currentSpent = currentSpent;
- 	}
- 	
--	public float getMonthlyBillingCeiling() {
-+	public int getMonthlyBillingCeiling() {
- 		return monthlyBillingCeiling;
- 	}
- 	public void setMonthlyBillingCeiling(int monthlyBillingCeiling) {
-Index: src/logic/Restaurant.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package logic;\r\n\r\npublic class Restaurant {\r\n\tprivate int ID;\r\n\tprivate boolean isApproved;\r\n\tprivate int BranchManagerID;\r\n\tprivate String name;\r\n\tprivate String area;\r\n\tprivate String type;\r\n\tprivate String userName; /// Supplier or Moderator\r\n\tprivate String photo;\r\n\tprivate String address;\r\n\tprivate String description;\r\n\t\r\n\tpublic Restaurant(int iD, boolean isApproved, int branchManagerID, String name, String area, String type,\r\n\t\t\tString userName, String photo, String address, String description) {\r\n\t\tsuper();\r\n\t\tID = iD;\r\n\t\tthis.isApproved = isApproved;\r\n\t\tBranchManagerID = branchManagerID;\r\n\t\tthis.name = name;\r\n\t\tthis.area = area;\r\n\t\tthis.type = type;\r\n\t\tthis.userName = userName;\r\n\t\tthis.photo = photo;\r\n\t\tthis.address = address;\r\n\t\tthis.description = description;\r\n\t}\r\n\r\n\tpublic int getID() {\r\n\t\treturn ID;\r\n\t}\r\n\r\n\tpublic void setID(int iD) {\r\n\t\tID = iD;\r\n\t}\r\n\r\n\tpublic boolean isApproved() {\r\n\t\treturn isApproved;\r\n\t}\r\n\r\n\tpublic void setApproved(boolean isApproved) {\r\n\t\tthis.isApproved = isApproved;\r\n\t}\r\n\r\n\tpublic int getBranchManagerID() {\r\n\t\treturn BranchManagerID;\r\n\t}\r\n\r\n\tpublic void setBranchManagerID(int branchManagerID) {\r\n\t\tBranchManagerID = branchManagerID;\r\n\t}\r\n\r\n\tpublic String getName() {\r\n\t\treturn name;\r\n\t}\r\n\r\n\tpublic void setName(String name) {\r\n\t\tthis.name = name;\r\n\t}\r\n\r\n\tpublic String getArea() {\r\n\t\treturn area;\r\n\t}\r\n\r\n\tpublic void setArea(String area) {\r\n\t\tthis.area = area;\r\n\t}\r\n\r\n\tpublic String getType() {\r\n\t\treturn type;\r\n\t}\r\n\r\n\tpublic void setType(String type) {\r\n\t\tthis.type = type;\r\n\t}\r\n\r\n\tpublic String getUserName() {\r\n\t\treturn userName;\r\n\t}\r\n\r\n\tpublic void setUserName(String userName) {\r\n\t\tthis.userName = userName;\r\n\t}\r\n\r\n\tpublic String getPhoto() {\r\n\t\treturn photo;\r\n\t}\r\n\r\n\tpublic void setPhoto(String photo) {\r\n\t\tthis.photo = photo;\r\n\t}\r\n\r\n\tpublic String getAddress() {\r\n\t\treturn address;\r\n\t}\r\n\r\n\tpublic void setAddress(String address) {\r\n\t\tthis.address = address;\r\n\t}\r\n\r\n\tpublic String getDescription() {\r\n\t\treturn description;\r\n\t}\r\n\r\n\tpublic void setDescription(String description) {\r\n\t\tthis.description = description;\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\r\n\t\t\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/src/logic/Restaurant.java b/src/logic/Restaurant.java
---- a/src/logic/Restaurant.java	
-+++ b/src/logic/Restaurant.java	
-@@ -1,7 +1,7 @@
- package logic;
- 
- public class Restaurant {
--	private int ID;
-+	private int id;
- 	private boolean isApproved;
- 	private int BranchManagerID;
- 	private String name;
-@@ -11,11 +11,10 @@
- 	private String photo;
- 	private String address;
- 	private String description;
--	
--	public Restaurant(int iD, boolean isApproved, int branchManagerID, String name, String area, String type,
--			String userName, String photo, String address, String description) {
--		super();
--		ID = iD;
-+
-+	public Restaurant(int id, boolean isApproved, int branchManagerID, String name,
-+					  String area, String type, String userName, String photo, String address, String description) {
-+		this.id = id;
- 		this.isApproved = isApproved;
- 		BranchManagerID = branchManagerID;
- 		this.name = name;
-@@ -27,20 +26,20 @@
- 		this.description = description;
- 	}
- 
--	public int getID() {
--		return ID;
-+	public int getId() {
-+		return id;
- 	}
- 
--	public void setID(int iD) {
--		ID = iD;
-+	public void setId(int id) {
-+		this.id = id;
- 	}
- 
- 	public boolean isApproved() {
- 		return isApproved;
- 	}
- 
--	public void setApproved(boolean isApproved) {
--		this.isApproved = isApproved;
-+	public void setApproved(boolean approved) {
-+		isApproved = approved;
- 	}
- 
- 	public int getBranchManagerID() {
-@@ -106,9 +105,4 @@
- 	public void setDescription(String description) {
- 		this.description = description;
- 	}
--	
--	
--	
--
--		
- }
-Index: src/biteme/server/BranchManagerApiService.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package biteme.server;\r\nimport java.util.List;\r\n\r\nimport logic.Account;\r\nimport logic.Restaurant;\r\n\r\n\r\n/**\r\n * BiteMe\r\n *\r\n * <p>No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)\r\n *\r\n */\r\npublic class BranchManagerApiService{\r\n    /**\r\n     * Get all the reports for the branch\r\n     *\r\n     * This can only be done by the logged in branch manager.\r\n     *\r\n     */\r\n    public static void getBranchOrders() {\r\n        // TODO: Implement...\r\n    \t\r\n    }\r\n    \r\n    /**\r\n     * Get the reports for the branch\r\n     *\r\n     * This can only be done by the logged in branch manager.\r\n     *\r\n     */\r\n    public static void getBranchReports(List<String> reportType) {\r\n        // TODO: Implement...\r\n        \r\n        \r\n    }\r\n    \r\n    /**\r\n     * Register a resturant - mind that the supplier shcema isn&#x27;t finish\r\n     *\r\n     * This can only be done by the logged in branch manager.\r\n     *\r\n     */\r\n    public static void registerSupplier(Restaurant body) {\r\n        // TODO: Implement...\r\n        \r\n        \r\n    } \r\n    /**\r\n     * Register a resturant - mind that the supplier shcema isn&#x27;t finish\r\n     *\r\n     * This can only be done by the logged in branch manager.\r\n     *\r\n     */\r\n    public static void registerPrivateAccount(Account body) {\r\n        // TODO: Implement...\r\n        \r\n        \r\n    } \r\n    /**\r\n     * Register a resturant - mind that the supplier shcema isn&#x27;t finish\r\n     *\r\n     * This can only be done by the logged in branch manager.\r\n     *\r\n     */\r\n    public static void registerBusinessAccount(Account body) {\r\n        // TODO: Implement...\r\n        \r\n        \r\n    }\r\n}\r\n\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/src/biteme/server/BranchManagerApiService.java b/src/biteme/server/BranchManagerApiService.java
---- a/src/biteme/server/BranchManagerApiService.java	
-+++ b/src/biteme/server/BranchManagerApiService.java	
-@@ -1,9 +1,12 @@
- package biteme.server;
-+import java.sql.PreparedStatement;
-+import java.sql.ResultSet;
-+import java.sql.SQLException;
-+import java.util.ArrayList;
-+import java.util.HashMap;
- import java.util.List;
--
--import logic.Account;
--import logic.Restaurant;
--
-+import java.util.Map;
-+import logic.*;
- 
- /**
-  * BiteMe
-@@ -18,9 +21,63 @@
-      * This can only be done by the logged in branch manager.
-      *
-      */
--    public static void getBranchOrders() {
--        // TODO: Implement...
--    	
-+    public static void getBranchOrders(int branchManagerID, Response response) {
-+        PreparedStatement stmt;
-+        ResultSet rs;
-+        Map<String, String> ordersByRestaurantID = new HashMap<>();
-+        int restaurantID;
-+        Order order = null;
-+        try {
-+            stmt = EchoServer.con.prepareStatement("SELECT * FROM restaurants biteme.restaurant WHERE " +
-+                    "restaurants.BranchManagerID = ?");
-+            stmt.setInt(1,branchManagerID);
-+            stmt.execute();
-+            rs = stmt.getResultSet();
-+            while(rs.next()){
-+                restaurantID = rs.getInt(1);
-+                OrderApiService.allOrders(restaurantID, response);
-+                ordersByRestaurantID.put(Integer.toString(restaurantID), (String) response.getBody());
-+            }
-+        }catch (SQLException e){
-+            response.setCode(400);
-+            response.setDescription("Fail in fetching all branch orders -> branch manager id: " + Integer.toString(branchManagerID));
-+        }
-+        response.setCode(200);
-+        response.setDescription("Success in fetching all branch orders -> branch manager id: " + Integer.toString(branchManagerID));
-+        response.setBody(EchoServer.gson.toJson(ordersByRestaurantID));
-+    }
-+
-+    /**
-+     * Get all the restaurants for the branch
-+     *
-+     * This can only be done by the logged in branch manager.
-+     *
-+     */
-+    public static void getBranchRestaurants(int branchManagerID, Response response) {
-+        PreparedStatement stmt;
-+        ResultSet rs;
-+        ArrayList<Restaurant> restaurants = new ArrayList<>();
-+        try {
-+            stmt = EchoServer.con.prepareStatement("SELECT * FROM restaurants biteme.restaurant WHERE " +
-+                    "restaurants.BranchManagerID = ?");
-+            stmt.setInt(1,branchManagerID);
-+            stmt.execute();
-+            rs = stmt.getResultSet();
-+            while(rs.next()){
-+                restaurants.add(new Restaurant(rs.getInt(QueryConsts.RESTAURANT_ID),
-+                        rs.getBoolean(QueryConsts.RESTAURANT_IS_APPROVED),
-+                        rs.getInt(QueryConsts.RESTAURANT_BRANCH_MANAGER_ID), rs.getString(QueryConsts.RESTAURANT_NAME),
-+                        rs.getString(QueryConsts.RESTAURANT_AREA),rs.getString(QueryConsts.RESTAURANT_TYPE),
-+                        rs.getString(QueryConsts.RESTAURANT_USER_NAME), rs.getString(QueryConsts.RESTAURANT_PHOTO),
-+                        rs.getString(QueryConsts.RESTAURANT_ADDRESS), rs.getString(QueryConsts.RESTAURANT_DESCRIPTION)));
-+            }
-+        }catch (SQLException e){
-+            response.setCode(400);
-+            response.setDescription("Fail in fetching all branch restaurants -> branch manager id: " + Integer.toString(branchManagerID));
-+        }
-+        response.setCode(200);
-+        response.setDescription("Success in fetching all branch restaurants -> branch manager id: " + Integer.toString(branchManagerID));
-+        response.setBody(restaurants.toArray());
-     }
-     
-     /**
-@@ -41,10 +98,53 @@
-      * This can only be done by the logged in branch manager.
-      *
-      */
--    public static void registerSupplier(Restaurant body) {
--        // TODO: Implement...
--        
--        
-+    public static void registerSupplier(int id, String userName, String role, Restaurant restaurant, Response response) {
-+        PreparedStatement stmt;
-+        ResultSet rs;
-+        ArrayList<Restaurant> restaurants = new ArrayList<>();
-+        try{
-+            stmt = EchoServer.con.prepareStatement("SELECT restaurants.RestaurantName FROM " +
-+                    "restaurants biteme.restaurant WHERE restaurants.UserName = ? and restaurants.RestaurantName = ?;");
-+            stmt.setString(1, userName);
-+            stmt.setString(2, restaurant.getName());
-+            stmt.execute();
-+            rs = stmt.getResultSet();
-+            if(rs.getFetchSize() == 0){
-+                throw new SQLException("Restaurant" + restaurant.getName() + " is already exist", "400", 400);
-+            }
-+        }catch (SQLException e){
-+            response.setCode(e.getErrorCode());
-+            response.setBody(e.getMessage());
-+            return;
-+        }
-+        try {
-+            stmt = EchoServer.con.prepareStatement("UPDATE biteme.account AS accounts SET Role = ? WHERE " +
-+                    "accounts.UserName = ? and accounts.UserID = ?;");
-+            stmt.setString(1, role);
-+            stmt.setString(2, userName);
-+            stmt.setInt(3, id);
-+            stmt.execute();
-+        }catch (SQLException e){}
-+            try {
-+                stmt = EchoServer.con.prepareStatement(
-+                        "INSERT INTO biteme.restaurant (RestaurantName, IsApproved, BranchManagerID, Area, Image, " +
-+                                "UserName, Type, Address, Description) VALUES (?,?,?,?,?,?,?,?,?);");
-+                stmt.setString(1, restaurant.getName());
-+                stmt.setBoolean(2, restaurant.isApproved());
-+                stmt.setInt(3, restaurant.getBranchManagerID());
-+                stmt.setString(4, restaurant.getArea());
-+                stmt.setString(5, restaurant.getPhoto());
-+                stmt.setString(5, restaurant.getUserName());
-+                stmt.setString(5, restaurant.getType());
-+                stmt.setString(5, restaurant.getAddress());
-+                stmt.setString(5, restaurant.getDescription());
-+                stmt.execute();
-+            } catch (SQLException ex){
-+                response.setCode(400);
-+                response.setDescription("Fail in registering a new restaurant -> role: " +role +", userName" + userName);
-+            }
-+        response.setCode(200);
-+        response.setDescription("Success in registering a new restaurant -> role: " +role +", userName" + userName);
-     } 
-     /**
-      * Register a resturant - mind that the supplier shcema isn&#x27;t finish
-@@ -52,10 +152,42 @@
-      * This can only be done by the logged in branch manager.
-      *
-      */
--    public static void registerPrivateAccount(Account body) {
--        // TODO: Implement...
--        
--        
-+    public static void registerPrivateAccount(PrivateAccount body, Response response) {
-+        PreparedStatement stmt;
-+        ResultSet rs;
-+        try {
-+            stmt = EchoServer.con.prepareStatement("UPDATE biteme.account AS accounts SET Role = ? WHERE " +
-+                    "accounts.UserName = ? and accounts.UserID = ?;");
-+            stmt.setString(1, "client");
-+            stmt.setString(1, body.getUserName());
-+            stmt.setInt(2, body.getUserID());
-+            stmt.execute();
-+            rs = stmt.getResultSet();
-+            if(rs.getFetchSize() == 0){
-+                throw new SQLException("Couldn't update " +body.getUserName() + " as " +body.getRole(), "400", 400);
-+            }
-+        }catch (SQLException e){
-+            response.setCode(e.getErrorCode());
-+            response.setBody(e.getMessage());
-+            return;
-+        }
-+        try {
-+            stmt = EchoServer.con.prepareStatement(
-+                    "INSERT INTO biteme.private_account (UserName, CreditCardNumber, CreditCardCVV, CreditCardEXP)"+
-+                            " VALUES (?,?,?,?);");
-+            stmt.setString(1, body.getUserName());
-+            stmt.setString(2, body.getCreditCardNumber());
-+            stmt.setString(3, body.getCreditCardCVV());
-+            stmt.setString(4, body.getCreditCardExpDate());
-+            stmt.execute();
-+        } catch (SQLException e){
-+            if(e.getErrorCode() == 1062){
-+                response.setCode(400);
-+                response.setDescription("Fail! Private account already exist -> userName: " + body.getUserName());
-+            }
-+        }
-+        response.setCode(200);
-+        response.setDescription("Success in registering a new private account -> userName: " + body.getUserName());
-     } 
-     /**
-      * Register a resturant - mind that the supplier shcema isn&#x27;t finish
-@@ -63,10 +195,44 @@
-      * This can only be done by the logged in branch manager.
-      *
-      */
--    public static void registerBusinessAccount(Account body) {
--        // TODO: Implement...
--        
--        
-+    public static void registerBusinessAccount(BusinessAccount body, Response response) {
-+        PreparedStatement stmt;
-+        ResultSet rs;
-+        //TODO check for approved business
-+        try {
-+            stmt = EchoServer.con.prepareStatement("UPDATE biteme.account AS accounts SET Role = ? WHERE " +
-+                    "accounts.UserName = ? and accounts.UserID = ?;");
-+            stmt.setString(1, "client");
-+            stmt.setString(1, body.getUserName());
-+            stmt.setInt(2, body.getUserID());
-+            stmt.execute();
-+            rs = stmt.getResultSet();
-+            if(rs.getFetchSize() == 0){
-+                throw new SQLException("Couldn't update " +body.getUserName() + " as " +body.getRole(), "400", 400);
-+            }
-+        }catch (SQLException e){
-+            response.setCode(e.getErrorCode());
-+            response.setBody(e.getMessage());
-+            return;
-+        }
-+        try {
-+            stmt = EchoServer.con.prepareStatement(
-+                    "INSERT INTO biteme.business_account (UserName, MonthlyBillingCeling, isApproved, BusinessName, CurrentSpent)"+
-+                            " VALUES (?,?,?,?,?);");
-+            stmt.setString(1, body.getUserName());
-+            stmt.setInt(2, body.getMonthlyBillingCeiling());
-+            stmt.setBoolean(3, body.getIsApproved());
-+            stmt.setString(4, body.getBusinessName());
-+            stmt.setFloat(5,0);
-+            stmt.execute();
-+        } catch (SQLException e){
-+            if(e.getErrorCode() == 1062){
-+                response.setCode(400);
-+                response.setDescription("Fail! Business account already exist -> userName: " + body.getUserName());
-+            }
-+        }
-+        response.setCode(200);
-+        response.setDescription("Success in registering a new business account -> userName: " + body.getUserName());
-     }
- }
- 
-Index: src/biteme/server/AccountApiService.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package biteme.server;\r\n\r\nimport java.sql.PreparedStatement;\r\nimport java.sql.ResultSet;\r\nimport java.sql.SQLException;\r\nimport java.util.ArrayList;\r\nimport java.util.Random;\r\n\r\nimport com.google.gson.JsonElement;\r\nimport logic.Account;\r\nimport logic.BusinessAccount;\r\nimport logic.PrivateAccount;\r\nimport logic.Restaurant;\r\n\r\n/**\r\n * BiteMe\r\n *\r\n * <p>\r\n * No description provided (generated by Swagger Codegen\r\n * https://github.com/swagger-api/swagger-codegen)\r\n *\r\n */\r\npublic class AccountApiService {\r\n\t/**\r\n\t * Create Private Account\r\n\t *\r\n\t * This can only be done by the logged in Account.\r\n\t *\r\n\t */\r\n\tpublic static void createPrivateAccount(PrivateAccount account, Response response) {\r\n\t\ttry {\r\n\t\t\tPreparedStatement postAccount = EchoServer.con.prepareStatement(\"UPDATE biteme.account SET Role = client AND Status = AND \" +\r\n\t\t\t\t\t\"BranchManagerID = ? AND Area = ? AND W4C ? WHERE UserName = ?;\");\r\n\r\n\t\t\tpostAccount.setInt(1, account.getBranch_manager_ID());\r\n\t\t\tpostAccount.setString(2, account.getArea());\r\n\t\t\tpostAccount.setString(3, getRandomHexString());\r\n\t\t\tpostAccount.setString(4, account.getUserName());\r\n\t\t\tpostAccount.execute();\r\n\r\n\t\t\tpostAccount = EchoServer.con.prepareStatement(\"INSERT INTO biteme.private_account (UserName, CreditCardNumber, CreditCardCVV, CreditCardExp) \" +\r\n\t\t\t\t\t\"VALUES(?,?,?,?)\");\r\n\t\t\tpostAccount.setString(1, account.getUserName());\r\n\t\t\tpostAccount.setString(2, account.getCreditCardNumber());\r\n\t\t\tpostAccount.setString(3, account.getCreditCardCVV());\r\n\t\t\tpostAccount.setString(4, account.getCreditCardExpDate());\r\n\t\t\tpostAccount.execute();\r\n\r\n\t\t} catch (SQLException e) {\r\n\t\t\tresponse.setBody(null);\r\n\t\t\tresponse.setDescription(e.getMessage());\r\n\t\t\tresponse.setCode(400);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tresponse.setCode(200);\r\n\t\tresponse.setDescription(\"Success in registering private account:\" + account.getUserID());\r\n\t\tresponse.setBody(null);\r\n\t}\r\n\r\n\t/**\r\n\t * Create Business Account\r\n\t *\r\n\t * This can only be done by the logged in Account.\r\n\t *\r\n\t */\r\n\tpublic static void createBusinessAccount(BusinessAccount account, Response response) {\r\n\t\ttry {\r\n\r\n\t\t\tPreparedStatement postAccount = EchoServer.con.prepareStatement(\"UPDATE biteme.account SET Role = client AND Status = AND \" +\r\n\t\t\t\t\t\"BranchManagerID = ? AND Area = ? AND W4C ? WHERE UserName = ?;\");\r\n\r\n\t\t\tpostAccount.setInt(1, account.getBranch_manager_ID());\r\n\t\t\tpostAccount.setString(2, account.getArea());\r\n\t\t\tpostAccount.setString(3, getRandomHexString());\r\n\t\t\tpostAccount.setString(4, account.getUserName());\r\n\t\t\tpostAccount.execute();\r\n\r\n\t\t\tpostAccount = EchoServer.con.prepareStatement(\"INSERT INTO biteme.business_account (UserName, MonthlyBillingCeling, isApproved, BusinessName, CurrentSpent) \" +\r\n\t\t\t\t\t\"VALUES(?,?,?,?,?)\");\r\n\r\n\t\t\tpostAccount.setInt(1, account.getUserID());\r\n\t\t\tpostAccount.setFloat(2, account.getMonthlyBillingCeiling());\r\n\t\t\tpostAccount.setBoolean(13, account.getIsApproved());\r\n\t\t\tpostAccount.setString(14, account.getBusinessName());\r\n\t\t\tpostAccount.setFloat(15, account.getCurrentSpent());\r\n\t\t\tpostAccount.execute();\r\n\r\n\t\t} catch (SQLException e) {\r\n\t\t\tresponse.setBody(null);\r\n\t\t\tresponse.setDescription(e.getMessage());\r\n\t\t\tresponse.setCode(400);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tresponse.setCode(200);\r\n\t\tresponse.setDescription(\"Success in registering business account:\" + account.getUserID());\r\n\t\tresponse.setBody(null);\r\n\t}\r\n\r\n\t/**\r\n\t * Generate a random hex string at size of 50\r\n\t * \r\n\t * @param numchars\r\n\t * @return\r\n\t */\r\n\tpublic static String getRandomHexString() {\r\n\t\tint numchars = 50;\r\n\t\tRandom r = new Random();\r\n\t\tStringBuffer sb = new StringBuffer();\r\n\t\twhile (sb.length() < numchars) {\r\n\t\t\tsb.append(Integer.toHexString(r.nextInt()));\r\n\t\t}\r\n\t\treturn sb.toString().substring(0, numchars);\r\n\t}\r\n\r\n\t/**\r\n\t * Delete Account\r\n\t *\r\n\t * This can only be done by the logged in Account.\r\n\t *??????????????????????????????????????????????????????????????????????????????????????????????????????\r\n\t */\r\n\tpublic static void deleteAccount(String userName, int UserID, Response response) {\r\n\t\tAccount account = null;\r\n\t\ttry {\r\n\t\t\tPreparedStatement deleteAccount = EchoServer.con.prepareStatement(\r\n\t\t\t\t\t\"DELETE FROM accounts biteme.account WHERE accounts.UserName = ? AND accounts.UserID = ?;\");\r\n\t\t\tdeleteAccount.setString(1, userName);\r\n\t\t\t// Its the first userName that he had so the test is in users table on login\r\n\t\t\tdeleteAccount.setInt(2, UserID);\r\n\t\t\tdeleteAccount.execute();\r\n\t\t\tdeleteAccount.getResultSet();\r\n\t\t} catch (SQLException e) {\r\n\t\t\tresponse.setCode(400);\r\n\t\t\tresponse.setDescription(\"Fields are missing\");\r\n\t\t\tresponse.setBody(null);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tresponse.setCode(200);\r\n\t\tresponse.setDescription(\"Success in deleting account \" + UserID);\r\n\t\tresponse.setBody(null);\r\n\t}\r\n\r\n\t/**\r\n\t * Get all Accounts\r\n\t *\r\n\t */\r\n\tpublic static void getAllAccounts(int branch_manager_id, Response response) {\r\n\t\tResultSet rs;\r\n\t\tAccount account = null;\r\n\t\tArrayList<Account> accounts = new ArrayList<Account>();\r\n\t\ttry {\r\n\t\t\tPreparedStatement getAllAccounts = EchoServer.con\r\n\t\t\t\t\t.prepareStatement(\"SELECT * FROM biteme.account WHERE BranchManagerID = ?;\");\r\n\t\t\tgetAllAccounts.setInt(1, branch_manager_id);\r\n\t\t\tgetAllAccounts.execute();\r\n\t\t\trs = getAllAccounts.getResultSet();\r\n\t\t\twhile (rs.next()) {\r\n\t\t\t\taccount = new Account(rs.getInt(QueryConsts.ACCOUNT_USER_ID),\r\n\t\t\t\t\t\trs.getString(QueryConsts.ACCOUNT_USER_NAME), rs.getString(QueryConsts.ACCOUNT_PASSWORD),\r\n\t\t\t\t\t\trs.getString(QueryConsts.ACCOUNT_FIRST_NAME), rs.getString(QueryConsts.ACCOUNT_LAST_NAME),\r\n\t\t\t\t\t\trs.getString(QueryConsts.ACCOUNT_EMAIL), rs.getString(QueryConsts.ACCOUNT_ROLE),\r\n\t\t\t\t\t\trs.getString(QueryConsts.ACCOUNT_PHONE), rs.getString(QueryConsts.ACCOUNT_STATUS),\r\n\t\t\t\t\t\trs.getBoolean(QueryConsts.ACCOUNT_IS_BUSINESS),\r\n\t\t\t\t\t\trs.getInt(QueryConsts.ACCOUNT_BRANCH_MANAGER_ID), rs.getString(QueryConsts.ACCOUNT_AREA),\r\n\t\t\t\t\t\trs.getInt(QueryConsts.ACCOUNT_DEBT), rs.getString(QueryConsts.ACCOUNT_W4C));\r\n\t\t\t\taccounts.add(account);\r\n\t\t\t}\r\n\r\n\t\t} catch (SQLException e) {\r\n\t\t\tresponse.setCode(400);\r\n\t\t\tresponse.setDescription(e.getMessage());\r\n\t\t\tresponse.setBody(null);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tresponse.setCode(200);\r\n\t\tresponse.setDescription(\"Success in fetching accounts \" + account.getUserID());\r\n\t\tresponse.setBody(accounts.toArray());\r\n\t}\r\n\r\n\t/**\r\n\t * Get Full Account (With private or business fields) by Account\r\n\t *\r\n\t */\r\n\tpublic static void getAccount(Account account, Response response) {\r\n\t\tResultSet rs;\r\n\r\n\t\ttry {\r\n\t\t\tif (account.getRole().equals(\"client\")) {\r\n\t\t\t\tif (account.isBusiness()) {\r\n\t\t\t\t\tPreparedStatement getAccount = EchoServer.con\r\n\t\t\t\t\t\t\t.prepareStatement(\"SELECT * FROM biteme.business_account WHERE UserName = ?;\");\r\n\t\t\t\t\tgetAccount.setString(1, account.getUserName());\r\n\t\t\t\t\tgetAccount.execute();\r\n\t\t\t\t\trs = getAccount.getResultSet();\r\n\t\t\t\t\tif (rs.next()) {\r\n\r\n\t\t\t\t\t\tresponse.setBody(new BusinessAccount(account.getUserID(), account.getUserName(),\r\n\t\t\t\t\t\t\t\taccount.getPassword(), account.getFirstName(), account.getLastName(),\r\n\t\t\t\t\t\t\t\taccount.getEmail(), account.getRole(), account.getPhone(), account.getStatus(),\r\n\t\t\t\t\t\t\t\taccount.isBusiness(), account.getBranch_manager_ID(), account.getArea(),\r\n\t\t\t\t\t\t\t\taccount.getDebt(), account.getW4c_card(), rs.getInt(2), rs.getBoolean(3),\r\n\t\t\t\t\t\t\t\trs.getString(4), rs.getFloat(5)));\r\n\t\t\t\t\t\tresponse.setCode(200);\r\n\t\t\t\t\t\tresponse.setDescription(\"Success fetching business account\");\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthrow new SQLException(\"Account\" + account.getUserID() + \" is not found in business_account\",\r\n\t\t\t\t\t\t\t\t\"400\", 400);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tPreparedStatement getAccount = EchoServer.con\r\n\t\t\t\t\t\t\t.prepareStatement(\"SELECT * FROM biteme.private_account WHERE UserID = ?;\");\r\n\t\t\t\t\tgetAccount.setInt(1, account.getUserID());\r\n\t\t\t\t\tgetAccount.execute();\r\n\t\t\t\t\trs = getAccount.getResultSet();\r\n\t\t\t\t\tif (rs.next()) {\r\n\r\n\t\t\t\t\t\tresponse.setBody(new PrivateAccount(account.getUserID(), account.getUserName(),\r\n\t\t\t\t\t\t\t\taccount.getPassword(), account.getFirstName(), account.getLastName(),\r\n\t\t\t\t\t\t\t\taccount.getEmail(), account.getRole(), account.getPhone(), account.getStatus(),\r\n\t\t\t\t\t\t\t\taccount.isBusiness(), account.getBranch_manager_ID(), account.getArea(),\r\n\t\t\t\t\t\t\t\taccount.getDebt(), account.getW4c_card(), rs.getString(2), rs.getString(3),\r\n\t\t\t\t\t\t\t\trs.getString(4)));\r\n\t\t\t\t\t\tresponse.setCode(200);\r\n\t\t\t\t\t\tresponse.setDescription(\"Success fetching private account\");\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthrow new SQLException(\"Account\" + account.getUserID() + \" is not found in private_account\",\r\n\t\t\t\t\t\t\t\t\"400\", 401);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t} catch (SQLException e) {\r\n\t\t\tresponse.setCode(e.getErrorCode());\r\n\t\t\tresponse.setDescription(e.getMessage());\r\n\t\t\tresponse.setBody(null);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Logs Account into the system\r\n\t *\r\n\t */\r\n\tpublic static void loginAccount(String userName, String password, Response response) {\r\n\t\tResultSet rs;\r\n\t\tJsonElement body = EchoServer.gson.toJsonTree(new Object());\r\n\t\tAccount account = null;\r\n\t\ttry {\r\n\t\t\tPreparedStatement loginAccount = EchoServer.con\r\n\t\t\t\t\t.prepareStatement(\"SELECT * FROM biteme.account WHERE UserName = ? AND Password = ?;\");\r\n\r\n\t\t\tloginAccount.setString(1, userName);\r\n\t\t\tloginAccount.setString(2, password);\r\n\t\t\tloginAccount.execute();\r\n\t\t\trs = loginAccount.getResultSet();\r\n\r\n\t\t\tif(rs.getFetchSize() == 0) {\r\n\t\t\t\tthrow new SQLException(\"Account \" + userName + \" not found\", \"402\", 402);\r\n\t\t\t}\r\n\r\n\t\t\tif(rs.getString(QueryConsts.ACCOUNT_ROLE).equals(\"Not Assigned\")){\r\n\t\t\t\tthrow new SQLException(\"Account didn't activated yet.\", \"400\", 400);\r\n\t\t\t}\r\n\r\n\t\t\tloginAccount = EchoServer.con.prepareStatement(\"UPDATE biteme.account SET isLoggedIn = 1 WHERE UserName = ?;\");\r\n\t\t\tloginAccount.setString(1, userName);\r\n\t\t\tif (rs.getBoolean(QueryConsts.ACCOUNT_IS_LOGGED_IN)) {\r\n\t\t\t\tthrow new SQLException(\"User is already logged in\", \"401\", 401);\r\n\t\t\t}\r\n\r\n\t\t\taccount = new Account(rs.getInt(QueryConsts.ACCOUNT_USER_ID), rs.getString(QueryConsts.ACCOUNT_USER_NAME),\r\n\t\t\t\t\trs.getString(QueryConsts.ACCOUNT_PASSWORD), rs.getString(QueryConsts.ACCOUNT_FIRST_NAME),\r\n\t\t\t\t\trs.getString(QueryConsts.ACCOUNT_LAST_NAME), rs.getString(QueryConsts.ACCOUNT_EMAIL),\r\n\t\t\t\t\trs.getString(QueryConsts.ACCOUNT_ROLE), rs.getString(QueryConsts.ACCOUNT_PHONE),\r\n\t\t\t\t\trs.getString(QueryConsts.ACCOUNT_STATUS), rs.getBoolean(QueryConsts.ACCOUNT_IS_BUSINESS),rs.getInt(QueryConsts.ACCOUNT_BRANCH_MANAGER_ID),\r\n\t\t\t\t\trs.getString(QueryConsts.ACCOUNT_AREA), rs.getInt(QueryConsts.ACCOUNT_DEBT), rs.getString(QueryConsts.ACCOUNT_W4C));\r\n\r\n\t\t\tJsonElement accountField = EchoServer.gson.toJsonTree(account);\r\n\t\t\tbody.getAsJsonObject().add(\"account\", accountField);\r\n\t\t\tif (account.getStatus().equals(\"blocked\")) {\r\n\t\t\t\tthrow new SQLException(\"Account\" + account.getUserID() + \"is blocked\", \"403\", 403);\r\n\t\t\t}\r\n\r\n\r\n\r\n\t\t\tif(account.getRole().equals(\"Supplier\") || account.getRole().equals(\"Moderator\")){\r\n\t\t\t\tRestaurant res;\r\n\t\t\t\tPreparedStatement getRestaurant = EchoServer.con.prepareStatement(\"SELECT * FROM biteme.restaurants WHERE UserName = ?\");\r\n\t\t\t\tgetRestaurant.setString(1, account.getUserName());\r\n\t\t\t\trs = getRestaurant.getResultSet();\r\n\t\t\t\tif(!rs.getBoolean(QueryConsts.RESTAURANT_IS_APPROVED)){\r\n\t\t\t\t\tthrow new SQLException(\"Restaurant didn't approved yet\",\"404\",404);\r\n\t\t\t\t}\r\n\t\t\t\tres = new Restaurant(rs.getInt(QueryConsts.RESTAURANT_ID), rs.getBoolean(QueryConsts.RESTAURANT_IS_APPROVED), rs.getInt(QueryConsts.RESTAURANT_BRANCH_MANAGER_ID), rs.getString(QueryConsts.RESTAURANT_NAME),\r\n\t\t\t\t\t\trs.getString(QueryConsts.RESTAURANT_AREA), rs.getString(QueryConsts.RESTAURANT_TYPE), account.getUserName(), rs.getString(QueryConsts.RESTAURANT_PHOTO), rs.getString(QueryConsts.RESTAURANT_ADDRESS),\r\n\t\t\t\trs.getString(QueryConsts.RESTAURANT_DESCRIPTION));\r\n\t\t\t\tJsonElement restaurantField = EchoServer.gson.toJsonTree(res);\r\n\t\t\t\tbody.getAsJsonObject().add(\"moderator\", restaurantField);\r\n\r\n\t\t\t}\r\n\r\n\t\t} catch (SQLException e) {\r\n\t\t\tresponse.setCode(e.getErrorCode());\r\n\t\t\tresponse.setDescription(e.getMessage());\r\n\t\t\tresponse.setBody(null);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tresponse.setCode(200);\r\n\t\tresponse.setDescription(\"Success in login \" + account.getUserID());\r\n\t\tresponse.setBody(EchoServer.gson.toJson(body));\r\n\t}\r\n\r\n\t/**\r\n\t * Logs out current logged in Account session\r\n\t *\r\n\t */\r\n\tpublic static void logoutAccount(String userName, Response response) {\r\n\r\n\r\n\t\tResultSet rs;\r\n\t\ttry {\r\n\t\t\tPreparedStatement logOutAccount = EchoServer.con\r\n\t\t\t\t\t.prepareStatement(\"UPDATE biteme.account AS account SET isLoggedIn = 0 WHERE account.UserName = ?;\");\r\n\t\t\tlogOutAccount.setString(1, userName);\r\n\t\t\tlogOutAccount.execute();\r\n\t\t\trs = logOutAccount.getResultSet();\r\n\t\t\tif (rs.rowUpdated() == false) {\r\n\t\t\t\tthrow new SQLException(\"couldn't log out\");\r\n\t\t\t}\r\n\t\t} catch (SQLException e) {\r\n\t\t\tresponse.setCode(400);\r\n\t\t\tresponse.setDescription(e.getMessage());\r\n\t\t\tresponse.setBody(null);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tresponse.setCode(200);\r\n\t\tresponse.setDescription(\"Success in logging out\");\r\n\t\tresponse.setBody(null);\r\n\t}\r\n\r\n\t/**\r\n\t * login Account with W4C code\r\n\t *\r\n\t * \r\n\t *\r\n\t */\r\n\tpublic static void loginAccountW4C(String w4cCode, Response response) {\r\n\r\n\t\tResultSet rs;\r\n\t\tJsonElement body = EchoServer.gson.toJsonTree(new Object());\r\n\t\tAccount account = null;\r\n\t\ttry {\r\n\t\t\tPreparedStatement loginAccount = EchoServer.con.prepareStatement(\"SELECT * FROM biteme.account WHERE W4C = ?;\");\r\n\t\tloginAccount.setString(1, w4cCode);\r\n\t\trs = loginAccount.getResultSet();\r\n\t\t\tif(rs.getFetchSize() == 0) {\r\n\t\t\t\tthrow new SQLException(\"Account \" + w4cCode + \" not found\", \"402\", 402);\r\n\t\t\t}\r\n\r\n\t\t\tif(rs.getString(QueryConsts.ACCOUNT_ROLE).equals(\"Not Assigned\")){\r\n\t\t\t\tthrow new SQLException(\"Account didn't activated yet.\", \"400\", 400);\r\n\t\t\t}\r\n\r\n\t\t\tloginAccount = EchoServer.con.prepareStatement(\"UPDATE biteme.account SET isLoggedIn = 1 WHERE W4C = ?;\");\r\n\t\t\tloginAccount.setString(1, w4cCode);\r\n\t\t\tif (rs.getBoolean(QueryConsts.ACCOUNT_IS_LOGGED_IN)) {\r\n\t\t\t\tthrow new SQLException(\"User is already logged in\", \"401\", 401);\r\n\t\t\t}\r\n\r\n\t\t\taccount = new Account(rs.getInt(QueryConsts.ACCOUNT_USER_ID), rs.getString(QueryConsts.ACCOUNT_USER_NAME),\r\n\t\t\t\t\trs.getString(QueryConsts.ACCOUNT_PASSWORD), rs.getString(QueryConsts.ACCOUNT_FIRST_NAME),\r\n\t\t\t\t\trs.getString(QueryConsts.ACCOUNT_LAST_NAME), rs.getString(QueryConsts.ACCOUNT_EMAIL),\r\n\t\t\t\t\trs.getString(QueryConsts.ACCOUNT_ROLE), rs.getString(QueryConsts.ACCOUNT_PHONE),\r\n\t\t\t\t\trs.getString(QueryConsts.ACCOUNT_STATUS), rs.getBoolean(QueryConsts.ACCOUNT_IS_BUSINESS),rs.getInt(QueryConsts.ACCOUNT_BRANCH_MANAGER_ID),\r\n\t\t\t\t\trs.getString(QueryConsts.ACCOUNT_AREA), rs.getInt(QueryConsts.ACCOUNT_DEBT), rs.getString(QueryConsts.ACCOUNT_W4C));\r\n\r\n\t\t\tJsonElement accountField = EchoServer.gson.toJsonTree(account);\r\n\t\t\tbody.getAsJsonObject().add(\"account\", accountField);\r\n\t\t\tif (account.getStatus().equals(\"blocked\")) {\r\n\t\t\t\tthrow new SQLException(\"Account\" + account.getUserID() + \"is blocked\", \"403\", 403);\r\n\t\t\t}\r\n\r\n\r\n\r\n\t\t\tif(account.getRole().equals(\"Supplier\") || account.getRole().equals(\"Moderator\")){\r\n\t\t\t\tRestaurant res;\r\n\t\t\t\tPreparedStatement getRestaurant = EchoServer.con.prepareStatement(\"SELECT * FROM biteme.restaurants WHERE W4C = ?\");\r\n\t\t\t\tgetRestaurant.setString(1, w4cCode);\r\n\t\t\t\trs = getRestaurant.getResultSet();\r\n\t\t\t\tif(!rs.getBoolean(QueryConsts.RESTAURANT_IS_APPROVED)){\r\n\t\t\t\t\tthrow new SQLException(\"Restaurant didn't approved yet\",\"404\",404);\r\n\t\t\t\t}\r\n\t\t\t\tres = new Restaurant(rs.getInt(QueryConsts.RESTAURANT_ID), rs.getBoolean(QueryConsts.RESTAURANT_IS_APPROVED), rs.getInt(QueryConsts.RESTAURANT_BRANCH_MANAGER_ID), rs.getString(QueryConsts.RESTAURANT_NAME),\r\n\t\t\t\t\t\trs.getString(QueryConsts.RESTAURANT_AREA), rs.getString(QueryConsts.RESTAURANT_TYPE), account.getUserName(), rs.getString(QueryConsts.RESTAURANT_PHOTO), rs.getString(QueryConsts.RESTAURANT_ADDRESS),\r\n\t\t\t\t\t\trs.getString(QueryConsts.RESTAURANT_DESCRIPTION));\r\n\t\t\t\tJsonElement restaurantField = EchoServer.gson.toJsonTree(res);\r\n\t\t\t\tbody.getAsJsonObject().add(\"moderator\", restaurantField);\r\n\r\n\t\t\t}\r\n\r\n\t\t} catch (SQLException e) {\r\n\t\t\tresponse.setCode(e.getErrorCode());\r\n\t\t\tresponse.setDescription(e.getMessage());\r\n\t\t\tresponse.setBody(null);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tresponse.setCode(200);\r\n\t\tresponse.setDescription(\"Success in login \" + account.getUserID());\r\n\t\tresponse.setBody(EchoServer.gson.toJson(body));\r\n\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updated Account\r\n\t *\r\n\t * This can only be done by the master / branch manager / CEO\r\n\t *\r\n\t */\r\n\tpublic static void updateAccount(Account account, Response response) {\r\n\t\ttry {\r\n\t\t\tPreparedStatement postAccount = EchoServer.con.prepareStatement(\r\n\t\t\t\t\t\"UPDATE biteme.account AS account SET (UserID = ?, UserName = ?, FirstName = ?, Password = ?, LastName = ?, PhoneNumber = ?, Email = ?,\"\r\n\t\t\t\t\t\t\t+ \" Role = ?, Status = ?, BranchManagerID = ?, Area = ?)\"\r\n\t\t\t\t\t\t\t+ \"WHERE UserName = ?;\");\r\n\t\t\tpostAccount.setInt(1, account.getUserID());\r\n\t\t\t// Its the first userName that he had so the test is in users table on login\r\n\t\t\tpostAccount.setString(2, account.getUserName());\r\n\t\t\tpostAccount.setString(3, account.getFirstName());\r\n\t\t\tpostAccount.setString(4, account.getPassword());\r\n\t\t\tpostAccount.setString(5, account.getLastName());\r\n\t\t\tpostAccount.setString(6, account.getPhone());\r\n\t\t\tpostAccount.setString(7, account.getEmail());\r\n\t\t\tpostAccount.setString(8, account.getRole());\r\n\t\t\tpostAccount.setString(9, account.getStatus());\r\n\t\t\tpostAccount.setInt(10, account.getBranch_manager_ID());\r\n\t\t\tpostAccount.setString(11, account.getArea());\r\n\t\t\tpostAccount.setString(12, account.getUserName());\r\n\t\t\tpostAccount.execute();\r\n\r\n\t\t} catch (SQLException e) {\r\n\t\t\tresponse.setCode(e.getErrorCode());\r\n\t\t\tresponse.setDescription(e.getMessage());\r\n\t\t\tresponse.setBody(null);\r\n\t\t\treturn;\r\n\t\t} finally {\r\n\t\t\tresponse.setCode(200);\r\n\t\t\tresponse.setDescription(\"Success in updating account\" + account.getUserID());\r\n\t\t\tresponse.setBody(null);\r\n\t\t}\r\n\t}\r\n\tpublic static void updatePrivateAccount(PrivateAccount account, Response response) {\r\n\t\tAccount account1 = account;\r\n\t\tupdateAccount(account1, response);\r\n\t\ttry {\r\n\t\t\tPreparedStatement postAccount = EchoServer.con.prepareStatement(\r\n\t\t\t\t\t\"UPDATE biteme.private_account SET (UserName = ?, CreditCardNumber = ?, CreditCardCVV = ?, CreditCardExp = ?)\"\r\n\t\t\t\t\t\t\t+ \"WHERE UserName = ?;\");\r\n\t\t\t// Its the first userName that he had so the test is in users table on login\r\n\t\t\tpostAccount.setString(1, account.getUserName());\r\n\t\t\tpostAccount.setString(2, account.getCreditCardNumber());\r\n\t\t\tpostAccount.setString(3, account.getCreditCardCVV());\r\n\t\t\tpostAccount.setString(4, account.getCreditCardExpDate());\r\n\r\n\t\t\tpostAccount.execute();\r\n\r\n\t\t} catch (SQLException e) {\r\n\t\t\tresponse.setCode(e.getErrorCode());\r\n\t\t\tresponse.setDescription(e.getMessage());\r\n\t\t\tresponse.setBody(null);\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n\t\r\n\tpublic static void updateBusinessAccount(BusinessAccount account, Response response) {\r\n\t\tAccount account1 = account;\r\n\t\tupdateAccount(account1, response);\r\n\t\ttry {\r\n\t\t\tPreparedStatement postAccount = EchoServer.con.prepareStatement(\r\n\t\t\t\t\t\"UPDATE biteme.business_account SET (UserName = ?, MonthlyBillingCeling = ?, isApproved = ?, BusinessName = ?, CurrentSpent = ?)\"\r\n\t\t\t\t\t\t\t+ \"WHERE UserName = ?;\");\r\n\t\t\tpostAccount.setString(1, account.getUserName());\r\n\t\t\tpostAccount.setFloat(2, account.getMonthlyBillingCeiling());\r\n\t\t\tpostAccount.setBoolean(3, account.getIsApproved());\r\n\t\t\tpostAccount.setString(4, account.getBusinessName());\r\n\t\t\tpostAccount.setFloat(5, account.getCurrentSpent());\r\n\r\n\t\t\tpostAccount.execute();\r\n\r\n\t\t} catch (SQLException e) {\r\n\t\t\tresponse.setCode(e.getErrorCode());\r\n\t\t\tresponse.setDescription(e.getMessage());\r\n\t\t\tresponse.setBody(null);\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/src/biteme/server/AccountApiService.java b/src/biteme/server/AccountApiService.java
---- a/src/biteme/server/AccountApiService.java	
-+++ b/src/biteme/server/AccountApiService.java	
-@@ -100,8 +100,7 @@
- 
- 	/**
- 	 * Generate a random hex string at size of 50
--	 * 
--	 * @param numchars
-+	 *
- 	 * @return
- 	 */
- 	public static String getRandomHexString() {
-Index: src/logic/Shippment.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package logic;\r\n\r\npublic class Shippment {\r\n\tprivate int shippmentID;\r\n\tprivate String work_place;\r\n\tprivate String address;\r\n\tprivate String receiver_name;\r\n\tprivate String delivery;\r\n\tprivate String phone;\r\n\t\r\n\tpublic Shippment(int shippmentID, String work_place, String address, String receiver_name, String delivery,\r\n\t\t\tString phone) {\r\n\t\tthis.shippmentID = shippmentID;\r\n\t\tthis.work_place = work_place;\r\n\t\tthis.address = address;\r\n\t\tthis.receiver_name = receiver_name;\r\n\t\tthis.delivery = delivery;\r\n\t\tthis.phone = phone;\r\n\t}\r\n\r\n\tpublic int getShippmentID() {\r\n\t\treturn shippmentID;\r\n\t}\r\n\r\n\tpublic void setShippmentID(int shippmentID) {\r\n\t\tthis.shippmentID = shippmentID;\r\n\t}\r\n\r\n\tpublic String getWork_place() {\r\n\t\treturn work_place;\r\n\t}\r\n\r\n\tpublic void setWork_place(String work_place) {\r\n\t\tthis.work_place = work_place;\r\n\t}\r\n\r\n\tpublic String getAddress() {\r\n\t\treturn address;\r\n\t}\r\n\r\n\tpublic void setAddress(String address) {\r\n\t\tthis.address = address;\r\n\t}\r\n\r\n\tpublic String getReceiver_name() {\r\n\t\treturn receiver_name;\r\n\t}\r\n\r\n\tpublic void setReceiver_name(String receiver_name) {\r\n\t\tthis.receiver_name = receiver_name;\r\n\t}\r\n\r\n\tpublic String getDelivery() {\r\n\t\treturn delivery;\r\n\t}\r\n\r\n\tpublic void setDelivery(String delivery) {\r\n\t\tthis.delivery = delivery;\r\n\t}\r\n\r\n\tpublic String getPhone() {\r\n\t\treturn phone;\r\n\t}\r\n\r\n\tpublic void setPhone(String phone) {\r\n\t\tthis.phone = phone;\r\n\t}\t\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/src/logic/Shippment.java b/src/logic/Shippment.java
---- a/src/logic/Shippment.java	
-+++ b/src/logic/Shippment.java	
-@@ -21,47 +21,36 @@
- 	public int getShippmentID() {
- 		return shippmentID;
- 	}
--
- 	public void setShippmentID(int shippmentID) {
- 		this.shippmentID = shippmentID;
- 	}
--
- 	public String getWork_place() {
- 		return work_place;
- 	}
--
- 	public void setWork_place(String work_place) {
- 		this.work_place = work_place;
- 	}
--
- 	public String getAddress() {
- 		return address;
- 	}
--
- 	public void setAddress(String address) {
- 		this.address = address;
- 	}
--
- 	public String getReceiver_name() {
- 		return receiver_name;
- 	}
--
- 	public void setReceiver_name(String receiver_name) {
- 		this.receiver_name = receiver_name;
- 	}
--
- 	public String getDelivery() {
- 		return delivery;
- 	}
--
- 	public void setDelivery(String delivery) {
- 		this.delivery = delivery;
- 	}
--
- 	public String getPhone() {
- 		return phone;
- 	}
--
- 	public void setPhone(String phone) {
- 		this.phone = phone;
- 	}	
-Index: bin/gui/EditOrderForm.css
-===================================================================
-diff --git a/bin/gui/EditOrderForm.css b/bin/gui/EditOrderForm.css
-deleted file mode 100644
---- a/bin/gui/EditOrderForm.css	
-+++ /dev/null	
-@@ -1,5 +0,0 @@
--/* JavaFX CSS - Leave this comment until you have at least create one rule which uses -fx-Property */
--/* #btnStudentInfo {*/
--.root {
--	-fx-background-color: skyblue;
--}
-\ No newline at end of file
-Index: bin/gui/EditOrderForm.fxml
-===================================================================
-diff --git a/bin/gui/EditOrderForm.fxml b/bin/gui/EditOrderForm.fxml
-deleted file mode 100644
---- a/bin/gui/EditOrderForm.fxml	
-+++ /dev/null	
-@@ -1,28 +0,0 @@
--<?xml version="1.0" encoding="UTF-8"?>
--
--<?import javafx.scene.control.Button?>
--<?import javafx.scene.control.ComboBox?>
--<?import javafx.scene.control.Label?>
--<?import javafx.scene.control.TextField?>
--<?import javafx.scene.layout.AnchorPane?>
--<?import javafx.scene.text.Text?>
--
--<AnchorPane prefHeight="349.0" prefWidth="312.0" xmlns="http://javafx.com/javafx/16" xmlns:fx="http://javafx.com/fxml/1" fx:controller="gui.EditOrderController">
--   <children>
--      <Label id="lblName" layoutX="37.0" layoutY="31.0" text="Order ID:" />
--      <Label id="lblSurname" layoutX="37.0" layoutY="68.0" text="Restaurant" />
--      <ComboBox id="cmbFaculty" fx:id="cmbTypeOfOrder" layoutX="104.0" layoutY="232.0" prefWidth="150.0" />
--      <TextField id="lblName" fx:id="txtOrderID" layoutX="104.0" layoutY="27.0" />
--      <TextField id="lblSurname" fx:id="txtRestaurant" layoutX="104.0" layoutY="64.0" />
--      <Text layoutX="14.0" layoutY="121.0" strokeType="OUTSIDE" strokeWidth="0.0" text="Order Address:" />
--      <TextField fx:id="txtAddress" layoutX="104.0" layoutY="104.0" />
--      <Text layoutX="14.0" layoutY="249.0" strokeType="OUTSIDE" strokeWidth="0.0" text="Type Of Order:" />
--      <TextField fx:id="txtTime" layoutX="104.0" layoutY="149.0" />
--      <Text layoutX="22.0" layoutY="166.0" strokeType="OUTSIDE" strokeWidth="0.0" text="Order Time:" />
--      <Text layoutX="11.0" layoutY="204.0" strokeType="OUTSIDE" strokeWidth="0.0" text="Phone Number:" />
--      <TextField fx:id="txtPhone" layoutX="104.0" layoutY="187.0" />
--      <Button fx:id="btnUpdate" layoutX="199.0" layoutY="290.0" mnemonicParsing="false" onAction="#UpdateOrder" text="Update" />
--      <Button fx:id="btnBack" layoutX="28.0" layoutY="290.0" mnemonicParsing="false" onAction="#Back" text="Back" />
--      <Label fx:id="txtStatus" layoutX="118.0" layoutY="294.0" />
--   </children>
--</AnchorPane>
-Index: bin/Server/ServerPort.fxml
-===================================================================
-diff --git a/bin/Server/ServerPort.fxml b/bin/Server/ServerPort.fxml
-deleted file mode 100644
---- a/bin/Server/ServerPort.fxml	
-+++ /dev/null	
-@@ -1,75 +0,0 @@
--<?xml version="1.0" encoding="UTF-8"?>
--
--<?import javafx.scene.control.Button?>
--<?import javafx.scene.control.Label?>
--<?import javafx.scene.control.PasswordField?>
--<?import javafx.scene.control.TableColumn?>
--<?import javafx.scene.control.TableView?>
--<?import javafx.scene.control.TextField?>
--<?import javafx.scene.image.Image?>
--<?import javafx.scene.image.ImageView?>
--<?import javafx.scene.layout.Pane?>
--<?import javafx.scene.text.Font?>
--
--<Pane prefHeight="544.0" prefWidth="723.0" xmlns="http://javafx.com/javafx/16" xmlns:fx="http://javafx.com/fxml/1" fx:controller="Server.ServerPortFrameController">
--   <children>
--      <ImageView fitHeight="555.0" fitWidth="732.0" layoutX="-4.0" layoutY="-8.0">
--         <image>
--            <Image url="@./server_backgound.jpg" />
--         </image>
--      </ImageView>
--      <Button fx:id="btnDone" layoutX="421.0" layoutY="371.0" mnemonicParsing="false" onAction="#connect" prefHeight="25.0" prefWidth="93.0" text="Connect">
--         <font>
--            <Font name="Candara Bold" size="17.0" />
--         </font></Button>
--      <Button fx:id="btnExit" layoutX="567.0" layoutY="472.0" mnemonicParsing="false" onAction="#getExitBtn" prefHeight="31.0" prefWidth="93.0" text="Close">
--         <font>
--            <Font name="Candara" size="17.0" />
--         </font></Button>
--      <Label layoutX="304.0" layoutY="162.0" text="Port:">
--         <font>
--            <Font name="Candara Bold" size="20.0" />
--         </font></Label>
--      <Label layoutX="282.0" layoutY="43.0" text="Server configuration">
--         <font>
--            <Font name="Candara Bold" size="35.0" />
--         </font></Label>
--      <Label layoutX="304.0" layoutY="111.0" text="IP:">
--         <font>
--            <Font name="Candara Bold" size="20.0" />
--         </font></Label>
--      <Label layoutX="304.0" layoutY="214.0" text="DB name:">
--         <font>
--            <Font name="Candara Bold" size="20.0" />
--         </font></Label>
--      <Label layoutX="304.0" layoutY="266.0" text="BD user:">
--         <font>
--            <Font name="Candara Bold" size="20.0" />
--         </font></Label>
--      <Label layoutX="303.0" layoutY="317.0" text="DB password:">
--         <font>
--            <Font name="Candara Bold" size="20.0" />
--         </font></Label>
--      <TextField fx:id="lblIP" layoutX="330.0" layoutY="114.0" prefHeight="25.0" prefWidth="301.0" />
--      <TextField fx:id="lblPort" layoutX="354.0" layoutY="162.0" prefHeight="25.0" prefWidth="278.0" />
--      <TextField fx:id="lblDBUser" layoutX="380.0" layoutY="267.0" prefHeight="25.0" prefWidth="252.0" />
--      <TextField fx:id="lblDBName" layoutX="389.0" layoutY="216.0" prefHeight="25.0" prefWidth="242.0" />
--      <Button fx:id="btnDsconnect" layoutX="325.0" layoutY="470.0" mnemonicParsing="false" onAction="#Disconnect" prefHeight="25.0" prefWidth="101.0" text="Disconnect">
--         <font>
--            <Font size="16.0" />
--         </font>
--      </Button>
--      <Label fx:id="lblmsgConnect" layoutX="347.0" layoutY="420.0">
--         <font>
--            <Font name="System Bold" size="17.0" />
--         </font>
--      </Label>
--      <TableView fx:id="tblIP" layoutX="22.0" layoutY="292.0" prefHeight="200.0" prefWidth="260.0">
--        <columns>
--          <TableColumn fx:id="ip" prefWidth="119.19997596740723" text="IP" />
--          <TableColumn fx:id="hostName" prefWidth="140.0" text="Host name" />
--        </columns>
--      </TableView>
--      <PasswordField fx:id="lblDBPassword" layoutX="432.0" layoutY="317.0" prefHeight="25.0" prefWidth="199.0" />
--   </children>
--</Pane>
-Index: bin/gui/ClientMainScreen.fxml
-===================================================================
-diff --git a/bin/gui/ClientMainScreen.fxml b/bin/gui/ClientMainScreen.fxml
-deleted file mode 100644
---- a/bin/gui/ClientMainScreen.fxml	
-+++ /dev/null	
-@@ -1,36 +0,0 @@
--<?xml version="1.0" encoding="UTF-8"?>
--
--<?import javafx.scene.control.Button?>
--<?import javafx.scene.control.Label?>
--<?import javafx.scene.control.TextField?>
--<?import javafx.scene.layout.AnchorPane?>
--<?import javafx.scene.text.Font?>
--
--<AnchorPane prefHeight="253.0" prefWidth="437.0" xmlns="http://javafx.com/javafx/16" xmlns:fx="http://javafx.com/fxml/1" fx:controller="gui.ClientMainScreenController">
--   <children>
--      <Label layoutX="86.0" layoutY="38.0" text="Hello Client, please confirn the port">
--         <font>
--            <Font size="18.0" />
--         </font>
--      </Label>
--      <TextField fx:id="portText" layoutX="177.0" layoutY="115.0" prefHeight="26.0" prefWidth="121.0" promptText="5555" />
--      <Label layoutX="125.0" layoutY="117.0" text="port: ">
--         <font>
--            <Font size="15.0" />
--         </font>
--      </Label>
--      <Button fx:id="bntConfirm" layoutX="177.0" layoutY="172.0" mnemonicParsing="false" onAction="#confirmClient" prefHeight="27.0" prefWidth="69.0" text="Confirm" />
--      <Label fx:id="labelIncorect" layoutX="192.0" layoutY="96.0" prefHeight="18.0" prefWidth="59.0" textAlignment="CENTER" textFill="RED">
--         <font>
--            <Font name="System Bold Italic" size="12.0" />
--         </font>
--      </Label>
--      <Button fx:id="btnEXE" layoutX="34.0" layoutY="173.0" mnemonicParsing="false" onAction="#Exit" text="Exit" />
--      <Label layoutX="95.0" layoutY="86.0" prefHeight="21.0" prefWidth="75.0" text="Server Ip:">
--         <font>
--            <Font size="15.0" />
--         </font>
--      </Label>
--      <TextField fx:id="serverId" layoutX="177.0" layoutY="84.0" prefHeight="25.0" prefWidth="121.0" />
--   </children>
--</AnchorPane>
-Index: src/gui/ClientMainScreen.css
-===================================================================
-diff --git a/src/gui/ClientMainScreen.css b/src/gui/ClientMainScreen.css
-deleted file mode 100644
---- a/src/gui/ClientMainScreen.css	
-+++ /dev/null	
-@@ -1,4 +0,0 @@
--/* JavaFX CSS - Leave this comment until you have at least create one rule which uses -fx-Property */
--.root {
--	-fx-background-color: skyblue;
--}
-\ No newline at end of file
-Index: bin/gui/AllOrders.fxml
-===================================================================
-diff --git a/bin/gui/AllOrders.fxml b/bin/gui/AllOrders.fxml
-deleted file mode 100644
---- a/bin/gui/AllOrders.fxml	
-+++ /dev/null	
-@@ -1,22 +0,0 @@
--<?xml version="1.0" encoding="UTF-8"?>
--
--<?import javafx.scene.control.Button?>
--<?import javafx.scene.control.TableColumn?>
--<?import javafx.scene.control.TableView?>
--<?import javafx.scene.layout.AnchorPane?>
--
--<AnchorPane prefHeight="368.0" prefWidth="856.0" xmlns="http://javafx.com/javafx/16" xmlns:fx="http://javafx.com/fxml/1" fx:controller="gui.AllOrdersController">
--   <children>
--      <TableView fx:id="tblID" layoutX="107.0" layoutY="39.0" prefHeight="200.0" prefWidth="643.0">
--        <columns>
--          <TableColumn fx:id="OrderNum" prefWidth="92.0" text="Order Number" />
--          <TableColumn fx:id="Restaurant" prefWidth="69.0" text="Restaurant" />
--            <TableColumn fx:id="OrderTime" prefWidth="90.0" text="Order Time" />
--            <TableColumn fx:id="PhoneNumber" prefWidth="109.0" text="Phone Number" />
--            <TableColumn fx:id="OrderType" prefWidth="109.0" text="Type Of Order" />
--            <TableColumn fx:id="OrderAddress" prefWidth="173.0" text="Order Address" />
--        </columns>
--      </TableView>
--      <Button fx:id="btnBack" layoutX="47.0" layoutY="303.0" mnemonicParsing="false" onAction="#Back" text="Back" />
--   </children>
--</AnchorPane>
-Index: src/gui/ClientMainScreen.fxml
-===================================================================
-diff --git a/src/gui/ClientMainScreen.fxml b/src/gui/ClientMainScreen.fxml
-deleted file mode 100644
---- a/src/gui/ClientMainScreen.fxml	
-+++ /dev/null	
-@@ -1,36 +0,0 @@
--<?xml version="1.0" encoding="UTF-8"?>
--
--<?import javafx.scene.control.Button?>
--<?import javafx.scene.control.Label?>
--<?import javafx.scene.control.TextField?>
--<?import javafx.scene.layout.AnchorPane?>
--<?import javafx.scene.text.Font?>
--
--<AnchorPane prefHeight="253.0" prefWidth="437.0" xmlns="http://javafx.com/javafx/16" xmlns:fx="http://javafx.com/fxml/1" fx:controller="gui.ClientMainScreenController">
--   <children>
--      <Label layoutX="86.0" layoutY="38.0" text="Hello Client, please confirn the port">
--         <font>
--            <Font size="18.0" />
--         </font>
--      </Label>
--      <TextField fx:id="portText" layoutX="177.0" layoutY="115.0" prefHeight="26.0" prefWidth="121.0" promptText="5555" />
--      <Label layoutX="125.0" layoutY="117.0" text="port: ">
--         <font>
--            <Font size="15.0" />
--         </font>
--      </Label>
--      <Button fx:id="bntConfirm" layoutX="177.0" layoutY="172.0" mnemonicParsing="false" onAction="#confirmClient" prefHeight="27.0" prefWidth="69.0" text="Confirm" />
--      <Label fx:id="labelIncorect" layoutX="192.0" layoutY="96.0" prefHeight="18.0" prefWidth="59.0" textAlignment="CENTER" textFill="RED">
--         <font>
--            <Font name="System Bold Italic" size="12.0" />
--         </font>
--      </Label>
--      <Button fx:id="btnEXE" layoutX="34.0" layoutY="173.0" mnemonicParsing="false" onAction="#Exit" text="Exit" />
--      <Label layoutX="95.0" layoutY="86.0" prefHeight="21.0" prefWidth="75.0" text="Server Ip:">
--         <font>
--            <Font size="15.0" />
--         </font>
--      </Label>
--      <TextField fx:id="serverId" layoutX="177.0" layoutY="84.0" prefHeight="25.0" prefWidth="121.0" />
--   </children>
--</AnchorPane>
-Index: bin/Server/ServerPort.css
-===================================================================
-diff --git a/bin/Server/ServerPort.css b/bin/Server/ServerPort.css
-deleted file mode 100644
---- a/bin/Server/ServerPort.css	
-+++ /dev/null	
-@@ -1,5 +0,0 @@
--/* JavaFX CSS - Leave this comment until you have at least create one rule which uses -fx-Property */
--.root {
--	-fx-background-color: skyblue;
--	-fx-background-image: url(@./server_backgound.jpg);
--}
-\ No newline at end of file
-Index: src/gui/AllOrders.fxml
-===================================================================
-diff --git a/src/gui/AllOrders.fxml b/src/gui/AllOrders.fxml
-deleted file mode 100644
---- a/src/gui/AllOrders.fxml	
-+++ /dev/null	
-@@ -1,22 +0,0 @@
--<?xml version="1.0" encoding="UTF-8"?>
--
--<?import javafx.scene.control.Button?>
--<?import javafx.scene.control.TableColumn?>
--<?import javafx.scene.control.TableView?>
--<?import javafx.scene.layout.AnchorPane?>
--
--<AnchorPane prefHeight="368.0" prefWidth="856.0" xmlns="http://javafx.com/javafx/16" xmlns:fx="http://javafx.com/fxml/1" fx:controller="gui.AllOrdersController">
--   <children>
--      <TableView fx:id="tblID" layoutX="107.0" layoutY="39.0" prefHeight="200.0" prefWidth="643.0">
--        <columns>
--          <TableColumn fx:id="OrderNum" prefWidth="92.0" text="Order Number" />
--          <TableColumn fx:id="Restaurant" prefWidth="69.0" text="Restaurant" />
--            <TableColumn fx:id="OrderTime" prefWidth="90.0" text="Order Time" />
--            <TableColumn fx:id="PhoneNumber" prefWidth="109.0" text="Phone Number" />
--            <TableColumn fx:id="OrderType" prefWidth="109.0" text="Type Of Order" />
--            <TableColumn fx:id="OrderAddress" prefWidth="173.0" text="Order Address" />
--        </columns>
--      </TableView>
--      <Button fx:id="btnBack" layoutX="47.0" layoutY="303.0" mnemonicParsing="false" onAction="#Back" text="Back" />
--   </children>
--</AnchorPane>
-Index: bin/gui/ClientMainScreen.css
-===================================================================
-diff --git a/bin/gui/ClientMainScreen.css b/bin/gui/ClientMainScreen.css
-deleted file mode 100644
---- a/bin/gui/ClientMainScreen.css	
-+++ /dev/null	
-@@ -1,4 +0,0 @@
--/* JavaFX CSS - Leave this comment until you have at least create one rule which uses -fx-Property */
--.root {
--	-fx-background-color: skyblue;
--}
-\ No newline at end of file
-Index: src/gui/MainScreenController.java
-===================================================================
-diff --git a/src/gui/MainScreenController.java b/src/gui/MainScreenController.java
-deleted file mode 100644
---- a/src/gui/MainScreenController.java	
-+++ /dev/null	
-@@ -1,124 +0,0 @@
--package gui;
--
--import java.net.InetAddress;
--
--import client.ChatClient;
--
--import client.ClientUI;
--
--import javafx.event.ActionEvent;
--import javafx.fxml.FXML;
--import javafx.fxml.FXMLLoader;
--
--import javafx.scene.Parent;
--import javafx.scene.Node;
--import javafx.scene.Scene;
--import javafx.scene.control.Button;
--import javafx.scene.control.TextField;
--import javafx.scene.layout.Pane;
--import javafx.stage.Stage;
--
--public class MainScreenController {
--
--	@FXML
--	private Button btnExit;
--
--	@FXML
--	private TextField idID;
--
--	@FXML
--	private Button showAllBTN;
--
--	FXMLLoader loader = new FXMLLoader();
--
--	@FXML
--	void EditOrder(ActionEvent event) throws Exception {
--		String[] id = new String[3];
--		FXMLLoader loader = new FXMLLoader();
--		id[0] = new String("GET");
--		id[1] = new String("ORDER");
--		id[2] = new String(idID.getText());
--		if (id[1].trim().isEmpty()) {
--			System.out.println("You must enter an id number");
--		} else {
--			ClientUI.chat.accept(id);
--
--			if (ChatClient.serverAns.get(2).equals("ERROR")) {
--				System.out.println("Order ID Not Found");
--			} else {
--				System.out.println("Order ID Found");
--				((Node) event.getSource()).getScene().getWindow().hide(); // hiding primary window
--				Stage primaryStage = new Stage();
--				Pane root = loader.load(getClass().getResource("/gui/EditOrderForm.fxml").openStream());
--				EditOrderController editordercontroller = loader.getController();
--				editordercontroller.insertOrder(ChatClient.serverAns.get(2));
--
--				Scene scene = new Scene(root);
--				scene.getStylesheets().add(getClass().getResource("/gui/EditOrderForm.css").toExternalForm());
--				primaryStage.setTitle("Edit Order");
--
--				primaryStage.setScene(scene);
--				primaryStage.show();
--			}
--		}
--	}
--
--	@FXML
--	void ShowAllOrders(ActionEvent event) throws Exception {
--		String[] id = new String[2];
--		FXMLLoader loader = new FXMLLoader();
--		id[0] = new String("GETALL");
--		id[1] = new String("ORDER");
--		ClientUI.chat.accept(id);
--
--		if (ChatClient.serverAns.get(2).equals("Error")) {
--			System.out.println("Can't find any orders");
--
--		} else {
--			System.out.println("Orders Found");
--			((Node) event.getSource()).getScene().getWindow().hide(); // hiding primary window
--			Stage primaryStage = new Stage();
--			Pane root = loader.load(getClass().getResource("/gui/AllOrders.fxml").openStream());
--			AllOrdersController allorderscontroller = loader.getController();
--			allorderscontroller.insertOrdersToTbl(ChatClient.serverAns);
--
--			Scene scene = new Scene(root);
--			scene.getStylesheets().add(getClass().getResource("/gui/AllOrdersForm.css").toExternalForm());
--			primaryStage.setTitle("All orders");
--
--			primaryStage.setScene(scene);
--			primaryStage.show();
--		}
--	}
--
--	@FXML
--	void getExitBtn(ActionEvent event) throws Exception {
--		System.out.println("exit client Tool");
--		String[] ipHostName = new String[3];
--		ipHostName[0] = "EXIT";
--		ipHostName[1] = InetAddress.getLocalHost().getHostName();
--		ipHostName[2] = InetAddress.getLocalHost().getHostAddress();
--		try {
--			ClientUI.chat.accept(ipHostName);
--		}catch(NullPointerException e) {
--			System.out.println("new ClientController didn't work");
--		}
--		System.exit(0);
--	}
--
--	public void start(Stage primaryStage) throws Exception {
--		Parent root = FXMLLoader.load(getClass().getResource("/gui/MainScreen.fxml"));
--		Scene scene = new Scene(root);
--		scene.getStylesheets().add(getClass().getResource("/gui/MainScreen.css").toExternalForm());
--		primaryStage.setTitle("Order Manager");
--		primaryStage.setScene(scene);
--
--		primaryStage.show();
--	}
--
--	public void display(String message) {
--		System.out.println("message");
--
--	}
--
--}
-\ No newline at end of file
-Index: src/gui/ClientMainScreenController.java
-===================================================================
-diff --git a/src/gui/ClientMainScreenController.java b/src/gui/ClientMainScreenController.java
-deleted file mode 100644
---- a/src/gui/ClientMainScreenController.java	
-+++ /dev/null	
-@@ -1,110 +0,0 @@
--package gui;
--
--import java.net.InetAddress;
--
--import client.ChatClient;
--import client.ClientController;
--import client.ClientUI;
--import javafx.event.ActionEvent;
--import javafx.fxml.FXML;
--import javafx.fxml.FXMLLoader;
--import javafx.scene.Node;
--import javafx.scene.Parent;
--import javafx.scene.Scene;
--import javafx.scene.control.Button;
--import javafx.scene.control.Label;
--import javafx.scene.control.TextField;
--import javafx.scene.layout.Pane;
--import javafx.stage.Stage;
--
--public class ClientMainScreenController {
--
--	private String port;
--
--	@FXML
--	private TextField portText;
--
--	@FXML
--	private Button bntConfirm;
--
--	@FXML
--	private Label labelIncorect;
--
--	@FXML
--	private Button btnEXE;
--	
--    @FXML
--    private TextField serverId;
--
--
--	@FXML
--	void Exit(ActionEvent event) throws Exception {
--		String[] ipHostName = new String[3];
--		ipHostName[0] = "PING";
--		ipHostName[1] = InetAddress.getLocalHost().getCanonicalHostName();
--		ipHostName[2] = InetAddress.getLocalHost().getHostAddress();
--		try {
--			ClientUI.chat.accept(ipHostName);
--		} catch (NullPointerException e) {
--			System.out.println("new ClientController didn't work");
--		}
--		System.exit(0);
--	}
--
--	public void start(Stage primaryStage) throws Exception {
--		Parent root;
--		root = FXMLLoader.load(getClass().getResource("/gui/ClientMainScreen.fxml"));
--		Scene scene = new Scene(root);
--		scene.getStylesheets().add(getClass().getResource("/gui/ClientMainScreen.css").toExternalForm());
--		primaryStage.setTitle("Client Confirmation");
--		primaryStage.setScene(scene);
--
--		primaryStage.show();
--
--	}
--
--	@FXML
--	void confirmClient(ActionEvent event) throws Exception {
--		ClientUI.chat = new ClientController(serverId.getText(), Integer.valueOf(getportText()));
--		FXMLLoader loader = new FXMLLoader();
--		//Here the client send ping to server to check if it's alive
--		String[] ipHostName = new String[3];
--		ipHostName[0] = "PING";
--		ipHostName[1] = InetAddress.getLocalHost().getHostName();
--		ipHostName[2] = InetAddress.getLocalHost().getHostAddress();
--		try {
--			ClientUI.chat.accept(ipHostName);
--		} catch (NullPointerException e) {
--			System.out.println("new ClientController didn't work");
--		}
--		if (ChatClient.serverAns.get(0).equals("PORT"))
--			getportFromServer(ChatClient.serverAns.get(1));
--		String p = getportText();
--		if (p.trim().isEmpty()) {
--			labelIncorect.setText("incorect");
--
--		} else {
--			if (p.equals(port)) {
--				((Node) event.getSource()).getScene().getWindow().hide(); // hiding primary window
--				Stage primaryStage = new Stage();
--				Pane root = loader.load(getClass().getResource("/gui/MainScreen.fxml").openStream());
--				Scene scene = new Scene(root);
--				scene.getStylesheets().add(getClass().getResource("/gui/MainScreen.css").toExternalForm());
--				primaryStage.setTitle("Order");
--
--				primaryStage.setScene(scene);
--				primaryStage.show();
--			} else
--				labelIncorect.setText("incorect");
--		}
--	}
--
--	public String getportText() {
--		return portText.getText();
--	}
--
--	public void getportFromServer(String serverPort) {
--		port = serverPort;
--	}
--
--}
-Index: src/gui/AllOrdersForm.css
-===================================================================
-diff --git a/src/gui/AllOrdersForm.css b/src/gui/AllOrdersForm.css
-deleted file mode 100644
---- a/src/gui/AllOrdersForm.css	
-+++ /dev/null	
-@@ -1,5 +0,0 @@
--/* JavaFX CSS - Leave this comment until you have at least create one rule which uses -fx-Property */
--/* #btnStudentInfo {*/
--.root {
--	-fx-background-color: skyblue;
--}
-\ No newline at end of file
-Index: src/gui/MainScreen.css
-===================================================================
-diff --git a/src/gui/MainScreen.css b/src/gui/MainScreen.css
-deleted file mode 100644
---- a/src/gui/MainScreen.css	
-+++ /dev/null	
-@@ -1,4 +0,0 @@
--/* JavaFX CSS - Leave this comment until you have at least create one rule which uses -fx-Property */
--.root {
--	-fx-background-color: skyblue;
--}
-\ No newline at end of file
-Index: bin/gui/CreatAndEditMenu.fxml
-===================================================================
-diff --git a/bin/gui/CreatAndEditMenu.fxml b/bin/gui/CreatAndEditMenu.fxml
-deleted file mode 100644
---- a/bin/gui/CreatAndEditMenu.fxml	
-+++ /dev/null	
-@@ -1,252 +0,0 @@
--<?xml version="1.0" encoding="UTF-8"?>
--
--<?import com.gluonhq.charm.glisten.control.ExpansionPanel?>
--<?import com.gluonhq.charm.glisten.control.ExpansionPanel.CollapsedPanel?>
--<?import com.gluonhq.charm.glisten.control.ExpansionPanelContainer?>
--<?import com.jfoenix.controls.JFXButton?>
--<?import com.jfoenix.controls.JFXComboBox?>
--<?import javafx.geometry.Insets?>
--<?import javafx.scene.control.Button?>
--<?import javafx.scene.control.Hyperlink?>
--<?import javafx.scene.control.Label?>
--<?import javafx.scene.control.ScrollPane?>
--<?import javafx.scene.image.Image?>
--<?import javafx.scene.image.ImageView?>
--<?import javafx.scene.layout.AnchorPane?>
--<?import javafx.scene.layout.HBox?>
--<?import javafx.scene.shape.Line?>
--<?import javafx.scene.text.Font?>
--
--<AnchorPane maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="730.0" prefWidth="800.0" style="-fx-background-color: orange;" xmlns="http://javafx.com/javafx/16" xmlns:fx="http://javafx.com/fxml/1">
--   <children>
--      <HBox fx:id="Nav" alignment="CENTER" layoutX="25.0" prefHeight="102.0" prefWidth="751.0" spacing="50.0" style="-fx-background-radius: 50px;">
--         <children>
--            <Label prefHeight="88.0" prefWidth="183.0" styleClass="f" text="Hello, Supplier">
--               <font>
--                  <Font name="Berlin Sans FB Demi Bold" size="24.0" />
--               </font>
--               <padding>
--                  <Insets left="10.0" top="50.0" />
--               </padding>
--            </Label>
--            <Hyperlink prefHeight="27.0" prefWidth="74.0" text="Home" textFill="WHITE">
--               <font>
--                  <Font name="Berlin Sans FB Demi Bold" size="16.0" />
--               </font>
--            </Hyperlink>
--            <Button mnemonicParsing="false" prefHeight="37.0" prefWidth="79.0" style="-fx-background-color: orage; -fx-border-color: #FFF3B0; -fx-font-family: Berlin Sans FB Demi; -fx-font-weight: bold; -fx-border-radius: 30;" text="LogOut">
--               <font>
--                  <Font name="Berlin Sans FB Demi Bold" size="16.0" />
--               </font>
--            </Button>
--            <ImageView fitHeight="102.0" fitWidth="301.0">
--               <image>
--                  <Image url="@img/biteMe.png" />
--               </image>
--            </ImageView>
--         </children>
--      </HBox>
--      <AnchorPane layoutX="14.0" layoutY="96.0" prefHeight="548.0" prefWidth="772.0" style="-fx-background-color: white; -fx-background-radius: 50px;">
--         <children>
--            <JFXComboBox layoutX="321.0" layoutY="15.0" prefHeight="27.0" prefWidth="120.0" promptText="Night menu" />
--            <ScrollPane layoutX="454.0" layoutY="122.0" prefHeight="349.0" prefWidth="300.0">
--               <content>
--                  <AnchorPane prefHeight="328.0" prefWidth="259.0">
--                     <children>
--                        <ExpansionPanelContainer layoutX="-1.0" prefHeight="358.0" prefWidth="299.0">
--                            <items>
--                                <ExpansionPanel>
--                                    <collapsedContent>
--                                        <ExpansionPanel.CollapsedPanel>
--                                            <titleNodes>
--                                                <Label text="Carbonara" />
--                                                <Label text="Italian" />
--                                            </titleNodes>
--                                        </ExpansionPanel.CollapsedPanel>
--                                    </collapsedContent>
--                                </ExpansionPanel>
--                                <ExpansionPanel>
--                                    <collapsedContent>
--                                        <ExpansionPanel.CollapsedPanel>
--                                            <titleNodes>
--                                                <Label text="Sushi" />
--                                                <Label text="Japan" />
--                                            </titleNodes>
--                                        </ExpansionPanel.CollapsedPanel>
--                                    </collapsedContent>
--                                </ExpansionPanel>
--                              <ExpansionPanel>
--                                 <collapsedContent>
--                                    <ExpansionPanel.CollapsedPanel prefWidth="252">
--                                       <titleNodes>
--                                          <Label text="Foie Gras" />
--                                          <Label text="France" />
--                                       </titleNodes>
--                                    </ExpansionPanel.CollapsedPanel>
--                                 </collapsedContent>
--                              </ExpansionPanel>
--                            </items>
--                        </ExpansionPanelContainer>
--                     </children>
--                  </AnchorPane>
--               </content>
--            </ScrollPane>
--            <JFXButton layoutX="343.0" layoutY="225.0" prefHeight="35.0" prefWidth="86.0" style="-fx-background-color: whte; -fx-text-fill: black; -fx-border-color: orange; -fx-background-radius: 30; -fx-border-radius: 30;" text="Add &gt;" />
--            <JFXButton layoutX="343.0" layoutY="302.0" prefHeight="35.0" prefWidth="86.0" style="-fx-background-color: whte; -fx-text-fill: black; -fx-border-color: orange; -fx-background-radius: 30; -fx-border-radius: 30;" text=" &lt; Remove" />
--            <Button layoutX="562.0" layoutY="478.0" mnemonicParsing="false" prefHeight="28.0" prefWidth="94.0" style="-fx-background-color: orange; -fx-border-radius: 30; -fx-background-radius: 30;" text="Delete menu">
--               <font>
--                  <Font size="10.0" />
--               </font></Button>
--            <JFXComboBox layoutX="22.0" layoutY="90.0" prefHeight="27.0" prefWidth="300.0" promptText="Italian" />
--            <JFXComboBox layoutX="456.0" layoutY="90.0" prefHeight="26.0" prefWidth="300.0" promptText="First Course" />
--            <ScrollPane layoutX="20.0" layoutY="122.0" prefHeight="349.0" prefWidth="300.0">
--               <content>
--                  <AnchorPane prefHeight="328.0" prefWidth="259.0">
--                     <children>
--                        <ExpansionPanelContainer layoutX="-1.0" prefHeight="358.0" prefWidth="299.0">
--                           <items>
--                              <ExpansionPanel>
--                                 <collapsedContent>
--                                    <ExpansionPanel.CollapsedPanel>
--                                       <titleNodes>
--                                          <Label text="Panzenella" />
--                                          <Label text="Italian" />
--                                       </titleNodes>
--                                    </ExpansionPanel.CollapsedPanel>
--                                 </collapsedContent>
--                              </ExpansionPanel>
--                              <ExpansionPanel>
--                                 <collapsedContent>
--                                    <ExpansionPanel.CollapsedPanel>
--                                       <titleNodes>
--                                          <Label text="Brushetta" />
--                                          <Label text="Italian" />
--                                       </titleNodes>
--                                    </ExpansionPanel.CollapsedPanel>
--                                 </collapsedContent>
--                              </ExpansionPanel>
--                              <ExpansionPanel>
--                                 <collapsedContent>
--                                    <ExpansionPanel.CollapsedPanel prefWidth="252">
--                                        <titleNodes>
--                                            <Label prefHeight="18.0" prefWidth="113.0" text="Focaccia" />
--                                            <Label maxWidth="-Infinity" minWidth="-Infinity" prefHeight="0.0" prefWidth="0.0" text="Italian" />
--                                        </titleNodes>
--                                    </ExpansionPanel.CollapsedPanel>
--                                 </collapsedContent>
--                              </ExpansionPanel>
--                              <ExpansionPanel>
--                                 <collapsedContent>
--                                    <ExpansionPanel.CollapsedPanel prefWidth="252">
--                                       <titleNodes>
--                                          <Label text="Carbonara" />
--                                          <Label text="Italian " />
--                                       </titleNodes>
--                                    </ExpansionPanel.CollapsedPanel>
--                                 </collapsedContent>
--                              </ExpansionPanel>
--                              <ExpansionPanel>
--                                 <collapsedContent>
--                                    <ExpansionPanel.CollapsedPanel prefWidth="252">
--                                       <titleNodes>
--                                          <Label text="Margheritta" />
--                                          <Label text="Italian" />
--                                       </titleNodes>
--                                    </ExpansionPanel.CollapsedPanel>
--                                 </collapsedContent>
--                              </ExpansionPanel>
--                           </items>
--                        </ExpansionPanelContainer>
--                     </children>
--                  </AnchorPane>
--               </content>
--            </ScrollPane>
--            <Button layoutX="357.0" layoutY="503.0" mnemonicParsing="false" prefHeight="35.0" prefWidth="63.0" style="-fx-background-color: orange; -fx-font-weight: bold; -fx-font-size: 14; -fx-border-radius: 30; -fx-background-radius: 30; -fx-border-color: #FFF3B0;" text="save">
--               <font>
--                  <Font name="System Bold Italic" size="18.0" />
--               </font>
--            </Button>
--            <Button layoutX="188.0" layoutY="12.0" mnemonicParsing="false" prefHeight="35.0" prefWidth="120.0" style="-fx-text-fill: black; -fx-background-color: white; -fx-border-radius: 30; -fx-background-radius: 30; -fx-border-color: orange;" text="Edit name menu" />
--            <Label layoutX="98.0" layoutY="73.0" text="List of Items">
--               <font>
--                  <Font name="Berlin Sans FB Demi Bold" size="20.0" />
--               </font>
--            </Label>
--            <Label layoutX="549.0" layoutY="69.0" text="Night menu">
--               <font>
--                  <Font name="Berlin Sans FB Demi Bold" size="20.0" />
--               </font>
--            </Label>
--            <Button layoutX="639.0" layoutY="12.0" mnemonicParsing="false" prefHeight="35.0" prefWidth="88.0" style="-fx-background-color: orange; -fx-font-weight: bold; -fx-font-size: 14; -fx-border-radius: 30; -fx-background-radius: 30; -fx-border-color: #FFF3B0;" text="New Menu">
--               <font>
--                  <Font name="System Bold Italic" size="18.0" />
--               </font>
--            </Button>
--         </children>
--      </AnchorPane>
--      <HBox fx:id="Nav1" alignment="CENTER" layoutX="-3.0" layoutY="629.0" prefHeight="102.0" prefWidth="806.0" spacing="35.0" style="-fx-background-radius: 50px;">
--         <children>
--            <ImageView fitHeight="71.0" fitWidth="193.0">
--               <image>
--                  <Image url="@img/biteMe.png" />
--               </image>
--            </ImageView>
--            <AnchorPane prefHeight="107.0" prefWidth="91.0">
--               <children>
--                  <Hyperlink layoutX="-3.0" layoutY="23.0" text="Contect us:" textFill="WHITE">
--                     <font>
--                        <Font name="Berlin Sans FB Demi Bold" size="16.0" />
--                     </font>
--                  </Hyperlink>
--                  <ImageView fitHeight="26.0" fitWidth="24.0" layoutX="39.0" layoutY="51.0">
--                     <image>
--                        <Image url="@img/facebook-icon-preview-1.png" />
--                     </image>
--                  </ImageView>
--                  <ImageView fitHeight="19.0" fitWidth="21.0" layoutX="66.0" layoutY="55.0">
--                     <image>
--                        <Image url="@img/instagram.png" />
--                     </image>
--                  </ImageView>
--                  <ImageView fitHeight="22.0" fitWidth="24.0" layoutX="91.0" layoutY="54.0">
--                     <image>
--                        <Image url="@img/WhatsApp.svg.png" />
--                     </image>
--                  </ImageView>
--                  <Line endX="-20.0" layoutX="101.0" layoutY="47.0" startX="-100.0" stroke="WHITE" />
--               </children>
--            </AnchorPane>
--            <AnchorPane prefHeight="107.0" prefWidth="91.0">
--               <children>
--                  <Hyperlink layoutX="-3.0" layoutY="52.0" text="contect@BiteMe.co.il" textFill="WHITE">
--                     <font>
--                        <Font name="Bell MT Bold" size="15.0" />
--                     </font>
--                  </Hyperlink>
--                  <Hyperlink layoutX="2.0" layoutY="74.0" text="Israel Karmiel, Gan Ha'ir 100" textFill="WHITE">
--                     <font>
--                        <Font name="Bell MT Bold" size="15.0" />
--                     </font>
--                     <padding>
--                        <Insets right="20.0" />
--                     </padding>
--                  </Hyperlink>
--                  <Hyperlink layoutX="-4.0" layoutY="33.0" text="04-9999090" textFill="WHITE">
--                     <font>
--                        <Font name="Bell MT Bold" size="15.0" />
--                     </font>
--                  </Hyperlink>
--               </children>
--               <padding>
--                  <Insets right="30.0" />
--               </padding>
--            </AnchorPane>
--            <Button mnemonicParsing="false" prefHeight="37.0" prefWidth="72.0" style="-fx-background-color: orage; -fx-border-color: #FFF3B0; -fx-font-family: Berlin Sans FB Demi; -fx-font-weight: bold; -fx-border-radius: 30;" text="back">
--               <font>
--                  <Font name="Berlin Sans FB Demi Bold" size="16.0" />
--               </font>
--            </Button>
--         </children>
--      </HBox>
--   </children>
--</AnchorPane>
-Index: bin/gui/AllOrdersForm.css
-===================================================================
-diff --git a/bin/gui/AllOrdersForm.css b/bin/gui/AllOrdersForm.css
-deleted file mode 100644
---- a/bin/gui/AllOrdersForm.css	
-+++ /dev/null	
-@@ -1,5 +0,0 @@
--/* JavaFX CSS - Leave this comment until you have at least create one rule which uses -fx-Property */
--/* #btnStudentInfo {*/
--.root {
--	-fx-background-color: skyblue;
--}
-\ No newline at end of file
-Index: bin/gui/MainScreen.fxml
-===================================================================
-diff --git a/bin/gui/MainScreen.fxml b/bin/gui/MainScreen.fxml
-deleted file mode 100644
---- a/bin/gui/MainScreen.fxml	
-+++ /dev/null	
-@@ -1,17 +0,0 @@
--<?xml version="1.0" encoding="UTF-8"?>
--
--<?import javafx.scene.control.Button?>
--<?import javafx.scene.control.Label?>
--<?import javafx.scene.control.TextField?>
--<?import javafx.scene.layout.AnchorPane?>
--
--<AnchorPane prefHeight="207.0" prefWidth="246.0" xmlns="http://javafx.com/javafx/16" xmlns:fx="http://javafx.com/fxml/1" fx:controller="gui.MainScreenController">
--   <children>
--      <Button id="btnExit" fx:id="btnExit" layoutX="200.0" layoutY="164.0" mnemonicParsing="false" onAction="#getExitBtn" text="Exit" />
--      <Button id="btnStudentInfo" fx:id="showAllBTN" layoutX="15.0" layoutY="164.0" mnemonicParsing="false" onAction="#ShowAllOrders" text="All Orders" />
--      <Label layoutX="15.0" layoutY="87.0" text="Order ID:" />
--      <TextField fx:id="idID" layoutX="72.0" layoutY="83.0" prefHeight="25.0" prefWidth="80.0" />
--      <Label layoutX="15.0" layoutY="48.0" />
--      <Button layoutX="165.0" layoutY="83.0" mnemonicParsing="false" onAction="#EditOrder" text="Edit Order" />
--   </children>
--</AnchorPane>
-\ No newline at end of file
-Index: src/gui/MainScreen.fxml
-===================================================================
-diff --git a/src/gui/MainScreen.fxml b/src/gui/MainScreen.fxml
-deleted file mode 100644
---- a/src/gui/MainScreen.fxml	
-+++ /dev/null	
-@@ -1,17 +0,0 @@
--<?xml version="1.0" encoding="UTF-8"?>
--
--<?import javafx.scene.control.Button?>
--<?import javafx.scene.control.Label?>
--<?import javafx.scene.control.TextField?>
--<?import javafx.scene.layout.AnchorPane?>
--
--<AnchorPane prefHeight="207.0" prefWidth="246.0" xmlns="http://javafx.com/javafx/16" xmlns:fx="http://javafx.com/fxml/1" fx:controller="gui.MainScreenController">
--   <children>
--      <Button id="btnExit" fx:id="btnExit" layoutX="200.0" layoutY="164.0" mnemonicParsing="false" onAction="#getExitBtn" text="Exit" />
--      <Button id="btnStudentInfo" fx:id="showAllBTN" layoutX="15.0" layoutY="164.0" mnemonicParsing="false" onAction="#ShowAllOrders" text="All Orders" />
--      <Label layoutX="15.0" layoutY="87.0" text="Order ID:" />
--      <TextField fx:id="idID" layoutX="72.0" layoutY="83.0" prefHeight="25.0" prefWidth="80.0" />
--      <Label layoutX="15.0" layoutY="48.0" />
--      <Button layoutX="165.0" layoutY="83.0" mnemonicParsing="false" onAction="#EditOrder" text="Edit Order" />
--   </children>
--</AnchorPane>
-\ No newline at end of file
-Index: src/gui/EditOrderForm.css
-===================================================================
-diff --git a/src/gui/EditOrderForm.css b/src/gui/EditOrderForm.css
-deleted file mode 100644
---- a/src/gui/EditOrderForm.css	
-+++ /dev/null	
-@@ -1,5 +0,0 @@
--/* JavaFX CSS - Leave this comment until you have at least create one rule which uses -fx-Property */
--/* #btnStudentInfo {*/
--.root {
--	-fx-background-color: skyblue;
--}
-\ No newline at end of file
-Index: src/gui/EditOrderController.java
-===================================================================
-diff --git a/src/gui/EditOrderController.java b/src/gui/EditOrderController.java
-deleted file mode 100644
---- a/src/gui/EditOrderController.java	
-+++ /dev/null	
-@@ -1,121 +0,0 @@
--package gui;
--
--import java.net.URL;
--import java.sql.Time;
--import java.util.ArrayList;
--import java.util.ResourceBundle;
--
--import client.ChatClient;
--import client.ClientUI;
--import javafx.collections.FXCollections;
--import javafx.collections.ObservableList;
--import javafx.event.ActionEvent;
--import javafx.fxml.FXML;
--import javafx.fxml.Initializable;
--import javafx.scene.Node;
--import javafx.scene.control.Button;
--import javafx.scene.control.ComboBox;
--import javafx.scene.control.Label;
--import javafx.scene.control.TextField;
--import javafx.scene.paint.Color;
--import javafx.stage.Stage;
--import logic.Order;
--
--public class EditOrderController implements Initializable {
--
--	@FXML
--	private ComboBox<String> cmbTypeOfOrder;
--
--	@FXML
--	private TextField txtOrderID;
--
--	@FXML
--	private TextField txtRestaurant;
--
--	@FXML
--	private TextField txtAddress;
--
--	@FXML
--	private TextField txtTime;
--
--	@FXML
--	private TextField txtPhone;
--
--	@FXML
--	private Button btnUpdate;
--
--	@FXML
--	private Button btnBack;
--
--	@FXML
--	private Label txtStatus;
--
--	ObservableList<String> list;
--
--	@FXML
--	void Back(ActionEvent event) {
--		((Node) event.getSource()).getScene().getWindow().hide();
--		Stage primaryStage = new Stage();
--		MainScreenController aFrame = new MainScreenController(); // create StudentFrame
--		try {
--			aFrame.start(primaryStage);
--		} catch (Exception e) {
--			// TODO Auto-generated catch block
--			e.printStackTrace();
--		}
--	}
--
--	@FXML
--	void UpdateOrder(ActionEvent event) {
--		Order temp = new Order(txtRestaurant.getText(), txtAddress.getText(), txtPhone.getText(),
--				Time.valueOf(txtTime.getText()), cmbTypeOfOrder.getValue().toString());
--		temp.setOrderNum(Integer.valueOf(txtOrderID.getText()));
--		String[] reqToDB = new String[3];
--		reqToDB[0] = "UPDATE";
--		reqToDB[1] = "ORDER";
--		reqToDB[2] = temp.toString();
--		ClientUI.chat.accept(reqToDB);
--		if (ChatClient.serverAns.get(2).equals("ERROR")) {
--			txtStatus.setText("ERROR");
--			txtStatus.setTextFill(Color.web("#a30000"));
--		} else {
--			txtStatus.setText("SUCCESS");
--			txtStatus.setTextFill(Color.web("#0047a3"));
--		}
--
--	}
--
--	public void insertOrder(String order) {
--		String[] result = order.split(",");
--		Order temp = new Order(result[0], result[1], result[2], Time.valueOf(result[3]), result[4]);
--		temp.setOrderNum(Integer.valueOf(result[5]));
--
--		txtOrderID.setText(String.valueOf(temp.getOrderNum()));
--		txtAddress.setText(temp.getOrderAddress());
--		txtPhone.setText(temp.getPhoneNumber());
--		txtRestaurant.setText(temp.getResturant());
--		txtTime.setText(temp.getOrderTime().toString());
--		cmbTypeOfOrder.setValue(temp.getOrderType());
--	}
--
--	// creating list of shipment options
--	private void setShipmentComboBox() {
--		ArrayList<String> al = new ArrayList<String>();
--		al.add("order-in");
--		al.add("take-away");
--		al.add("delivery");
--
--		list = FXCollections.observableArrayList(al);
--		cmbTypeOfOrder.setItems(list);
--	}
--
--	// @Override
--	public void initialize(URL arg0, ResourceBundle arg1) {
--		setShipmentComboBox();
--		txtOrderID.setEditable(false);
--		txtPhone.setEditable(false);
--		txtRestaurant.setEditable(false);
--		txtTime.setEditable(false);
--
--	}
--}
-Index: src/gui/CreatAndEditMenu.fxml
-===================================================================
-diff --git a/src/gui/CreatAndEditMenu.fxml b/src/gui/CreatAndEditMenu.fxml
-deleted file mode 100644
---- a/src/gui/CreatAndEditMenu.fxml	
-+++ /dev/null	
-@@ -1,252 +0,0 @@
--<?xml version="1.0" encoding="UTF-8"?>
--
--<?import com.gluonhq.charm.glisten.control.ExpansionPanel?>
--<?import com.gluonhq.charm.glisten.control.ExpansionPanel.CollapsedPanel?>
--<?import com.gluonhq.charm.glisten.control.ExpansionPanelContainer?>
--<?import com.jfoenix.controls.JFXButton?>
--<?import com.jfoenix.controls.JFXComboBox?>
--<?import javafx.geometry.Insets?>
--<?import javafx.scene.control.Button?>
--<?import javafx.scene.control.Hyperlink?>
--<?import javafx.scene.control.Label?>
--<?import javafx.scene.control.ScrollPane?>
--<?import javafx.scene.image.Image?>
--<?import javafx.scene.image.ImageView?>
--<?import javafx.scene.layout.AnchorPane?>
--<?import javafx.scene.layout.HBox?>
--<?import javafx.scene.shape.Line?>
--<?import javafx.scene.text.Font?>
--
--<AnchorPane maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="730.0" prefWidth="800.0" style="-fx-background-color: orange;" xmlns="http://javafx.com/javafx/16" xmlns:fx="http://javafx.com/fxml/1">
--   <children>
--      <HBox fx:id="Nav" alignment="CENTER" layoutX="25.0" prefHeight="102.0" prefWidth="751.0" spacing="50.0" style="-fx-background-radius: 50px;">
--         <children>
--            <Label prefHeight="88.0" prefWidth="183.0" styleClass="f" text="Hello, Supplier">
--               <font>
--                  <Font name="Berlin Sans FB Demi Bold" size="24.0" />
--               </font>
--               <padding>
--                  <Insets left="10.0" top="50.0" />
--               </padding>
--            </Label>
--            <Hyperlink prefHeight="27.0" prefWidth="74.0" text="Home" textFill="WHITE">
--               <font>
--                  <Font name="Berlin Sans FB Demi Bold" size="16.0" />
--               </font>
--            </Hyperlink>
--            <Button mnemonicParsing="false" prefHeight="37.0" prefWidth="79.0" style="-fx-background-color: orage; -fx-border-color: #FFF3B0; -fx-font-family: Berlin Sans FB Demi; -fx-font-weight: bold; -fx-border-radius: 30;" text="LogOut">
--               <font>
--                  <Font name="Berlin Sans FB Demi Bold" size="16.0" />
--               </font>
--            </Button>
--            <ImageView fitHeight="102.0" fitWidth="301.0">
--               <image>
--                  <Image url="@img/biteMe.png" />
--               </image>
--            </ImageView>
--         </children>
--      </HBox>
--      <AnchorPane layoutX="14.0" layoutY="96.0" prefHeight="548.0" prefWidth="772.0" style="-fx-background-color: white; -fx-background-radius: 50px;">
--         <children>
--            <JFXComboBox layoutX="321.0" layoutY="15.0" prefHeight="27.0" prefWidth="120.0" promptText="Night menu" />
--            <ScrollPane layoutX="454.0" layoutY="122.0" prefHeight="349.0" prefWidth="300.0">
--               <content>
--                  <AnchorPane prefHeight="328.0" prefWidth="259.0">
--                     <children>
--                        <ExpansionPanelContainer layoutX="-1.0" prefHeight="358.0" prefWidth="299.0">
--                            <items>
--                                <ExpansionPanel>
--                                    <collapsedContent>
--                                        <ExpansionPanel.CollapsedPanel>
--                                            <titleNodes>
--                                                <Label text="Carbonara" />
--                                                <Label text="Italian" />
--                                            </titleNodes>
--                                        </ExpansionPanel.CollapsedPanel>
--                                    </collapsedContent>
--                                </ExpansionPanel>
--                                <ExpansionPanel>
--                                    <collapsedContent>
--                                        <ExpansionPanel.CollapsedPanel>
--                                            <titleNodes>
--                                                <Label text="Sushi" />
--                                                <Label text="Japan" />
--                                            </titleNodes>
--                                        </ExpansionPanel.CollapsedPanel>
--                                    </collapsedContent>
--                                </ExpansionPanel>
--                              <ExpansionPanel>
--                                 <collapsedContent>
--                                    <ExpansionPanel.CollapsedPanel prefWidth="252">
--                                       <titleNodes>
--                                          <Label text="Foie Gras" />
--                                          <Label text="France" />
--                                       </titleNodes>
--                                    </ExpansionPanel.CollapsedPanel>
--                                 </collapsedContent>
--                              </ExpansionPanel>
--                            </items>
--                        </ExpansionPanelContainer>
--                     </children>
--                  </AnchorPane>
--               </content>
--            </ScrollPane>
--            <JFXButton layoutX="343.0" layoutY="225.0" prefHeight="35.0" prefWidth="86.0" style="-fx-background-color: whte; -fx-text-fill: black; -fx-border-color: orange; -fx-background-radius: 30; -fx-border-radius: 30;" text="Add &gt;" />
--            <JFXButton layoutX="343.0" layoutY="302.0" prefHeight="35.0" prefWidth="86.0" style="-fx-background-color: whte; -fx-text-fill: black; -fx-border-color: orange; -fx-background-radius: 30; -fx-border-radius: 30;" text=" &lt; Remove" />
--            <Button layoutX="562.0" layoutY="478.0" mnemonicParsing="false" prefHeight="28.0" prefWidth="94.0" style="-fx-background-color: orange; -fx-border-radius: 30; -fx-background-radius: 30;" text="Delete menu">
--               <font>
--                  <Font size="10.0" />
--               </font></Button>
--            <JFXComboBox layoutX="22.0" layoutY="90.0" prefHeight="27.0" prefWidth="300.0" promptText="Italian" />
--            <JFXComboBox layoutX="456.0" layoutY="90.0" prefHeight="26.0" prefWidth="300.0" promptText="First Course" />
--            <ScrollPane layoutX="20.0" layoutY="122.0" prefHeight="349.0" prefWidth="300.0">
--               <content>
--                  <AnchorPane prefHeight="328.0" prefWidth="259.0">
--                     <children>
--                        <ExpansionPanelContainer layoutX="-1.0" prefHeight="358.0" prefWidth="299.0">
--                           <items>
--                              <ExpansionPanel>
--                                 <collapsedContent>
--                                    <ExpansionPanel.CollapsedPanel>
--                                       <titleNodes>
--                                          <Label text="Panzenella" />
--                                          <Label text="Italian" />
--                                       </titleNodes>
--                                    </ExpansionPanel.CollapsedPanel>
--                                 </collapsedContent>
--                              </ExpansionPanel>
--                              <ExpansionPanel>
--                                 <collapsedContent>
--                                    <ExpansionPanel.CollapsedPanel>
--                                       <titleNodes>
--                                          <Label text="Brushetta" />
--                                          <Label text="Italian" />
--                                       </titleNodes>
--                                    </ExpansionPanel.CollapsedPanel>
--                                 </collapsedContent>
--                              </ExpansionPanel>
--                              <ExpansionPanel>
--                                 <collapsedContent>
--                                    <ExpansionPanel.CollapsedPanel prefWidth="252">
--                                        <titleNodes>
--                                            <Label prefHeight="18.0" prefWidth="113.0" text="Focaccia" />
--                                            <Label maxWidth="-Infinity" minWidth="-Infinity" prefHeight="0.0" prefWidth="0.0" text="Italian" />
--                                        </titleNodes>
--                                    </ExpansionPanel.CollapsedPanel>
--                                 </collapsedContent>
--                              </ExpansionPanel>
--                              <ExpansionPanel>
--                                 <collapsedContent>
--                                    <ExpansionPanel.CollapsedPanel prefWidth="252">
--                                       <titleNodes>
--                                          <Label text="Carbonara" />
--                                          <Label text="Italian " />
--                                       </titleNodes>
--                                    </ExpansionPanel.CollapsedPanel>
--                                 </collapsedContent>
--                              </ExpansionPanel>
--                              <ExpansionPanel>
--                                 <collapsedContent>
--                                    <ExpansionPanel.CollapsedPanel prefWidth="252">
--                                       <titleNodes>
--                                          <Label text="Margheritta" />
--                                          <Label text="Italian" />
--                                       </titleNodes>
--                                    </ExpansionPanel.CollapsedPanel>
--                                 </collapsedContent>
--                              </ExpansionPanel>
--                           </items>
--                        </ExpansionPanelContainer>
--                     </children>
--                  </AnchorPane>
--               </content>
--            </ScrollPane>
--            <Button layoutX="357.0" layoutY="503.0" mnemonicParsing="false" prefHeight="35.0" prefWidth="63.0" style="-fx-background-color: orange; -fx-font-weight: bold; -fx-font-size: 14; -fx-border-radius: 30; -fx-background-radius: 30; -fx-border-color: #FFF3B0;" text="save">
--               <font>
--                  <Font name="System Bold Italic" size="18.0" />
--               </font>
--            </Button>
--            <Button layoutX="188.0" layoutY="12.0" mnemonicParsing="false" prefHeight="35.0" prefWidth="120.0" style="-fx-text-fill: black; -fx-background-color: white; -fx-border-radius: 30; -fx-background-radius: 30; -fx-border-color: orange;" text="Edit name menu" />
--            <Label layoutX="98.0" layoutY="73.0" text="List of Items">
--               <font>
--                  <Font name="Berlin Sans FB Demi Bold" size="20.0" />
--               </font>
--            </Label>
--            <Label layoutX="549.0" layoutY="69.0" text="Night menu">
--               <font>
--                  <Font name="Berlin Sans FB Demi Bold" size="20.0" />
--               </font>
--            </Label>
--            <Button layoutX="639.0" layoutY="12.0" mnemonicParsing="false" prefHeight="35.0" prefWidth="88.0" style="-fx-background-color: orange; -fx-font-weight: bold; -fx-font-size: 14; -fx-border-radius: 30; -fx-background-radius: 30; -fx-border-color: #FFF3B0;" text="New Menu">
--               <font>
--                  <Font name="System Bold Italic" size="18.0" />
--               </font>
--            </Button>
--         </children>
--      </AnchorPane>
--      <HBox fx:id="Nav1" alignment="CENTER" layoutX="-3.0" layoutY="629.0" prefHeight="102.0" prefWidth="806.0" spacing="35.0" style="-fx-background-radius: 50px;">
--         <children>
--            <ImageView fitHeight="71.0" fitWidth="193.0">
--               <image>
--                  <Image url="@img/biteMe.png" />
--               </image>
--            </ImageView>
--            <AnchorPane prefHeight="107.0" prefWidth="91.0">
--               <children>
--                  <Hyperlink layoutX="-3.0" layoutY="23.0" text="Contect us:" textFill="WHITE">
--                     <font>
--                        <Font name="Berlin Sans FB Demi Bold" size="16.0" />
--                     </font>
--                  </Hyperlink>
--                  <ImageView fitHeight="26.0" fitWidth="24.0" layoutX="39.0" layoutY="51.0">
--                     <image>
--                        <Image url="@img/facebook-icon-preview-1.png" />
--                     </image>
--                  </ImageView>
--                  <ImageView fitHeight="19.0" fitWidth="21.0" layoutX="66.0" layoutY="55.0">
--                     <image>
--                        <Image url="@img/instagram.png" />
--                     </image>
--                  </ImageView>
--                  <ImageView fitHeight="22.0" fitWidth="24.0" layoutX="91.0" layoutY="54.0">
--                     <image>
--                        <Image url="@img/WhatsApp.svg.png" />
--                     </image>
--                  </ImageView>
--                  <Line endX="-20.0" layoutX="101.0" layoutY="47.0" startX="-100.0" stroke="WHITE" />
--               </children>
--            </AnchorPane>
--            <AnchorPane prefHeight="107.0" prefWidth="91.0">
--               <children>
--                  <Hyperlink layoutX="-3.0" layoutY="52.0" text="contect@BiteMe.co.il" textFill="WHITE">
--                     <font>
--                        <Font name="Bell MT Bold" size="15.0" />
--                     </font>
--                  </Hyperlink>
--                  <Hyperlink layoutX="2.0" layoutY="74.0" text="Israel Karmiel, Gan Ha'ir 100" textFill="WHITE">
--                     <font>
--                        <Font name="Bell MT Bold" size="15.0" />
--                     </font>
--                     <padding>
--                        <Insets right="20.0" />
--                     </padding>
--                  </Hyperlink>
--                  <Hyperlink layoutX="-4.0" layoutY="33.0" text="04-9999090" textFill="WHITE">
--                     <font>
--                        <Font name="Bell MT Bold" size="15.0" />
--                     </font>
--                  </Hyperlink>
--               </children>
--               <padding>
--                  <Insets right="30.0" />
--               </padding>
--            </AnchorPane>
--            <Button mnemonicParsing="false" prefHeight="37.0" prefWidth="72.0" style="-fx-background-color: orage; -fx-border-color: #FFF3B0; -fx-font-family: Berlin Sans FB Demi; -fx-font-weight: bold; -fx-border-radius: 30;" text="back">
--               <font>
--                  <Font name="Berlin Sans FB Demi Bold" size="16.0" />
--               </font>
--            </Button>
--         </children>
--      </HBox>
--   </children>
--</AnchorPane>
-Index: bin/gui/MainScreen.css
-===================================================================
-diff --git a/bin/gui/MainScreen.css b/bin/gui/MainScreen.css
-deleted file mode 100644
---- a/bin/gui/MainScreen.css	
-+++ /dev/null	
-@@ -1,4 +0,0 @@
--/* JavaFX CSS - Leave this comment until you have at least create one rule which uses -fx-Property */
--.root {
--	-fx-background-color: skyblue;
--}
-\ No newline at end of file
-Index: src/gui/AllOrdersController.java
-===================================================================
-diff --git a/src/gui/AllOrdersController.java b/src/gui/AllOrdersController.java
-deleted file mode 100644
---- a/src/gui/AllOrdersController.java	
-+++ /dev/null	
-@@ -1,93 +0,0 @@
--package gui;
--
--import java.net.URL;
--import java.sql.Time;
--import java.util.ArrayList;
--import java.util.ResourceBundle;
--
--import client.ChatClient;
--import client.ClientUI;
--import javafx.collections.FXCollections;
--import javafx.collections.ObservableList;
--import javafx.event.ActionEvent;
--import javafx.fxml.FXML;
--import javafx.fxml.Initializable;
--import javafx.scene.Node;
--import javafx.scene.control.Button;
--import javafx.scene.control.TableColumn;
--import javafx.scene.control.TableView;
--import javafx.scene.control.cell.PropertyValueFactory;
--import javafx.stage.Stage;
--import logic.Order;
--
--public class AllOrdersController implements Initializable {
--
--	@FXML
--	private TableView<Order> tblID;
--
--	@FXML
--	private TableColumn<Order, Integer> OrderNum;
--
--	@FXML
--	private TableColumn<Order, String> Restaurant;
--
--	@FXML
--	private TableColumn<Order, Time> OrderTime;
--
--	@FXML
--	private TableColumn<Order, String> PhoneNumber;
--
--	@FXML
--	private TableColumn<Order, String> OrderType;
--
--	@FXML
--	private TableColumn<Order, String> OrderAddress;
--	
--    @FXML
--    private Button btnBack;
--
--	private ObservableList<Order> orderList = FXCollections.observableArrayList();
--	
--    @FXML
--    void Back(ActionEvent event) {
--		((Node) event.getSource()).getScene().getWindow().hide();
--		Stage primaryStage = new Stage();
--		MainScreenController aFrame = new MainScreenController(); // create StudentFrame
--		try {
--			aFrame.start(primaryStage);
--		} catch (Exception e) {
--			e.printStackTrace();
--		}
--    }
--
--	@Override
--	public void initialize(URL url, ResourceBundle db) {
--		OrderNum.setCellValueFactory(new PropertyValueFactory<Order, Integer>("orderNum"));
--		Restaurant.setCellValueFactory(new PropertyValueFactory<Order, String>("resturant"));
--		OrderTime.setCellValueFactory(new PropertyValueFactory<Order, Time>("orderTime"));
--		PhoneNumber.setCellValueFactory(new PropertyValueFactory<Order, String>("phoneNumber"));
--		OrderType.setCellValueFactory(new PropertyValueFactory<Order, String>("orderType"));
--		OrderAddress.setCellValueFactory(new PropertyValueFactory<Order, String>("orderAddress"));
--		tblID.setItems(orderList);
--	}
--
--	public void insertOrdersToTbl(ArrayList<String> serverAns) {
--		String[] id = new String[2];
--		id[0] = new String("GETALL");
--		id[1] = new String("ORDER");
--		ClientUI.chat.accept(id);
--
--		if (ChatClient.serverAns.get(2).equals("Error")) {
--			System.out.println("Can't find any orders");
--
--		} else {
--			ArrayList<String> orders = ChatClient.serverAns;
--			for (int i = 2; i < orders.size(); i++) {
-- 				String[] result = orders.get(i).split(",");
--				Order temp = new Order(result[0], result[1], result[2], Time.valueOf(result[3]), result[4]);
--				temp.setOrderNum(Integer.valueOf(result[5]));
--				orderList.add(temp);
--			}
--		}
--	}
--}
-\ No newline at end of file
-Index: src/gui/EditOrderForm.fxml
-===================================================================
-diff --git a/src/gui/EditOrderForm.fxml b/src/gui/EditOrderForm.fxml
-deleted file mode 100644
---- a/src/gui/EditOrderForm.fxml	
-+++ /dev/null	
-@@ -1,28 +0,0 @@
--<?xml version="1.0" encoding="UTF-8"?>
--
--<?import javafx.scene.control.Button?>
--<?import javafx.scene.control.ComboBox?>
--<?import javafx.scene.control.Label?>
--<?import javafx.scene.control.TextField?>
--<?import javafx.scene.layout.AnchorPane?>
--<?import javafx.scene.text.Text?>
--
--<AnchorPane prefHeight="349.0" prefWidth="312.0" xmlns="http://javafx.com/javafx/16" xmlns:fx="http://javafx.com/fxml/1" fx:controller="gui.EditOrderController">
--   <children>
--      <Label id="lblName" layoutX="37.0" layoutY="31.0" text="Order ID:" />
--      <Label id="lblSurname" layoutX="37.0" layoutY="68.0" text="Restaurant" />
--      <ComboBox id="cmbFaculty" fx:id="cmbTypeOfOrder" layoutX="104.0" layoutY="232.0" prefWidth="150.0" />
--      <TextField id="lblName" fx:id="txtOrderID" layoutX="104.0" layoutY="27.0" />
--      <TextField id="lblSurname" fx:id="txtRestaurant" layoutX="104.0" layoutY="64.0" />
--      <Text layoutX="14.0" layoutY="121.0" strokeType="OUTSIDE" strokeWidth="0.0" text="Order Address:" />
--      <TextField fx:id="txtAddress" layoutX="104.0" layoutY="104.0" />
--      <Text layoutX="14.0" layoutY="249.0" strokeType="OUTSIDE" strokeWidth="0.0" text="Type Of Order:" />
--      <TextField fx:id="txtTime" layoutX="104.0" layoutY="149.0" />
--      <Text layoutX="22.0" layoutY="166.0" strokeType="OUTSIDE" strokeWidth="0.0" text="Order Time:" />
--      <Text layoutX="11.0" layoutY="204.0" strokeType="OUTSIDE" strokeWidth="0.0" text="Phone Number:" />
--      <TextField fx:id="txtPhone" layoutX="104.0" layoutY="187.0" />
--      <Button fx:id="btnUpdate" layoutX="199.0" layoutY="290.0" mnemonicParsing="false" onAction="#UpdateOrder" text="Update" />
--      <Button fx:id="btnBack" layoutX="28.0" layoutY="290.0" mnemonicParsing="false" onAction="#Back" text="Back" />
--      <Label fx:id="txtStatus" layoutX="118.0" layoutY="294.0" />
--   </children>
--</AnchorPane>
-Index: src/logic/Menu.java
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package logic;\r\n\r\npublic class Menu {\r\n\tprivate String name;\r\n\tprivate int restaurantID;\r\n\tprivate Item[] items;\r\n\t\r\n\tpublic Item[] getItems() {\r\n\t\treturn items;\r\n\t}\r\n\tpublic void setItems(Item[] items) {\r\n\t\tthis.items = items;\r\n\t}\r\n\tpublic Menu(String name, int restaurantID) {\r\n\t\tthis.name = name;\r\n\t\tthis.restaurantID = restaurantID;\r\n\t}\r\n\tpublic String getName() {\r\n\t\treturn name;\r\n\t}\r\n\tpublic void setName(String name) {\r\n\t\tthis.name = name;\r\n\t}\r\n\tpublic int getRestaurantID() {\r\n\t\treturn restaurantID;\r\n\t}\r\n\tpublic void setRestaurantID(int restaurantID) {\r\n\t\tthis.restaurantID = restaurantID;\r\n\t}\t\r\n}\r\n
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/src/logic/Menu.java b/src/logic/Menu.java
---- a/src/logic/Menu.java	
-+++ b/src/logic/Menu.java	
-@@ -3,12 +3,12 @@
- public class Menu {
- 	private String name;
- 	private int restaurantID;
--	private Item[] items;
-+	private item_in_menu[] items;
- 	
--	public Item[] getItems() {
-+	public item_in_menu[] getItems() {
- 		return items;
- 	}
--	public void setItems(Item[] items) {
-+	public void setItems(item_in_menu[] items) {
- 		this.items = items;
- 	}
- 	public Menu(String name, int restaurantID) {
Index: src/Server/EchoServer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// This file contains material supporting section 3.7 of the textbook:\r\n// \"Object Oriented Software Engineering\" and is issued under the open-source\r\n// license found at www.lloseng.com \r\npackage Server;\r\n\r\nimport java.io.IOException;\r\nimport java.sql.Connection;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.Map;\r\n\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.JsonElement;\r\nimport com.google.gson.JsonObject;\r\n\r\nimport client.Request;\r\nimport common.DBController;\r\nimport logic.Account;\r\nimport logic.BusinessAccount;\r\nimport logic.Item;\r\nimport logic.Menu;\r\nimport logic.Order;\r\nimport logic.PrivateAccount;\r\nimport ocsf.server.AbstractServer;\r\nimport ocsf.server.ConnectionToClient;\r\n\r\n/**\r\n * This class overrides some of the methods in the abstract superclass in order\r\n * to give more functionality to the server.\r\n *\r\n * @author Dr Timothy C. Lethbridge\r\n * @author Dr Robert Lagani&egrave;re\r\n * @author Fran&ccedil;ois B&eacute;langer\r\n * @author Paul Holden\r\n * @version July 2000\r\n */\r\n\r\npublic class EchoServer extends AbstractServer {\r\n\t// Class variables *************************************************\r\n\r\n\t/**\r\n\t * The default port to listen on.\r\n\t */\r\n\tpublic static int DEFAULT_PORT;\r\n\r\n\t// Constructors ****************************************************\r\n\tpublic static String url, username, password;\r\n\tpublic static Map<String, String> clients = new HashMap<>();\r\n\r\n\t/**\r\n\t * Constructs an instance of the echo server.\r\n\t *\r\n\t * @param port The port number to connect on.\r\n\t * \r\n\t */\r\n\tpublic static ArrayList<String> orders = new ArrayList<String>();\r\n\tpublic static Connection con;\r\n\tpublic static Gson gson = new Gson();\r\n\tprivate final String GET = \"GET\";\r\n\tprivate final String POST = \"POST\";\r\n\tprivate final String PUT = \"PUT\";\r\n\tprivate final String DELETE = \"DELETE\";\r\n\r\n\tpublic EchoServer(int port) {\r\n\t\tsuper(port);\r\n\t}\r\n\r\n\t// Instance methods ************************************************\r\n\r\n\t/**\r\n\t * This method handles any messages received from the client.\r\n\t *\r\n\t * @param msg    The message received from the client.\r\n\t * @param client The connection from which the message originated.\r\n\t * @param\r\n\t */\r\n\tpublic void handleMessageFromClient(Object msg, ConnectionToClient client) {\r\n\t\tJsonElement body = null;\r\n\t\tRequest m = gson.fromJson((String) msg, Request.class);\r\n\t\tString method = m.getMethod();\r\n\t\tString path = m.getPath();\r\n\t\tSystem.out.println(\"m.getBody()\" + m.getBody());\r\n//\t\tString userName = gson.fromJson(body.getAsJsonObject().get(\"userName\"), String.class);\r\n//\t\tString password = gson.fromJson(body.getAsJsonObject().get(\"password\"), String.class);\r\n//\t\tSystem.out.println();\r\n\t\tif(m.getBody() != null) {\r\n\t\t\tbody = gson.toJsonTree(m.getBody());\r\n\t\t}\r\n\t\tResponse response = new Response();\r\n\t\tSystem.out.println(\"Message received: \" + path + \" \" + method + \" from \" + client);\r\n\t\tSystem.out.println(\"path\" + path);\r\n\t\tswitch (path) {\r\n\t\t// TODO start reports generator with a thread\r\n\t\tcase \"/import\":\r\n\t\tcase \"/ping\":\r\n\t\t\tclients.put(client.getInetAddress().getHostName(), client.getInetAddress().getHostAddress());\r\n\t\t\tServerPortFrameController.isAdded = true;\r\n\t\t\tresponse.setCode(200);\r\n\t\t\tresponse.setDescription(\"A connaction with the server has been established at port \" + DEFAULT_PORT);\r\n\t\t\tbreak;\r\n\t\tcase \"/orders\":\r\n\t\t\tswitch (method) {\r\n\t\t\tcase GET:\r\n\t\t\t\tint restaurantID = gson.fromJson(body.getAsJsonObject().get(\"restaurantID\"), Integer.class);\r\n\t\t\t\tOrderApiService.allOrders(restaurantID, response);\r\n\t\t\t\tbreak;\r\n\t\t\tcase POST:\r\n\t\t\t\tOrder addOrder = gson.fromJson(body.getAsJsonObject().get(\"order\"), Order.class);\r\n\t\t\t\tOrderApiService.addOrder(addOrder, response);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"/orders/paymentApproval/business\":// TODO\r\n\t\t\tswitch (method) {\r\n\t\t\tcase GET:\r\n//\t\t\t\t\t\t\tInteger accountID = gson.fromJson(m.get(\"userID\"), Integer.class);\r\n//\t\t\t\t\t\t\tInteger accountID = gson.fromJson(m.get(\"userID\"), Integer.class);\r\n//\t\t\t\t\t\t\tOrderApiService.getPaymentApproval(accountID,response);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"/orders/getOrderById\":\r\n\t\t\tswitch (method) {\r\n\t\t\tcase GET:\r\n\t\t\t\tInteger orderID = gson.fromJson(body.getAsJsonObject().get(\"orderId\"), Integer.class);\r\n\t\t\t\tOrderApiService.getOrderById(orderID, response);\r\n\t\t\t\tbreak;\r\n\t\t\tcase PUT:\r\n\t\t\t\tOrder updateOrder = gson.fromJson(body, Order.class);\r\n\t\t\t\tOrderApiService.updateOrder(updateOrder, response);\r\n\t\t\t\tbreak;\r\n\t\t\tcase DELETE:\r\n\t\t\t\torderID = gson.fromJson(body.getAsJsonObject().get(\"orderId\"), Integer.class);\r\n\t\t\t\tOrderApiService.deleteOrder(orderID, response);\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"/orders/getOrderById/getItems\":\r\n\t\t\tswitch (method) {\r\n\t\t\tcase GET:\r\n\t\t\t\tInteger orderID = gson.fromJson(body.getAsJsonObject().get(\"orderId\"), Integer.class);\r\n\t\t\t\tOrderApiService.getItemsByOrderID(orderID, response);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"/branch_manager\":\r\n\t\t\tbreak;\r\n\t\tcase \"/branch_manager/orders\":\r\n\t\t\tbreak;\r\n\t\tcase \"/restaurants/getCredit\":\r\n\t\t\tswitch (method) {\r\n\t\t\tcase GET:\r\n\t\t\t\tInteger restaurantID = gson.fromJson(body.getAsJsonObject().get(\"restaurantID\"), Integer.class);\r\n\t\t\t\tString userName = gson.fromJson(body.getAsJsonObject().get(\"userName\"), String.class);\r\n\t\t\t\tRestaurantApiService.getCredit(userName, restaurantID, response);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"/restaurants/areas\":\r\n\t\t\tswitch (method) {\r\n\t\t\tcase GET:\r\n\t\t\t\tString area = gson.fromJson(body.getAsJsonObject().get(\"area\"), String.class);\r\n\t\t\t\tRestaurantApiService.getRestaurantsByArea(area, response);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"/restaurants/areas/type\":\r\n\t\t\tswitch (method) {\r\n\t\t\tcase GET:\r\n\t\t\t\tString area = gson.fromJson(body.getAsJsonObject().get(\"area\"), String.class);\r\n\t\t\t\tString type = gson.fromJson(body.getAsJsonObject().get(\"type\"), String.class);\r\n\t\t\t\tRestaurantApiService.getRestaurantsByTypeAndArea(area, type, response);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"/restaurants/menus\":\r\n\t\t\tswitch (method) {\r\n\t\t\tcase POST:\r\n\t\t\t\tMenu menu = gson.fromJson(body, Menu.class);\r\n\t\t\t\tRestaurantApiService.createMenu(menu, response);\r\n\t\t\t\tbreak;\r\n\t\t\tcase GET:\r\n\t\t\t\tInteger restaurantID = gson.fromJson(body.getAsJsonObject().get(\"restaurantID\"), Integer.class);\r\n\t\t\t\tRestaurantApiService.allMenues(restaurantID, response);\r\n\t\t\t\tbreak;\r\n\t\t\tcase PUT:\r\n\t\t\t\tMenu oldMenu = gson.fromJson(body.getAsJsonObject().get(\"oldMenu\"), Menu.class);\r\n\t\t\t\tMenu newMenu = gson.fromJson(body.getAsJsonObject().get(\"newMenu\"), Menu.class);\r\n\t\t\t\tRestaurantApiService.editMenu(oldMenu, newMenu, response);\r\n\t\t\t\tbreak;\r\n\t\t\tcase DELETE:\r\n\t\t\t\tmenu = gson.fromJson(body.getAsJsonObject().get(\"oldMenu\"), Menu.class);\r\n\t\t\t\tRestaurantApiService.editMenu(menu, null, response);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"/restaurants/items\":\r\n\t\t\tswitch (method) {\r\n\t\t\tcase PUT:\r\n\t\t\t\tItem item = gson.fromJson(body, Item.class);\r\n\t\t\t\tRestaurantApiService.updateItem(item, response);\r\n\t\t\tcase POST:\r\n\t\t\t\titem = gson.fromJson(body, Item.class);\r\n\t\t\t\tRestaurantApiService.createItem(item, response);\r\n\t\t\t\tbreak;\r\n\t\t\tcase DELETE:\r\n\t\t\t\tInteger itemID = gson.fromJson(body.getAsJsonObject().get(\"itemID\"), Integer.class);\r\n\t\t\t\tRestaurantApiService.itemsDelete(itemID, response);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"/restaurants/items/categories\":\r\n\t\t\tswitch (method) {\r\n\t\t\tcase GET:\r\n\t\t\t\tint restaurantNum = gson.fromJson(body.getAsJsonObject().get(\"restaurantNum\"), Integer.class);\r\n\t\t\t\tRestaurantApiService.getAllCategories(restaurantNum, response);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n//\t\t\tcase \"/restaurants/getItemsByMenu\":\r\n//\t\t\t\tswitch (method) {\r\n//\t\t\t\tcase GET:\r\n//\t\t\t\t\tString menuName = gson.fromJson(body.getAsJsonObject().get(\"menuName\"), String.class);\r\n//\t\t\t\t\tint restaurantNum = gson.fromJson(body.getAsJsonObject().get(\"restaurantNum\"), Integer.class);\r\n//\t\t\t\t\tRestaurantApiService.get\r\n//\t\t\t\t\tbreak;\r\n//\r\n//\t\t\t\tdefault:\r\n//\t\t\t\t\tbreak;\r\n//\t\t\t\t}\r\n//\t\t\t\tbreak;\r\n\t\tcase \"/restaurants/menus/getItemsByType\":\r\n\t\t\tbreak;\r\n\t\tcase \"/restaurants/menus/category/getItemsBySubCategory\":\r\n\t\t\tbreak;\r\n\t\tcase \"/restaurants/approveOrder\":\r\n\t\t\tswitch (method) {\r\n\t\t\tcase POST:\r\n\t\t\t\tInteger orderID = gson.fromJson(body.getAsJsonObject().get(\"orderId\"), Integer.class);\r\n\t\t\t\tRestaurantApiService.approveOrder(orderID, response);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"/users/login\":\r\n\t\t\tSystem.out.println(\"lala\");\r\n\t\t\tString userName = gson.fromJson(body.getAsJsonObject().get(\"userName\"), String.class);\r\n\t\t\tString password = gson.fromJson(body.getAsJsonObject().get(\"password\"), String.class);\r\n\t\t\tSystem.out.println(\"userName\" +userName);\r\n\t\t\tSystem.out.println(\"password\" +password);\r\n\r\n\t\t\tAccountApiService.loginAccount(userName, password, response);\r\n\t\t\tbreak;\r\n\t\tcase \"/users/loginW4c\":\r\n\t\t\tString W4c = gson.fromJson(body.getAsJsonObject().get(\"W4c\"), String.class);\r\n\t\t\tAccountApiService.loginAccountW4C(W4c, response);\r\n\t\t\tbreak;\r\n\t\tcase \"/users/logout\":\r\n\t\t\tuserName = gson.fromJson(body.getAsJsonObject().get(\"userName\"), String.class);\r\n\t\t\tAccountApiService.logoutAccount(userName, response);\r\n\t\t\tbreak;\r\n\t\tcase \"/accounts/privateAccount\":\r\n\t\t\tswitch (method) {\r\n\t\t\tcase POST:\r\n\t\t\t\tPrivateAccount account = gson.fromJson(body, PrivateAccount.class);\r\n\t\t\t\tAccountApiService.createPrivateAccount(account, response);\r\n\t\t\t\tbreak;\r\n\t\t\tcase GET:\r\n\t\t\t\tAccount account1 = gson.fromJson(body, Account.class);\r\n\t\t\t\tAccountApiService.getAccount(account1, response);\r\n\t\t\t\tbreak;\r\n\t\t\tcase PUT:\r\n\t\t\t\taccount = gson.fromJson(body, PrivateAccount.class);\r\n\t\t\t\tAccountApiService.updatePrivateAccount(account, response);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"/accounts/businessAccount\":\r\n\t\t\tswitch (method) {\r\n\t\t\tcase POST:\r\n\t\t\t\tBusinessAccount account = gson.fromJson(body, BusinessAccount.class);\r\n\t\t\t\tAccountApiService.createBusinessAccount(account, response);\r\n\t\t\t\tbreak;\r\n\t\t\tcase GET:\r\n\t\t\t\tAccount account1 = gson.fromJson(body, Account.class);\r\n\t\t\t\tAccountApiService.getAccount(account1, response);\r\n\t\t\t\tbreak;\r\n\t\t\tcase PUT:\r\n\t\t\t\taccount = gson.fromJson(body, BusinessAccount.class);\r\n\t\t\t\tAccountApiService.updateBusinessAccount(account, response);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"/accounts\":\r\n\t\t\tswitch (method) {\r\n\t\t\tcase GET:\r\n\t\t\t\tint branchManagerID = gson.fromJson(body.getAsJsonObject().get(\"branchManagerID\"), Integer.class);\r\n\t\t\t\tAccountApiService.getAllAccounts(branchManagerID, response);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"/accounts/getAccount\":\r\n\t\t\tswitch (method) {\r\n\t\t\tcase DELETE:\r\n\t\t\t\tuserName = gson.fromJson(body.getAsJsonObject().get(\"userName\"), String.class);\r\n\t\t\t\tAccountApiService.deleteAccount(userName, response);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tdefault:\r\n\t\t\tresponse.setCode(500);\r\n\t\t\tresponse.setDescription(\"Bad request\");\r\n\t\t\tbreak;\r\n\t\t}\r\n\t\ttry {\r\n\t\t\tclient.sendToClient(gson.toJson(response));\r\n\t\t} catch (IOException e) {\r\n\t\t\t// TODO Auto-generated catch block\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * This method overrides the one in the superclass. Called when the server\r\n\t * starts listening for connections.\r\n\t */\r\n\tprotected void serverStarted() {\r\n\t\tSystem.out.println(\"Server listening for connections on port \" + getPort());\r\n\t\tcon = DBController.getMySQLConnection(EchoServer.url, EchoServer.username, EchoServer.password);\r\n\t}\r\n\r\n\t/**\r\n\t * This method overrides the one in the superclass. Called when the server stops\r\n\t * listening for connections.\r\n\t */\r\n\tprotected void serverStopped() {\r\n\t\tSystem.out.println(\"Server has stopped listening for connections.\");\r\n\t}\r\n}\r\n//End of EchoServer class\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Server/EchoServer.java b/src/Server/EchoServer.java
--- a/src/Server/EchoServer.java	(revision a90e01867d55ea477df846797199977cf4a38620)
+++ b/src/Server/EchoServer.java	(date 1640206308906)
@@ -242,6 +242,7 @@
 			break;
 		case "/users/login":
 			System.out.println("lala");
+			System.out.println(body.getAsJsonObject().get("userName"));
 			String userName = gson.fromJson(body.getAsJsonObject().get("userName"), String.class);
 			String password = gson.fromJson(body.getAsJsonObject().get("password"), String.class);
 			System.out.println("userName" +userName);
Index: src/guiNew/LoginController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package guiNew;\r\n\r\nimport java.io.IOException;\r\nimport java.net.InetAddress;\r\nimport java.net.UnknownHostException;\r\n\r\nimport com.google.gson.Gson;\r\nimport com.google.gson.JsonElement;\r\n\r\nimport CEO.CEOController;\r\nimport Server.Response;\r\nimport branchManager.BranchManagerController;\r\nimport client.ChatClient;\r\nimport client.ClientController;\r\nimport client.ClientUI;\r\nimport client.Request;\r\nimport javafx.event.ActionEvent;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Node;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.Button;\r\nimport javafx.scene.control.Label;\r\nimport javafx.scene.control.TextField;\r\nimport javafx.scene.layout.AnchorPane;\r\nimport javafx.scene.layout.HBox;\r\nimport javafx.stage.Stage;\r\nimport logic.Account;\r\nimport logic.BranchManager;\r\n\r\npublic class LoginController {\r\n\t// private DB db = new DB(5555);\r\n//\tprivate ClientController client;\r\n\t@FXML\r\n\tprivate TextField textFieldUsername;\r\n\r\n\t@FXML\r\n\tprivate TextField textFieldPassword;\r\n\r\n\t@FXML\r\n\tprivate Button btnLogin;\r\n\r\n\t@FXML\r\n\tprivate Label lableErrorMag;\r\n\r\n\t@FXML\r\n\tprivate HBox Nav1;\r\n\r\n\t@FXML\r\n\tprivate HBox Nav;\r\n\tprivate boolean flag;\r\n\r\n\t@FXML\r\n\tvoid Login(ActionEvent event) {\r\n\t\tSystem.out.println(\"Logged in\");\r\n\t\tflag = true;\r\n\t\tcheckTextFiled(textFieldUsername, lableErrorMag);\r\n\t\tcheckTextFiled(textFieldPassword, lableErrorMag);\r\n\t\tString username = textFieldUsername.getText();\r\n\t\tString password = textFieldPassword.getText();\r\n\t\tsentToJson(username, password);\r\n\t\tAccount account = response();\r\n\t\t// need to get response from the server hear!\r\n\t\tif (flag) {\r\n\t\t\ttry {\r\n\t\t\t\tString role = account.getRole(); //= \"CEO\";\r\n\t\t\t\tif (role != \"\") {\r\n\t\t\t\t\tFXMLLoader loader = new FXMLLoader();\r\n\t\t\t\t\t((Node) event.getSource()).getScene().getWindow().hide(); // hiding primary window\r\n\t\t\t\t\tStage primaryStage = new Stage();\r\n\t\t\t\t\tAnchorPane root = null;\r\n\t\t\t\t\tswitch (role) {\r\n\t\t\t\t\tcase \"CEO\":\r\n\t\t\t\t\t\tSystem.out.println(\"go to CEO\");\r\n//\t\t\t\t\t\tBranchManagerController.branchManager = account;\r\n\t\t\t\t\t\tCEOController.CEO = new Account(0, \"TalChen\", \"123\", \"Tal-Chen\", \"Ben-eliyahu\", \"email@email\",\r\n\t\t\t\t\t\t\t\t\"CEO\", \"055555555\", \"Active\", true, 0, \"north\", 0, \"w4c-a\");\r\n\t\t\t\t\t\troot = loader.load(getClass().getResource(\"/CEO/CEOPage.fxml\").openStream());\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"branch manager\":\r\n\t\t\t\t\t\tSystem.out.println(\"go to barnch manager\");\r\n//\t\t\t\t\t\tBranchManagerController.branchManager = account;\r\n\t\t\t\t\t\tBranchManagerController.branchManager = new Account(0, \"TalChen\", \"123\", \"Tal-Chen\",\r\n\t\t\t\t\t\t\t\t\"Ben-eliyahu\", \"email@email\", \"branch manager\", \"055555555\", \"Active\", true, 0, \"north\",\r\n\t\t\t\t\t\t\t\t0, \"w4c-a\");\r\n\t\t\t\t\t\troot = loader\r\n\t\t\t\t\t\t\t\t.load(getClass().getResource(\"/branchManager/BranchManagerPage.fxml\").openStream());\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"supplier\":\r\n\t\t\t\t\t\tSystem.out.println(\"go to supplier\");\r\n\t\t\t\t\t\troot = loader\r\n\t\t\t\t\t\t\t\t.load(getClass().getResource(\"/branchManager/BranchManagerPage.fxml\").openStream());\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"user\":\r\n\t\t\t\t\t\tSystem.out.println(\"go to ordinary user\");\r\n\t\t\t\t\t\troot = loader\r\n\t\t\t\t\t\t\t\t.load(getClass().getResource(\"/branchManager/BranchManagerPage.fxml\").openStream());\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tSystem.out.println(\"defult - error DB the user does not have a file\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\tlableErrorMag.setText(\"\");\r\n\t\t\t\t\tScene scene = new Scene(root);\r\n\t\t\t\t\tprimaryStage.setTitle(\"Home\");\r\n\t\t\t\t\tprimaryStage.setScene(scene);\r\n\t\t\t\t\tprimaryStage.show();\r\n\t\t\t\t} else\r\n\t\t\t\t\tlableErrorMag.setText(\"username or password incorrect\");\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate void sentToJson(String username, String password) {\r\n\t\tGson gson = new Gson();\r\n\t\tJsonElement jsonElem = gson.toJsonTree(new Object());\r\n\t\tjsonElem.getAsJsonObject().addProperty(\"userName\", username);\r\n\t\tjsonElem.getAsJsonObject().addProperty(\"password\", password);\r\n\r\n\t\tRequest request = new Request();\r\n\t\trequest.setPath(\"/users/login\");\r\n\t\trequest.setMethod(\"GET\");\r\n\t\trequest.setBody(gson.toJson(jsonElem));\r\n//\t\tJsonElement jsonUser = gson.toJsonTree(request);\r\n\r\n\t\tString jsonUser = gson.toJson(request);\r\n//    \tSystem.out.println(\"jsonFile : \"+jsonFile);\r\n\t\ttry {\r\n\t\t\tClientUI.chat.accept(jsonUser); // in here will be DB ask for restaurant id\r\n\t\t} catch (NullPointerException e) {\r\n\t\t\tSystem.out.println(\"new ClientController didn't work\");\r\n\t\t}\r\n\t}\r\n\r\n\tprivate Account response() {\r\n\t\tGson gson = new Gson();\r\n\t\tResponse response = ChatClient.serverAns;\r\n\t\tif (response.getCode() != 200 && response.getCode() != 201) \r\n\t\t\tlableErrorMag.setText(response.getDescription());// error massage\r\n\t\t\r\n\t\tSystem.out.println(\"-->>\"+response.getDescription()); // Description from server\r\n\t\tJsonElement jsonFile = gson.toJsonTree(response.getBody());\r\n\t\tAccount account = gson.fromJson(jsonFile, Account.class);\r\n\t\treturn account;\r\n\t}\r\n\r\n\tvoid checkTextFiled(TextField textField, Label lblrequired) {\r\n\t\tif (textField.getText().equals(\"\")) {\r\n\t\t\tlblrequired.setText(\"Please fill all the fields\");\r\n\t\t\tflag = false;\r\n\t\t} else {\r\n\t\t\tlblrequired.setText(\"\");\r\n\t\t}\r\n\t}\r\n\r\n\t@FXML\r\n\tvoid Exit(ActionEvent event) throws UnknownHostException {\r\n\t\tSystem.out.println(\"exit client Tool\");\r\n\t\tString[] ipHostName = new String[3];\r\n\t\tipHostName[0] = \"EXIT\";\r\n\t\tipHostName[1] = InetAddress.getLocalHost().getHostName();\r\n\t\tipHostName[2] = InetAddress.getLocalHost().getHostAddress();\r\n\t\ttry {\r\n\t\t\tClientUI.chat.accept(ipHostName);\r\n\t\t} catch (NullPointerException e) {\r\n\t\t\tSystem.out.println(\"new ClientController didn't work\");\r\n\t\t}\r\n\t\tSystem.exit(0);\r\n\t}\r\n\r\n\t@FXML\r\n\tvoid home(ActionEvent event) {\r\n\t\ttry {\r\n\t\t\tFXMLLoader loader = new FXMLLoader();\r\n\t\t\t((Node) event.getSource()).getScene().getWindow().hide(); // hiding primary window\r\n\t\t\tStage primaryStage = new Stage();\r\n\t\t\tAnchorPane root;\r\n\t\t\troot = loader.load(getClass().getResource(\"/branchManager/BranchManagerPage.fxml\").openStream());\r\n\t\t\tScene scene = new Scene(root);\r\n\t\t\tprimaryStage.setTitle(\"Branch manager\");\r\n\t\t\tprimaryStage.setScene(scene);\r\n\t\t\tprimaryStage.show();\r\n\t\t} catch (IOException e) {\r\n\t\t\te.printStackTrace();\r\n\t\t}\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/guiNew/LoginController.java b/src/guiNew/LoginController.java
--- a/src/guiNew/LoginController.java	(revision a90e01867d55ea477df846797199977cf4a38620)
+++ b/src/guiNew/LoginController.java	(date 1640207466297)
@@ -121,7 +121,7 @@
 		Request request = new Request();
 		request.setPath("/users/login");
 		request.setMethod("GET");
-		request.setBody(gson.toJson(jsonElem));
+		request.setBody(jsonElem);
 //		JsonElement jsonUser = gson.toJsonTree(request);
 
 		String jsonUser = gson.toJson(request);
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"a8f96d65-3f42-4f16-b273-68b1848b5372\" name=\"Default Changelist\" comment=\"\">\r\n      <change beforePath=\"$PROJECT_DIR$/src/biteme/server/mainfortesting.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/biteme/server/mainfortesting.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"225gqxqWU49kiNkRdzsT1bDEfuA\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"TODO_SCOPE\" value=\"All Places\" />\r\n    <property name=\"codeWithMe.voiceChat.enabledByDefault\" value=\"false\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"preferences.pluginManager\" />\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"test\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"client.test\" />\r\n      <module name=\"BiteMe_PrototypeGUI_FX\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"common.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Application.test\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"a8f96d65-3f42-4f16-b273-68b1848b5372\" name=\"Default Changelist\" comment=\"\" />\r\n      <created>1639133090701</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1639133090701</updated>\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n        <entry key=\"bba5d290-4df3-4deb-8416-ad490cdde44c\">\r\n          <value>\r\n            <State>\r\n              <option name=\"SHOW_ONLY_AFFECTED_CHANGES\" value=\"true\" />\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"HEAD\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                  <entry key=\"roots\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"$PROJECT_DIR$\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n    <option name=\"OPEN_GENERIC_TABS\">\r\n      <map>\r\n        <entry key=\"bba5d290-4df3-4deb-8416-ad490cdde44c\" value=\"TOOL_WINDOW\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision a90e01867d55ea477df846797199977cf4a38620)
+++ b/.idea/workspace.xml	(date 1640332699886)
@@ -1,25 +1,45 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="ChangeListManager">
-    <list default="true" id="a8f96d65-3f42-4f16-b273-68b1848b5372" name="Default Changelist" comment="">
-      <change beforePath="$PROJECT_DIR$/src/biteme/server/mainfortesting.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/biteme/server/mainfortesting.java" afterDir="false" />
+    <list default="true" id="e1efe527-bc78-4ce4-a250-5b228125d6ea" name="Default Changelist" comment="">
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_18_12_2021_22_59_[Default_Changelist]/Category.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_18_12_2021_22_59_[Default_Changelist]/ClientUI.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_18_12_2021_22_59_[Default_Changelist]/DBController.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_18_12_2021_22_59_[Default_Changelist]/DBControllerTest.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_18_12_2021_22_59_[Default_Changelist]/Menu.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_18_12_2021_22_59_[Default_Changelist]/Order.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_18_12_2021_22_59_[Default_Changelist]/Restaurant.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_18_12_2021_22_59_[Default_Changelist]/Shippment.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_18_12_2021_22_59_[Default_Changelist]/ask.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_18_12_2021_22_59_[Default_Changelist]/shelved.patch" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_18_12_2021_22_59_[Default_Changelist]1/Category.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_18_12_2021_22_59_[Default_Changelist]1/ClientUI.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_18_12_2021_22_59_[Default_Changelist]1/DBController.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_18_12_2021_22_59_[Default_Changelist]1/DBControllerTest.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_18_12_2021_22_59_[Default_Changelist]1/Menu.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_18_12_2021_22_59_[Default_Changelist]1/Order.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_18_12_2021_22_59_[Default_Changelist]1/Restaurant.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_18_12_2021_22_59_[Default_Changelist]1/Shippment.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_18_12_2021_22_59_[Default_Changelist]1/ask.class" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_18_12_2021_22_59_[Default_Changelist]1/shelved.patch" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_18_12_2021_22_59__Default_Changelist_.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_18_12_2021_22_59__Default_Changelist_1.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/bin/.gitignore" beforeDir="false" afterPath="$PROJECT_DIR$/bin/.gitignore" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/bin/Server/EchoServer.class" beforeDir="false" afterPath="$PROJECT_DIR$/bin/Server/EchoServer.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Server/AccountApiService.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Server/AccountApiService.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/Server/EchoServer.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/Server/EchoServer.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/guiNew/LoginController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/guiNew/LoginController.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
     <option name="LAST_RESOLUTION" value="IGNORE" />
-  </component>
-  <component name="FileTemplateManagerImpl">
-    <option name="RECENT_TEMPLATES">
-      <list>
-        <option value="Class" />
-      </list>
-    </option>
   </component>
   <component name="Git.Settings">
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
   </component>
-  <component name="ProjectId" id="225gqxqWU49kiNkRdzsT1bDEfuA" />
+  <component name="ProjectId" id="22iuODG8KR6GltDPWiUS7Zasv12" />
   <component name="ProjectViewState">
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
@@ -27,82 +47,15 @@
   <component name="PropertiesComponent">
     <property name="RunOnceActivity.OpenProjectViewOnStart" value="true" />
     <property name="RunOnceActivity.ShowReadmeOnStart" value="true" />
-    <property name="TODO_SCOPE" value="All Places" />
-    <property name="codeWithMe.voiceChat.enabledByDefault" value="false" />
-    <property name="last_opened_file_path" value="$PROJECT_DIR$" />
-    <property name="settings.editor.selected.configurable" value="preferences.pluginManager" />
-  </component>
-  <component name="RunManager">
-    <configuration name="test" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
-      <option name="MAIN_CLASS_NAME" value="client.test" />
-      <module name="BiteMe_PrototypeGUI_FX" />
-      <extension name="coverage">
-        <pattern>
-          <option name="PATTERN" value="common.*" />
-          <option name="ENABLED" value="true" />
-        </pattern>
-      </extension>
-      <method v="2">
-        <option name="Make" enabled="true" />
-      </method>
-    </configuration>
-    <recent_temporary>
-      <list>
-        <item itemvalue="Application.test" />
-      </list>
-    </recent_temporary>
   </component>
-  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
   <component name="TaskManager">
     <task active="true" id="Default" summary="Default task">
-      <changelist id="a8f96d65-3f42-4f16-b273-68b1848b5372" name="Default Changelist" comment="" />
-      <created>1639133090701</created>
+      <changelist id="e1efe527-bc78-4ce4-a250-5b228125d6ea" name="Default Changelist" comment="" />
+      <created>1640332696717</created>
       <option name="number" value="Default" />
       <option name="presentableId" value="Default" />
-      <updated>1639133090701</updated>
+      <updated>1640332696717</updated>
     </task>
     <servers />
   </component>
-  <component name="Vcs.Log.Tabs.Properties">
-    <option name="TAB_STATES">
-      <map>
-        <entry key="MAIN">
-          <value>
-            <State />
-          </value>
-        </entry>
-        <entry key="bba5d290-4df3-4deb-8416-ad490cdde44c">
-          <value>
-            <State>
-              <option name="SHOW_ONLY_AFFECTED_CHANGES" value="true" />
-              <option name="FILTERS">
-                <map>
-                  <entry key="branch">
-                    <value>
-                      <list>
-                        <option value="HEAD" />
-                      </list>
-                    </value>
-                  </entry>
-                  <entry key="roots">
-                    <value>
-                      <list>
-                        <option value="$PROJECT_DIR$" />
-                      </list>
-                    </value>
-                  </entry>
-                </map>
-              </option>
-            </State>
-          </value>
-        </entry>
-      </map>
-    </option>
-    <option name="OPEN_GENERIC_TABS">
-      <map>
-        <entry key="bba5d290-4df3-4deb-8416-ad490cdde44c" value="TOOL_WINDOW" />
-      </map>
-    </option>
-    <option name="oldMeFiltersMigrated" value="true" />
-  </component>
 </project>
\ No newline at end of file
